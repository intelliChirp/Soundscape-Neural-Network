diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..5697d71
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+*.npy
+*.wav
+ant-cnn/wandb/
+bio-cnn/wandb/
+geo-cnn/wandb/
\ No newline at end of file
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 0000000..03d9549
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/intellichirp-snaw-NN.iml b/.idea/intellichirp-snaw-NN.iml
new file mode 100644
index 0000000..c956989
--- /dev/null
+++ b/.idea/intellichirp-snaw-NN.iml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..28a804d
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JavaScriptSettings">
+    <option name="languageLevel" value="ES6" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..a663403
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/intellichirp-snaw-NN.iml" filepath="$PROJECT_DIR$/.idea/intellichirp-snaw-NN.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000..38223a3
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="b5902b74-b91d-4838-aff6-605119fa9e4b" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/geo-cnn/geo-cnn.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/geo-cnn/geo-cnn.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/geo-cnn/geo_cnn_model.h5" beforeDir="false" afterPath="$PROJECT_DIR$/geo-cnn/geo_cnn_model.h5" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectId" id="1YS87hcwtpKSQTYA3v8PdlK9DdT" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showExcludedFiles" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../dir/SNAW" />
+    <property name="settings.editor.selected.configurable" value="reference.settingsdialog.IDE.editor.colors" />
+  </component>
+  <component name="SvnConfiguration">
+    <configuration />
+  </component>
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="b5902b74-b91d-4838-aff6-605119fa9e4b" name="Default Changelist" comment="" />
+      <created>1583654581585</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1583654581585</updated>
+      <workItem from="1583654586575" duration="666000" />
+      <workItem from="1583786421901" duration="244000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="1" />
+  </component>
+  <component name="WindowStateProjectService">
+    <state x="740" y="276" key="FileChooserDialogImpl" timestamp="1583786665877">
+      <screen x="0" y="0" width="1920" height="1040" />
+    </state>
+    <state x="740" y="276" key="FileChooserDialogImpl/0.0.1920.1040@0.0.1920.1040" timestamp="1583786665877" />
+    <state x="461" y="163" key="SettingsEditor" timestamp="1582924517268">
+      <screen x="0" y="0" width="1920" height="1040" />
+    </state>
+    <state x="461" y="163" key="SettingsEditor/0.0.1920.1040@0.0.1920.1040" timestamp="1582924517268" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/ant-cnn/.ipynb_checkpoints/ant-cnn-checkpoint.ipynb b/ant-cnn/.ipynb_checkpoints/ant-cnn-checkpoint.ipynb
deleted file mode 100644
index 9e9db9a..0000000
--- a/ant-cnn/.ipynb_checkpoints/ant-cnn-checkpoint.ipynb
+++ /dev/null
@@ -1,526 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'librosa'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "\u001b[1;32m<ipython-input-1-301b462f29c8>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpreprocess\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mConv2D\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mMaxPooling2D\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mLSTM\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\Documents\\School\\Capstone\\intellichirp-snaw-NN\\NN\\ant-cnn\\preprocess.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mlibrosa\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'librosa'"
-     ]
-    }
-   ],
-   "source": [
-    "from preprocess import *\n",
-    "import keras\n",
-    "from keras.models import Sequential\n",
-    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM\n",
-    "from keras.utils import to_categorical\n",
-    "import wandb\n",
-    "from wandb.keras import WandbCallback\n",
-    "import matplotlib.pyplot as plt"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/iqcktkix\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/iqcktkix</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
-      "Saving vectors of label - 'bus': 100%|███████████████████████████████████████████████| 109/109 [00:04<00:00, 22.23it/s]\n",
-      "Saving vectors of label - 'car_horn': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 68.21it/s]\n",
-      "Saving vectors of label - 'chainsaw': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 43.29it/s]\n",
-      "Saving vectors of label - 'cow': 100%|█████████████████████████████████████████████████| 40/40 [00:00<00:00, 54.85it/s]\n",
-      "Saving vectors of label - 'engine': 100%|██████████████████████████████████████████████| 40/40 [00:00<00:00, 54.93it/s]\n",
-      "Saving vectors of label - 'footsteps': 100%|███████████████████████████████████████████| 40/40 [00:00<00:00, 65.51it/s]\n",
-      "Saving vectors of label - 'hand_saw': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 53.98it/s]\n",
-      "Saving vectors of label - 'hen': 100%|█████████████████████████████████████████████████| 40/40 [00:00<00:00, 65.41it/s]\n",
-      "Saving vectors of label - 'rooster': 100%|█████████████████████████████████████████████| 40/40 [00:00<00:00, 68.64it/s]\n",
-      "Saving vectors of label - 'siren': 100%|███████████████████████████████████████████████| 40/40 [00:00<00:00, 55.64it/s]\n"
-     ]
-    }
-   ],
-   "source": [
-    "wandb.init()\n",
-    "config = wandb.config\n",
-    "\n",
-    "config.max_len = 11\n",
-    "config.buckets = 20\n",
-    "\n",
-    "# Save data to array file first\n",
-    "save_data_to_array(max_len=config.max_len, n_mfcc=config.buckets)\n",
-    "\n",
-    "labels=[\"bus\", \"car_horn\", \"chainsaw\", \"cow\", \"engine\", \"footsteps\", \"hand_saw\", \"hen\", \"rooster\", \"siren\"]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Loading train/test set\n",
-    "X_train, X_test, y_train, y_test = get_train_test()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
-     ]
-    }
-   ],
-   "source": [
-    "# Setting channels to 1 to generalize stereo sound to 1 channel\n",
-    "channels = 1\n",
-    "config.epochs = 50\n",
-    "config.batch_size = 100\n",
-    "\n",
-    "# Number of classes\n",
-    "num_classes = 10\n",
-    "\n",
-    "# Reshape X_train and X_test to include a 4th dimension (channels)\n",
-    "X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len, channels)\n",
-    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "3.0\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "# Spectrogram visualized of 0th element\n",
-    "plt.imshow(X_train[1, :, :, 0])\n",
-    "print(y_train[1])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Getting vector number where each number corresponds to a label\n",
-    "y_train_hot = to_categorical(y_train)\n",
-    "y_test_hot = to_categorical(y_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Building the model\n",
-    "model = Sequential()\n",
-    "\n",
-    "# Conv2D: \n",
-    "#    Filters: 32\n",
-    "#    Kernel_size: (3,3) (height/width of the 2D convolution window)     \n",
-    "model.add(Conv2D(32, (3, 3),\n",
-    "    input_shape=(config.buckets, config.max_len, channels),\n",
-    "    activation='relu'))\n",
-    "\n",
-    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
-    "\n",
-    "model.add(Flatten())\n",
-    "\n",
-    "model.add(Dense(128, activation='relu'))\n",
-    "model.add(Dense(num_classes, activation='softmax'))"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# Configure CNN for training\n",
-    "model.compile(loss=\"categorical_crossentropy\",\n",
-    "                  optimizer=\"adam\",\n",
-    "                  metrics=['accuracy'])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {
-    "scrolled": false
-   },
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/7sybendi\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/7sybendi</a><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Train on 281 samples, validate on 188 samples\n",
-      "Epoch 1/50\n",
-      "281/281 [==============================] - ETA: 2s - loss: 23.0465 - accuracy: 0.093 - ETA: 0s - loss: 16.3184 - accuracy: 0.085 - 0s 2ms/step - loss: 12.3469 - accuracy: 0.1530 - val_loss: 6.6698 - val_accuracy: 0.2766\n",
-      "Epoch 2/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 5.0918 - accuracy: 0.31 - ETA: 0s - loss: 4.7224 - accuracy: 0.26 - 0s 333us/step - loss: 4.5251 - accuracy: 0.2776 - val_loss: 3.5798 - val_accuracy: 0.3138\n",
-      "Epoch 3/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 2.9302 - accuracy: 0.37 - ETA: 0s - loss: 2.8241 - accuracy: 0.31 - 0s 325us/step - loss: 2.7315 - accuracy: 0.3203 - val_loss: 2.8565 - val_accuracy: 0.3032\n",
-      "Epoch 4/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.7559 - accuracy: 0.46 - ETA: 0s - loss: 1.7744 - accuracy: 0.48 - 0s 297us/step - loss: 1.7635 - accuracy: 0.4911 - val_loss: 2.7842 - val_accuracy: 0.3777\n",
-      "Epoch 5/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.9932 - accuracy: 0.59 - ETA: 0s - loss: 1.4765 - accuracy: 0.55 - 0s 500us/step - loss: 1.3992 - accuracy: 0.5658 - val_loss: 2.4757 - val_accuracy: 0.3511\n",
-      "Epoch 6/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.0645 - accuracy: 0.65 - ETA: 0s - loss: 1.3214 - accuracy: 0.63 - 0s 539us/step - loss: 1.2217 - accuracy: 0.6548 - val_loss: 2.8309 - val_accuracy: 0.3617\n",
-      "Epoch 7/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.7947 - accuracy: 0.78 - ETA: 0s - loss: 1.0072 - accuracy: 0.69 - 0s 374us/step - loss: 1.0246 - accuracy: 0.7011 - val_loss: 2.5759 - val_accuracy: 0.4202\n",
-      "Epoch 8/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.8965 - accuracy: 0.75 - ETA: 0s - loss: 1.0584 - accuracy: 0.65 - 0s 335us/step - loss: 0.9949 - accuracy: 0.6797 - val_loss: 2.7374 - val_accuracy: 0.4096\n",
-      "Epoch 9/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.7779 - accuracy: 0.78 - 0s 288us/step - loss: 0.8002 - accuracy: 0.7722 - val_loss: 2.5783 - val_accuracy: 0.4096\n",
-      "Epoch 10/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5472 - accuracy: 0.81 - ETA: 0s - loss: 0.7422 - accuracy: 0.78 - ETA: 0s - loss: 0.7563 - accuracy: 0.77 - 0s 730us/step - loss: 0.7588 - accuracy: 0.7722 - val_loss: 2.8751 - val_accuracy: 0.3883\n",
-      "Epoch 11/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.2013 - accuracy: 0.75 - ETA: 0s - loss: 0.6930 - accuracy: 0.81 - 0s 501us/step - loss: 0.6858 - accuracy: 0.8185 - val_loss: 2.6259 - val_accuracy: 0.3564\n",
-      "Epoch 12/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3786 - accuracy: 0.93 - ETA: 0s - loss: 0.5313 - accuracy: 0.84 - 0s 320us/step - loss: 0.5298 - accuracy: 0.8470 - val_loss: 2.7889 - val_accuracy: 0.3511\n",
-      "Epoch 13/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5906 - accuracy: 0.84 - ETA: 0s - loss: 0.5497 - accuracy: 0.84 - 0s 340us/step - loss: 0.5385 - accuracy: 0.8505 - val_loss: 2.6226 - val_accuracy: 0.3989\n",
-      "Epoch 14/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.4711 - accuracy: 0.90 - ETA: 0s - loss: 0.5003 - accuracy: 0.87 - 0s 353us/step - loss: 0.4798 - accuracy: 0.8826 - val_loss: 2.9803 - val_accuracy: 0.3138\n",
-      "Epoch 15/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5302 - accuracy: 0.84 - 0s 276us/step - loss: 0.4402 - accuracy: 0.9004 - val_loss: 2.6732 - val_accuracy: 0.4043\n",
-      "Epoch 16/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2521 - accuracy: 0.93 - ETA: 0s - loss: 0.3664 - accuracy: 0.89 - 0s 327us/step - loss: 0.3706 - accuracy: 0.8897 - val_loss: 2.9172 - val_accuracy: 0.3457\n",
-      "Epoch 17/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3003 - accuracy: 0.87 - 0s 261us/step - loss: 0.3737 - accuracy: 0.9004 - val_loss: 2.7488 - val_accuracy: 0.4043\n",
-      "Epoch 18/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2518 - accuracy: 0.90 - ETA: 0s - loss: 0.3444 - accuracy: 0.91 - 0s 328us/step - loss: 0.3300 - accuracy: 0.9217 - val_loss: 2.8965 - val_accuracy: 0.4255\n",
-      "Epoch 19/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2022 - accuracy: 0.93 - ETA: 0s - loss: 0.3102 - accuracy: 0.91 - 0s 381us/step - loss: 0.3142 - accuracy: 0.9146 - val_loss: 3.0782 - val_accuracy: 0.3830\n",
-      "Epoch 20/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.4091 - accuracy: 0.87 - ETA: 0s - loss: 0.2662 - accuracy: 0.94 - 0s 349us/step - loss: 0.2553 - accuracy: 0.9466 - val_loss: 2.9722 - val_accuracy: 0.3989\n",
-      "Epoch 21/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3199 - accuracy: 0.84 - ETA: 0s - loss: 0.2778 - accuracy: 0.92 - 0s 328us/step - loss: 0.2780 - accuracy: 0.9288 - val_loss: 3.1543 - val_accuracy: 0.3777\n",
-      "Epoch 22/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2065 - accuracy: 0.93 - ETA: 0s - loss: 0.2018 - accuracy: 0.95 - 0s 312us/step - loss: 0.2135 - accuracy: 0.9573 - val_loss: 3.0016 - val_accuracy: 0.3723\n",
-      "Epoch 23/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1530 - accuracy: 1.00 - ETA: 0s - loss: 0.1672 - accuracy: 0.96 - 0s 391us/step - loss: 0.1630 - accuracy: 0.9680 - val_loss: 2.9483 - val_accuracy: 0.4149\n",
-      "Epoch 24/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0950 - accuracy: 1.00 - ETA: 0s - loss: 0.1391 - accuracy: 0.97 - ETA: 0s - loss: 0.1322 - accuracy: 0.98 - 0s 742us/step - loss: 0.1495 - accuracy: 0.9786 - val_loss: 3.1443 - val_accuracy: 0.3723\n",
-      "Epoch 25/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2155 - accuracy: 0.96 - ETA: 0s - loss: 0.1644 - accuracy: 0.96 - 0s 345us/step - loss: 0.1596 - accuracy: 0.9680 - val_loss: 3.1408 - val_accuracy: 0.3777\n",
-      "Epoch 26/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2744 - accuracy: 0.96 - 0s 279us/step - loss: 0.1713 - accuracy: 0.9644 - val_loss: 3.3056 - val_accuracy: 0.3883\n",
-      "Epoch 27/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0661 - accuracy: 1.00 - ETA: 0s - loss: 0.1034 - accuracy: 0.98 - 0s 358us/step - loss: 0.1384 - accuracy: 0.9786 - val_loss: 3.1630 - val_accuracy: 0.3564\n",
-      "Epoch 28/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0931 - accuracy: 1.00 - 0s 334us/step - loss: 0.1158 - accuracy: 0.9786 - val_loss: 3.2077 - val_accuracy: 0.3936\n",
-      "Epoch 29/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0765 - accuracy: 1.00 - ETA: 0s - loss: 0.1380 - accuracy: 0.97 - ETA: 0s - loss: 0.1156 - accuracy: 0.98 - 0s 595us/step - loss: 0.1128 - accuracy: 0.9822 - val_loss: 3.3168 - val_accuracy: 0.3989\n",
-      "Epoch 30/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0909 - accuracy: 1.00 - ETA: 0s - loss: 0.0954 - accuracy: 0.98 - 0s 515us/step - loss: 0.0994 - accuracy: 0.9893 - val_loss: 3.3483 - val_accuracy: 0.3723\n",
-      "Epoch 31/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0612 - accuracy: 1.00 - 0s 258us/step - loss: 0.0910 - accuracy: 0.9786 - val_loss: 3.3935 - val_accuracy: 0.3723\n",
-      "Epoch 32/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0532 - accuracy: 1.00 - ETA: 0s - loss: 0.1474 - accuracy: 0.98 - 0s 411us/step - loss: 0.1534 - accuracy: 0.9822 - val_loss: 3.4210 - val_accuracy: 0.3723\n",
-      "Epoch 33/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2349 - accuracy: 0.93 - ETA: 0s - loss: 0.1145 - accuracy: 0.98 - 0s 453us/step - loss: 0.1363 - accuracy: 0.9822 - val_loss: 3.5561 - val_accuracy: 0.4096\n",
-      "Epoch 34/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1375 - accuracy: 0.96 - ETA: 0s - loss: 0.1624 - accuracy: 0.95 - 0s 365us/step - loss: 0.1564 - accuracy: 0.9537 - val_loss: 3.7636 - val_accuracy: 0.3883\n",
-      "Epoch 35/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1473 - accuracy: 0.96 - ETA: 0s - loss: 0.1620 - accuracy: 0.94 - 0s 436us/step - loss: 0.1161 - accuracy: 0.9680 - val_loss: 3.4313 - val_accuracy: 0.3617\n",
-      "Epoch 36/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1176 - accuracy: 0.96 - ETA: 0s - loss: 0.1088 - accuracy: 0.98 - 0s 341us/step - loss: 0.1037 - accuracy: 0.9822 - val_loss: 3.5027 - val_accuracy: 0.3404\n",
-      "Epoch 37/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0528 - accuracy: 1.00 - 0s 276us/step - loss: 0.0928 - accuracy: 0.9786 - val_loss: 3.4027 - val_accuracy: 0.3830\n",
-      "Epoch 38/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0446 - accuracy: 1.00 - ETA: 0s - loss: 0.1070 - accuracy: 0.98 - 0s 527us/step - loss: 0.1131 - accuracy: 0.9858 - val_loss: 3.4673 - val_accuracy: 0.4043\n",
-      "Epoch 39/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0330 - accuracy: 1.00 - ETA: 0s - loss: 0.0613 - accuracy: 0.99 - 0s 518us/step - loss: 0.0732 - accuracy: 0.9929 - val_loss: 3.5865 - val_accuracy: 0.3830\n",
-      "Epoch 40/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0310 - accuracy: 1.00 - 0s 257us/step - loss: 0.0709 - accuracy: 0.9858 - val_loss: 3.4783 - val_accuracy: 0.3723\n",
-      "Epoch 41/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2000 - accuracy: 0.96 - 0s 248us/step - loss: 0.0775 - accuracy: 0.9858 - val_loss: 3.5490 - val_accuracy: 0.3777\n",
-      "Epoch 42/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0373 - accuracy: 1.00 - ETA: 0s - loss: 0.0730 - accuracy: 0.98 - 0s 363us/step - loss: 0.0740 - accuracy: 0.9858 - val_loss: 3.8505 - val_accuracy: 0.3723\n",
-      "Epoch 43/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0341 - accuracy: 1.00 - ETA: 0s - loss: 0.0645 - accuracy: 0.98 - 0s 449us/step - loss: 0.0596 - accuracy: 0.9893 - val_loss: 3.6512 - val_accuracy: 0.3777\n",
-      "Epoch 44/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0223 - accuracy: 1.00 - 0s 252us/step - loss: 0.0542 - accuracy: 0.9929 - val_loss: 3.6441 - val_accuracy: 0.3670\n",
-      "Epoch 45/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0308 - accuracy: 1.00 - 0s 275us/step - loss: 0.0468 - accuracy: 0.9893 - val_loss: 3.6158 - val_accuracy: 0.3723\n",
-      "Epoch 46/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0172 - accuracy: 1.00 - ETA: 0s - loss: 0.0425 - accuracy: 0.99 - 0s 486us/step - loss: 0.0504 - accuracy: 0.9929 - val_loss: 3.6831 - val_accuracy: 0.3777\n",
-      "Epoch 47/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0248 - accuracy: 1.00 - ETA: 0s - loss: 0.1069 - accuracy: 0.99 - 0s 357us/step - loss: 0.0945 - accuracy: 0.9929 - val_loss: 3.7183 - val_accuracy: 0.3830\n",
-      "Epoch 48/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0305 - accuracy: 1.00 - 0s 257us/step - loss: 0.0545 - accuracy: 0.9858 - val_loss: 3.7581 - val_accuracy: 0.3989\n",
-      "Epoch 49/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0211 - accuracy: 1.00 - ETA: 0s - loss: 0.0681 - accuracy: 0.98 - 0s 358us/step - loss: 0.0656 - accuracy: 0.9822 - val_loss: 3.9350 - val_accuracy: 0.3723\n",
-      "Epoch 50/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0954 - accuracy: 0.96 - ETA: 0s - loss: 0.0738 - accuracy: 0.98 - 0s 555us/step - loss: 0.0570 - accuracy: 0.9893 - val_loss: 3.7512 - val_accuracy: 0.3670\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "<keras.callbacks.callbacks.History at 0x16ff36d33c8>"
-      ]
-     },
-     "execution_count": 10,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "wandb.init()\n",
-    "\n",
-    "# Train the CNN model\n",
-    "#    X_train: Input data\n",
-    "#    y_train_hot: Target data\n",
-    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model has been saved.\n"
-     ]
-    }
-   ],
-   "source": [
-    "# Save the keras model\n",
-    "model.save(\"ant_cnn_model.h5\")\n",
-    "print(\"Model has been saved.\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## Running the IntelliChirp Biophony CNN"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "metadata": {
-    "scrolled": true
-   },
-   "outputs": [],
-   "source": [
-    "from keras.models import load_model\n",
-    "\n",
-    "# Load the model\n",
-    "loaded_model = load_model('ant_cnn_model.h5')"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Model: \"sequential_1\"\n",
-      "_________________________________________________________________\n",
-      "Layer (type)                 Output Shape              Param #   \n",
-      "=================================================================\n",
-      "conv2d_1 (Conv2D)            (None, 18, 9, 32)         320       \n",
-      "_________________________________________________________________\n",
-      "max_pooling2d_1 (MaxPooling2 (None, 9, 4, 32)          0         \n",
-      "_________________________________________________________________\n",
-      "flatten_1 (Flatten)          (None, 1152)              0         \n",
-      "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 128)               147584    \n",
-      "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 10)                1290      \n",
-      "=================================================================\n",
-      "Total params: 149,194\n",
-      "Trainable params: 149,194\n",
-      "Non-trainable params: 0\n",
-      "_________________________________________________________________\n"
-     ]
-    }
-   ],
-   "source": [
-    "# Summarize the model\n",
-    "model.summary()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 15,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "PREDICTED VALUES\n",
-      "\n",
-      " bus :  0.00002306\n",
-      "\n",
-      " car_horn :  0.98330659\n",
-      "\n",
-      " chainsaw :  0.00023836\n",
-      "\n",
-      " cow :  0.00675107\n",
-      "\n",
-      " engine :  0.00007791\n",
-      "\n",
-      " footsteps :  0.00000021\n",
-      "\n",
-      " hand_saw :  0.00959078\n",
-      "\n",
-      " hen :  0.00000000\n",
-      "\n",
-      " rooster :  0.00001190\n",
-      "\n",
-      " siren :  0.00000016\n",
-      "\n",
-      "\n",
-      "GUESS:  car_horn\n"
-     ]
-    }
-   ],
-   "source": [
-    "## Running the model\n",
-    "\n",
-    "# Convert wav to MFCC\n",
-    "prediction_data = wav2mfcc('./prediction/cow.wav')\n",
-    "\n",
-    "# Reshape to 4 dimensions\n",
-    "prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
-    "\n",
-    "# Run the model on the inputted file\n",
-    "predicted = loaded_model.predict(prediction_data)\n",
-    "\n",
-    "# Output the prediction values for each class\n",
-    "print ('PREDICTED VALUES')\n",
-    "labels_indices = range(len(labels))\n",
-    "max_value = 0\n",
-    "max_value_index = 0\n",
-    "for index in labels_indices:\n",
-    "    print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
-    "    if predicted[0,index] > max_value:\n",
-    "        max_value_index = index\n",
-    "        max_value = predicted[0,index]\n",
-    "\n",
-    "# Output the prediction\n",
-    "if max_value < 0.5:\n",
-    "    print(\"GUESS: Nothing\")\n",
-    "else:\n",
-    "    print('\\n\\nGUESS: ', labels[max_value_index])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.2"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 2
-}
diff --git a/ant-cnn/__pycache__/preprocess.cpython-38.pyc b/ant-cnn/__pycache__/preprocess.cpython-38.pyc
deleted file mode 100644
index ec4c7b7..0000000
Binary files a/ant-cnn/__pycache__/preprocess.cpython-38.pyc and /dev/null differ
diff --git a/ant-cnn/ant-cnn.ipynb b/ant-cnn/ant-cnn.ipynb
index 27b1e94..ee2f5b5 100644
--- a/ant-cnn/ant-cnn.ipynb
+++ b/ant-cnn/ant-cnn.ipynb
@@ -2,604 +2,35 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 43,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n",
-      "C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3201: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
-      "  if training is 1 or training is True:\n",
-      "C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3207: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n",
-      "  elif training is 0 or training is False:\n",
-      "ERROR:root:Internal Python error in the inspect module.\n",
-      "Below is the traceback from this internal error.\n",
-      "\n",
-      "ERROR:root:Internal Python error in the inspect module.\n",
-      "Below is the traceback from this internal error.\n",
-      "\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code\n",
-      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
-      "  File \"<ipython-input-3-301b462f29c8>\", line 1, in <module>\n",
-      "    from preprocess import *\n",
-      "  File \"C:\\Users\\heyjo\\Documents\\School\\Capstone\\intellichirp-snaw-NN\\NN\\ant-cnn\\preprocess.py\", line 4, in <module>\n",
-      "    from keras.utils import to_categorical\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\__init__.py\", line 3, in <module>\n",
-      "    from . import utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\__init__.py\", line 6, in <module>\n",
-      "    from . import conv_utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\conv_utils.py\", line 9, in <module>\n",
-      "    from .. import backend as K\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\__init__.py\", line 1, in <module>\n",
-      "    from .load_backend import epsilon\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\load_backend.py\", line 90, in <module>\n",
-      "    from .tensorflow_backend import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py\", line 5, in <module>\n",
-      "    import tensorflow as tf\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 101, in <module>\n",
-      "    from tensorflow_core import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 40, in <module>\n",
-      "    from tensorflow.python.tools import module_util as _module_util\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'ImportError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1148, in get_records\n",
-      "    # Try the default getinnerframes and Alex's: Alex's fixes some\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 316, in wrapped\n",
-      "    inspect.findsource = findsource\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 350, in _fixed_getinnerframes\n",
-      "    def _fixed_getinnerframes(etb, context=1, tb_offset=0):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 1503, in getinnerframes\n",
-      "    def trace(context=1):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 1461, in getframeinfo\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 708, in getsourcefile\n",
-      "    _filename = getsourcefile(object) or getfile(object)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 745, in getmodule\n",
-      "    # Check the main module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n",
-      "  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n",
-      "  File \"<frozen importlib._bootstrap>\", line 961, in _find_and_load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
-      "  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n",
-      "  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n",
-      "  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\n",
-      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 42, in <module>\n",
-      "    from . _api.v2 import audio\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\_api\\v2\\audio\\__init__.py\", line 10, in <module>\n",
-      "    from tensorflow.python.ops.gen_audio_ops import decode_wav\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\ops\\gen_audio_ops.py\", line 8, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code\n",
-      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
-      "  File \"<ipython-input-3-301b462f29c8>\", line 1, in <module>\n",
-      "    from preprocess import *\n",
-      "  File \"C:\\Users\\heyjo\\Documents\\School\\Capstone\\intellichirp-snaw-NN\\NN\\ant-cnn\\preprocess.py\", line 4, in <module>\n",
-      "    from keras.utils import to_categorical\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\__init__.py\", line 3, in <module>\n",
-      "    from . import utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\__init__.py\", line 6, in <module>\n",
-      "    from . import conv_utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\conv_utils.py\", line 9, in <module>\n",
-      "    from .. import backend as K\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\__init__.py\", line 1, in <module>\n",
-      "    from .load_backend import epsilon\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\load_backend.py\", line 90, in <module>\n",
-      "    from .tensorflow_backend import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py\", line 5, in <module>\n",
-      "    import tensorflow as tf\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 101, in <module>\n",
-      "    from tensorflow_core import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 40, in <module>\n",
-      "    from tensorflow.python.tools import module_util as _module_util\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'ImportError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code\n",
-      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
-      "  File \"<ipython-input-3-301b462f29c8>\", line 1, in <module>\n",
-      "    from preprocess import *\n",
-      "  File \"C:\\Users\\heyjo\\Documents\\School\\Capstone\\intellichirp-snaw-NN\\NN\\ant-cnn\\preprocess.py\", line 4, in <module>\n",
-      "    from keras.utils import to_categorical\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\__init__.py\", line 3, in <module>\n",
-      "    from . import utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\__init__.py\", line 6, in <module>\n",
-      "    from . import conv_utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\conv_utils.py\", line 9, in <module>\n",
-      "    from .. import backend as K\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\__init__.py\", line 1, in <module>\n",
-      "    from .load_backend import epsilon\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\load_backend.py\", line 90, in <module>\n",
-      "    from .tensorflow_backend import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py\", line 5, in <module>\n",
-      "    import tensorflow as tf\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 101, in <module>\n",
-      "    from tensorflow_core import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 40, in <module>\n",
-      "    from tensorflow.python.tools import module_util as _module_util\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'ImportError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes\n",
-      "    if (await self.run_code(code, result,  async_=asy)):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3348, in run_code\n",
-      "    self.showtraceback(running_compiled_code=True)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2046, in showtraceback\n",
-      "    stb = self.InteractiveTB.structured_traceback(etype,\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1414, in structured_traceback\n",
-      "    self.tb = tb[0]\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1314, in structured_traceback\n",
-      "    mode = self.mode\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1183, in structured_traceback\n",
-      "    formatted_exceptions = formatted_exception\n",
-      "TypeError: can only concatenate str (not \"list\") to str\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'TypeError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1148, in get_records\n",
-      "    # Try the default getinnerframes and Alex's: Alex's fixes some\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 316, in wrapped\n",
-      "    inspect.findsource = findsource\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 350, in _fixed_getinnerframes\n",
-      "    def _fixed_getinnerframes(etb, context=1, tb_offset=0):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 1503, in getinnerframes\n",
-      "    def trace(context=1):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 1461, in getframeinfo\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 708, in getsourcefile\n",
-      "    _filename = getsourcefile(object) or getfile(object)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\inspect.py\", line 745, in getmodule\n",
-      "    # Check the main module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n",
-      "  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n",
-      "  File \"<frozen importlib._bootstrap>\", line 961, in _find_and_load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
-      "  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\n",
-      "  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\n",
-      "  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\n",
-      "  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\n",
-      "  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 42, in <module>\n",
-      "    from . _api.v2 import audio\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\_api\\v2\\audio\\__init__.py\", line 10, in <module>\n",
-      "    from tensorflow.python.ops.gen_audio_ops import decode_wav\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\ops\\gen_audio_ops.py\", line 8, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3331, in run_code\n",
-      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
-      "  File \"<ipython-input-3-301b462f29c8>\", line 1, in <module>\n",
-      "    from preprocess import *\n",
-      "  File \"C:\\Users\\heyjo\\Documents\\School\\Capstone\\intellichirp-snaw-NN\\NN\\ant-cnn\\preprocess.py\", line 4, in <module>\n",
-      "    from keras.utils import to_categorical\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\__init__.py\", line 3, in <module>\n",
-      "    from . import utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\__init__.py\", line 6, in <module>\n",
-      "    from . import conv_utils\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\utils\\conv_utils.py\", line 9, in <module>\n",
-      "    from .. import backend as K\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\__init__.py\", line 1, in <module>\n",
-      "    from .load_backend import epsilon\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\load_backend.py\", line 90, in <module>\n",
-      "    from .tensorflow_backend import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py\", line 5, in <module>\n",
-      "    import tensorflow as tf\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 101, in <module>\n",
-      "    from tensorflow_core import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\__init__.py\", line 40, in <module>\n",
-      "    from tensorflow.python.tools import module_util as _module_util\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 50, in __getattr__\n",
-      "    module = self._load()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow\\__init__.py\", line 44, in _load\n",
-      "    module = _importlib.import_module(self.__name__)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\importlib\\__init__.py\", line 127, in import_module\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\__init__.py\", line 49, in <module>\n",
-      "    from tensorflow.python import pywrap_tensorflow\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 74, in <module>\n",
-      "    raise ImportError(msg)\n",
-      "ImportError: Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'ImportError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3254, in run_ast_nodes\n",
-      "    if (await self.run_code(code, result,  async_=asy)):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3348, in run_code\n",
-      "    self.showtraceback(running_compiled_code=True)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2046, in showtraceback\n",
-      "    stb = self.InteractiveTB.structured_traceback(etype,\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1414, in structured_traceback\n",
-      "    self.tb = tb[0]\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1314, in structured_traceback\n",
-      "    mode = self.mode\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\", line 1183, in structured_traceback\n",
-      "    formatted_exceptions = formatted_exception\n",
-      "TypeError: can only concatenate str (not \"list\") to str\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2044, in showtraceback\n",
-      "    stb = value._render_traceback_()\n",
-      "AttributeError: 'TypeError' object has no attribute '_render_traceback_'\n",
-      "\n",
-      "During handling of the above exception, another exception occurred:\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\", line 58, in <module>\n",
-      "    from tensorflow.python.pywrap_tensorflow_internal import *\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 28, in <module>\n",
-      "    _pywrap_tensorflow_internal = swig_import_helper()\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\", line 24, in swig_import_helper\n",
-      "    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 242, in load_module\n",
-      "    else:\n",
-      "  File \"C:\\Users\\heyjo\\.conda\\envs\\capstone\\lib\\imp.py\", line 342, in load_dynamic\n",
-      "    name=name, loader=loader, origin=path)\n",
-      "ImportError: Module use of python36.dll conflicts with this version of Python.\n",
-      "\n",
-      "\n",
-      "Failed to load the native TensorFlow runtime.\n",
-      "\n",
-      "See https://www.tensorflow.org/install/errors\n",
-      "\n",
-      "for some common reasons and solutions.  Include the entire stack trace\n",
-      "above this error message when asking for help.\n"
-     ]
-    },
-    {
-     "ename": "TypeError",
-     "evalue": "can only concatenate str (not \"list\") to str",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 58\u001b[1;33m   \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpywrap_tensorflow_internal\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     59\u001b[0m   \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpywrap_tensorflow_internal\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0m__version__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     27\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0m_mod\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 28\u001b[1;33m     \u001b[0m_pywrap_tensorflow_internal\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mswig_import_helper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     29\u001b[0m     \u001b[1;32mdel\u001b[0m \u001b[0mswig_import_helper\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\tensorflow_core\\python\\pywrap_tensorflow_internal.py\u001b[0m in \u001b[0;36mswig_import_helper\u001b[1;34m()\u001b[0m\n\u001b[0;32m     23\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 24\u001b[1;33m                 \u001b[0m_mod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mimp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mload_module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'_pywrap_tensorflow_internal'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpathname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdescription\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     25\u001b[0m             \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\imp.py\u001b[0m in \u001b[0;36mload_module\u001b[1;34m(name, file, filename, details)\u001b[0m\n\u001b[0;32m    241\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mload_dynamic\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mopened_file\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 242\u001b[1;33m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    243\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mload_dynamic\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfile\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\imp.py\u001b[0m in \u001b[0;36mload_dynamic\u001b[1;34m(name, path, file)\u001b[0m\n\u001b[0;32m    341\u001b[0m         spec = importlib.machinery.ModuleSpec(\n\u001b[1;32m--> 342\u001b[1;33m             name=name, loader=loader, origin=path)\n\u001b[0m\u001b[0;32m    343\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_load\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mImportError\u001b[0m: Module use of python36.dll conflicts with this version of Python.",
-      "\nDuring handling of the above exception, another exception occurred:\n",
-      "\nDuring handling of the above exception, another exception occurred:\n",
-      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[1;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[0;32m   2043\u001b[0m                         \u001b[1;31m# in the engines. This should return a list of strings.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2044\u001b[1;33m                         \u001b[0mstb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2045\u001b[0m                     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mAttributeError\u001b[0m: 'ImportError' object has no attribute '_render_traceback_'",
-      "\nDuring handling of the above exception, another exception occurred:\n",
-      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\u001b[0m in \u001b[0;36mrun_code\u001b[1;34m(self, code_obj, result, async_)\u001b[0m\n\u001b[0;32m   3346\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3347\u001b[0m                 \u001b[0mresult\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merror_in_exec\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msys\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexc_info\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3348\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshowtraceback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrunning_compiled_code\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3349\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3350\u001b[0m             \u001b[0moutflag\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[1;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[0;32m   2044\u001b[0m                         \u001b[0mstb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2045\u001b[0m                     \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2046\u001b[1;33m                         stb = self.InteractiveTB.structured_traceback(etype,\n\u001b[0m\u001b[0;32m   2047\u001b[0m                                             value, tb, tb_offset=tb_offset)\n\u001b[0;32m   2048\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[1;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[0;32m   1412\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtb\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1413\u001b[0m             \u001b[1;31m# tb is a tuple if this is a chained exception.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1414\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtb\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1415\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1416\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtb\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtb\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[1;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[0;32m   1312\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mstructured_traceback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0metype\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtb\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtb_offset\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnumber_of_lines_of_context\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1313\u001b[0m         \u001b[0mtb_offset\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtb_offset\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0mtb_offset\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0mtb_offset\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1314\u001b[1;33m         \u001b[0mmode\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1315\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mverbose_modes\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1316\u001b[0m             \u001b[1;31m# Verbose modes need a full traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;32m~\\.conda\\envs\\capstone\\lib\\site-packages\\IPython\\core\\ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[1;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[0;32m   1181\u001b[0m         \u001b[0mchained_exceptions_tb_offset\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1182\u001b[0m         \u001b[0mlines_of_context\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1183\u001b[1;33m         \u001b[0mformatted_exceptions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mformatted_exception\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1184\u001b[0m         \u001b[0mexception\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_parts_of_chained_exception\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mevalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1185\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mexception\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
-      "\u001b[1;31mTypeError\u001b[0m: can only concatenate str (not \"list\") to str"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from preprocess import *\n",
     "import keras\n",
     "from keras.models import Sequential\n",
-    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM\n",
+    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM, Activation\n",
     "from keras.utils import to_categorical\n",
     "import wandb\n",
     "from wandb.keras import WandbCallback\n",
-    "import matplotlib.pyplot as plt"
+    "import matplotlib.pyplot as plt\n",
+    "import sklearn.metrics as metrics"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {},
+   "execution_count": 44,
+   "metadata": {
+    "scrolled": true
+   },
    "outputs": [
     {
      "data": {
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/iqcktkix\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/iqcktkix</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/ftl7qqh6\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/ftl7qqh6</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -613,85 +44,114 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
-      "Saving vectors of label - 'bus': 100%|███████████████████████████████████████████████| 109/109 [00:04<00:00, 22.23it/s]\n",
-      "Saving vectors of label - 'car_horn': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 68.21it/s]\n",
-      "Saving vectors of label - 'chainsaw': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 43.29it/s]\n",
-      "Saving vectors of label - 'cow': 100%|█████████████████████████████████████████████████| 40/40 [00:00<00:00, 54.85it/s]\n",
-      "Saving vectors of label - 'engine': 100%|██████████████████████████████████████████████| 40/40 [00:00<00:00, 54.93it/s]\n",
-      "Saving vectors of label - 'footsteps': 100%|███████████████████████████████████████████| 40/40 [00:00<00:00, 65.51it/s]\n",
-      "Saving vectors of label - 'hand_saw': 100%|████████████████████████████████████████████| 40/40 [00:00<00:00, 53.98it/s]\n",
-      "Saving vectors of label - 'hen': 100%|█████████████████████████████████████████████████| 40/40 [00:00<00:00, 65.41it/s]\n",
-      "Saving vectors of label - 'rooster': 100%|█████████████████████████████████████████████| 40/40 [00:00<00:00, 68.64it/s]\n",
-      "Saving vectors of label - 'siren': 100%|███████████████████████████████████████████████| 40/40 [00:00<00:00, 55.64it/s]\n"
+      "Saving vectors of label - 'AAT': 100%|███████████████████████████████████████████████| 205/205 [00:03<00:00, 59.44it/s]\n",
+      "Saving vectors of label - 'AHV': 100%|█████████████████████████████████████████████████| 33/33 [00:00<00:00, 41.21it/s]\n",
+      "Saving vectors of label - 'AMA': 100%|█████████████████████████████████████████████████| 94/94 [00:02<00:00, 34.51it/s]\n",
+      "Saving vectors of label - 'ART': 100%|████████████████████████████████████████████████| 21/21 [00:00<00:00, 151.48it/s]\n",
+      "Saving vectors of label - 'ASI': 100%|████████████████████████████████████████████████| 17/17 [00:00<00:00, 146.96it/s]\n",
+      "Saving vectors of label - 'AVH': 100%|████████████████████████████████████████████████| 35/35 [00:00<00:00, 137.62it/s]\n",
+      "Saving vectors of label - 'AVT': 100%|██████████████████████████████████████████████| 965/965 [00:07<00:00, 129.08it/s]\n"
      ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "\"Saving vectors of label - 'AAT': 100%|█████████████████████████████████████████████████| 58/58 [00:01<00:00, 54.05it/s]\\nSaving vectors of label - 'AHV': 100%|█████████████████████████████████████████████████| 16/16 [00:00<00:00, 65.22it/s]\\nSaving vectors of label - 'AMA': 100%|█████████████████████████████████████████████████| 30/30 [00:00<00:00, 61.26it/s]\\nSaving vectors of label - 'ART': 100%|███████████████████████████████████████████████████| 5/5 [00:00<00:00, 53.90it/s]\\nSaving vectors of label - 'ASI': 100%|███████████████████████████████████████████████████| 4/4 [00:00<00:00, 35.81it/s]\\nSaving vectors of label - 'AVH': 100%|█████████████████████████████████████████████████| 18/18 [00:00<00:00, 96.00it/s]\\nSaving vectors of label - 'AVT': 100%|███████████████████████████████████████████████| 222/222 [00:04<00:00, 50.72it/s]\""
+      ]
+     },
+     "execution_count": 44,
+     "metadata": {},
+     "output_type": "execute_result"
     }
    ],
    "source": [
     "wandb.init()\n",
     "config = wandb.config\n",
     "\n",
-    "config.max_len = 11\n",
-    "config.buckets = 20\n",
+    "config.max_len = 32\n",
+    "config.buckets = 128\n",
     "\n",
     "# Save data to array file first\n",
     "save_data_to_array(max_len=config.max_len, n_mfcc=config.buckets)\n",
     "\n",
-    "labels=[\"bus\", \"car_horn\", \"chainsaw\", \"cow\", \"engine\", \"footsteps\", \"hand_saw\", \"hen\", \"rooster\", \"siren\"]"
+    "#labels=np.array([\"chirping_birds\", \"crickets\", \"crow\", \n",
+    "#                 \"frog\", \"insects\"])\n",
+    "labels=np.array([\"AAT\", \"AHV\", \"AMA\", \n",
+    "                 \"ART\", \"ASI\", \"AVH\",\n",
+    "                \"AVT\"])\n",
+    "\n",
+    "'''Saving vectors of label - 'AAT': 100%|███████████████████████████████████████████████| 205/205 [00:03<00:00, 59.44it/s]\n",
+    "Saving vectors of label - 'AHV': 100%|█████████████████████████████████████████████████| 33/33 [00:00<00:00, 41.21it/s]\n",
+    "Saving vectors of label - 'AMA': 100%|█████████████████████████████████████████████████| 94/94 [00:02<00:00, 34.51it/s]\n",
+    "Saving vectors of label - 'ART': 100%|████████████████████████████████████████████████| 21/21 [00:00<00:00, 151.48it/s]\n",
+    "Saving vectors of label - 'ASI': 100%|████████████████████████████████████████████████| 17/17 [00:00<00:00, 146.96it/s]\n",
+    "Saving vectors of label - 'AVH': 100%|████████████████████████████████████████████████| 35/35 [00:00<00:00, 137.62it/s]\n",
+    "Saving vectors of label - 'AVT': 100%|██████████████████████████████████████████████| 965/965 [00:07<00:00, 129.08it/s]'''"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 45,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Loading train/test set\n",
-    "X_train, X_test, y_train, y_test = get_train_test()"
+    "X_train, X_test, X_val, y_train, y_test, y_val = get_train_test()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 46,
    "metadata": {},
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+      "(657, 128, 32)\n"
      ]
     }
    ],
    "source": [
     "# Setting channels to 1 to generalize stereo sound to 1 channel\n",
     "channels = 1\n",
-    "config.epochs = 50\n",
+    "config.epochs = 17\n",
     "config.batch_size = 100\n",
     "\n",
     "# Number of classes\n",
-    "num_classes = 10\n",
-    "\n",
+    "num_classes = 7\n",
+    "print(X_train.shape)\n",
     "# Reshape X_train and X_test to include a 4th dimension (channels)\n",
     "X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len, channels)\n",
-    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)"
+    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)\n",
+    "X_val = X_val.reshape(X_val.shape[0], config.buckets, config.max_len, channels)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 47,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "3.0\n"
+      "(657, 128, 32, 1)\n"
      ]
     },
     {
      "data": {
-      "image/png": "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\n",
+      "text/plain": [
+       "<matplotlib.image.AxesImage at 0x25a47642788>"
+      ]
+     },
+     "execution_count": 47,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -704,34 +164,113 @@
    ],
    "source": [
     "# Spectrogram visualized of 0th element\n",
-    "plt.imshow(X_train[1, :, :, 0])\n",
-    "print(y_train[1])"
+    "print(X_train.shape)\n",
+    "plt.imshow(X_train[200, :, :, 0])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 48,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Getting vector number where each number corresponds to a label\n",
     "y_train_hot = to_categorical(y_train)\n",
-    "y_test_hot = to_categorical(y_test)"
+    "y_test_hot = to_categorical(y_test)\n",
+    "y_val_hot = to_categorical(y_val)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 49,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Model: \"sequential_4\"\n",
+      "_________________________________________________________________\n",
+      "Layer (type)                 Output Shape              Param #   \n",
+      "=================================================================\n",
+      "conv2d_10 (Conv2D)           (None, 126, 30, 21)       210       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_7 (MaxPooling2 (None, 63, 15, 21)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_16 (Activation)   (None, 63, 15, 21)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_11 (Conv2D)           (None, 61, 13, 48)        9120      \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_8 (MaxPooling2 (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "activation_17 (Activation)   (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_12 (Conv2D)           (None, 28, 6, 48)         6960      \n",
+      "_________________________________________________________________\n",
+      "activation_18 (Activation)   (None, 28, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "flatten_4 (Flatten)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dropout_7 (Dropout)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dense_7 (Dense)              (None, 64)                516160    \n",
+      "_________________________________________________________________\n",
+      "activation_19 (Activation)   (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_8 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_8 (Dense)              (None, 7)                 455       \n",
+      "_________________________________________________________________\n",
+      "activation_20 (Activation)   (None, 7)                 0         \n",
+      "=================================================================\n",
+      "Total params: 532,905\n",
+      "Trainable params: 532,905\n",
+      "Non-trainable params: 0\n",
+      "_________________________________________________________________\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "\"model.add(Conv2D(32, (3, 3),\\n    input_shape=(config.buckets, config.max_len, channels),\\n    activation='relu'))\\n\\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\\n\\nmodel.add(Flatten())\\n\\nmodel.add(Dense(128, activation='relu'))\\nmodel.add(Dense(num_classes, activation='softmax'))\""
+      ]
+     },
+     "execution_count": 49,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Building the model\n",
     "model = Sequential()\n",
     "\n",
+    "input_shape= (config.buckets, config.max_len, channels)\n",
+    "\n",
+    "model.add(Conv2D(21, (3, 3), strides=(1, 1), input_shape=input_shape))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 3), padding=\"valid\"))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 1), padding=\"valid\"))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Flatten())\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(64))\n",
+    "model.add(Activation('relu'))\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(len(labels)))\n",
+    "model.add(Activation('softmax'))\n",
+    "model.summary()\n",
     "# Conv2D: \n",
     "#    Filters: 32\n",
     "#    Kernel_size: (3,3) (height/width of the 2D convolution window)     \n",
-    "model.add(Conv2D(32, (3, 3),\n",
+    "'''model.add(Conv2D(32, (3, 3),\n",
     "    input_shape=(config.buckets, config.max_len, channels),\n",
     "    activation='relu'))\n",
     "\n",
@@ -740,12 +279,12 @@
     "model.add(Flatten())\n",
     "\n",
     "model.add(Dense(128, activation='relu'))\n",
-    "model.add(Dense(num_classes, activation='softmax'))"
+    "model.add(Dense(num_classes, activation='softmax'))'''"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 50,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -757,7 +296,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 51,
    "metadata": {
     "scrolled": false
    },
@@ -767,8 +306,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/7sybendi\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/7sybendi</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2rtny7n6\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2rtny7n6</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -779,142 +318,93 @@
      "output_type": "display_data"
     },
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+      "(657, 7)\n",
+      "(7,)\n",
+      "(657, 128, 32, 1)\n",
+      "Train on 657 samples, validate on 439 samples\n",
+      "Epoch 1/17\n",
+      "657/657 [==============================] - ETA: 19s - loss: 4.0558 - accuracy: 0.156 - ETA: 10s - loss: 3.1060 - accuracy: 0.406 - ETA: 7s - loss: 3.2798 - accuracy: 0.447 - ETA: 6s - loss: 3.0464 - accuracy: 0.45 - ETA: 5s - loss: 2.8030 - accuracy: 0.46 - ETA: 4s - loss: 2.6097 - accuracy: 0.45 - ETA: 3s - loss: 2.4701 - accuracy: 0.42 - ETA: 3s - loss: 2.3784 - accuracy: 0.42 - ETA: 3s - loss: 2.2925 - accuracy: 0.43 - ETA: 2s - loss: 2.2017 - accuracy: 0.44 - ETA: 2s - loss: 2.1122 - accuracy: 0.46 - ETA: 2s - loss: 2.0394 - accuracy: 0.47 - ETA: 1s - loss: 1.9996 - accuracy: 0.48 - ETA: 1s - loss: 1.9450 - accuracy: 0.49 - ETA: 1s - loss: 1.9012 - accuracy: 0.50 - ETA: 1s - loss: 1.8715 - accuracy: 0.50 - ETA: 0s - loss: 1.8469 - accuracy: 0.52 - ETA: 0s - loss: 1.8115 - accuracy: 0.52 - ETA: 0s - loss: 1.7669 - accuracy: 0.53 - ETA: 0s - loss: 1.7500 - accuracy: 0.54 - 6s 9ms/step - loss: 1.7466 - accuracy: 0.5403 - val_loss: 0.9263 - val_accuracy: 0.7403\n",
+      "Epoch 2/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 1.1509 - accuracy: 0.65 - ETA: 4s - loss: 1.2885 - accuracy: 0.65 - ETA: 3s - loss: 1.2698 - accuracy: 0.63 - ETA: 3s - loss: 1.2546 - accuracy: 0.62 - ETA: 3s - loss: 1.2028 - accuracy: 0.65 - ETA: 2s - loss: 1.2129 - accuracy: 0.64 - ETA: 2s - loss: 1.2027 - accuracy: 0.63 - ETA: 2s - loss: 1.1956 - accuracy: 0.62 - ETA: 2s - loss: 1.1730 - accuracy: 0.63 - ETA: 2s - loss: 1.1439 - accuracy: 0.64 - ETA: 1s - loss: 1.1532 - accuracy: 0.65 - ETA: 1s - loss: 1.1592 - accuracy: 0.65 - ETA: 1s - loss: 1.1075 - accuracy: 0.66 - ETA: 1s - loss: 1.1140 - accuracy: 0.66 - ETA: 1s - loss: 1.1062 - accuracy: 0.67 - ETA: 1s - loss: 1.0849 - accuracy: 0.67 - ETA: 0s - loss: 1.0751 - accuracy: 0.68 - ETA: 0s - loss: 1.0769 - accuracy: 0.67 - ETA: 0s - loss: 1.0793 - accuracy: 0.68 - ETA: 0s - loss: 1.0833 - accuracy: 0.67 - 7s 11ms/step - loss: 1.0879 - accuracy: 0.6773 - val_loss: 0.7706 - val_accuracy: 0.7950\n",
+      "Epoch 3/17\n",
+      "657/657 [==============================] - ETA: 3s - loss: 0.9944 - accuracy: 0.78 - ETA: 4s - loss: 1.0090 - accuracy: 0.71 - ETA: 3s - loss: 1.0620 - accuracy: 0.69 - ETA: 3s - loss: 0.9736 - accuracy: 0.72 - ETA: 3s - loss: 0.9877 - accuracy: 0.72 - ETA: 3s - loss: 1.0172 - accuracy: 0.71 - ETA: 3s - loss: 0.9724 - accuracy: 0.72 - ETA: 3s - loss: 0.9700 - accuracy: 0.73 - ETA: 2s - loss: 0.9516 - accuracy: 0.74 - ETA: 2s - loss: 0.9033 - accuracy: 0.75 - ETA: 2s - loss: 0.9295 - accuracy: 0.75 - ETA: 2s - loss: 0.9624 - accuracy: 0.75 - ETA: 1s - loss: 1.0083 - accuracy: 0.73 - ETA: 1s - loss: 0.9966 - accuracy: 0.73 - ETA: 1s - loss: 0.9908 - accuracy: 0.73 - ETA: 1s - loss: 0.9704 - accuracy: 0.74 - ETA: 0s - loss: 0.9569 - accuracy: 0.74 - ETA: 0s - loss: 0.9406 - accuracy: 0.74 - ETA: 0s - loss: 0.9327 - accuracy: 0.74 - ETA: 0s - loss: 0.9367 - accuracy: 0.74 - 7s 11ms/step - loss: 0.9294 - accuracy: 0.7397 - val_loss: 0.6112 - val_accuracy: 0.8132\n",
+      "Epoch 4/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 0.9354 - accuracy: 0.75 - ETA: 5s - loss: 0.7274 - accuracy: 0.81 - ETA: 6s - loss: 0.7188 - accuracy: 0.80 - ETA: 6s - loss: 0.7575 - accuracy: 0.78 - ETA: 6s - loss: 0.7361 - accuracy: 0.78 - ETA: 5s - loss: 0.7440 - accuracy: 0.78 - ETA: 4s - loss: 0.7807 - accuracy: 0.76 - ETA: 4s - loss: 0.7925 - accuracy: 0.76 - ETA: 3s - loss: 0.7831 - accuracy: 0.76 - ETA: 3s - loss: 0.7635 - accuracy: 0.76 - ETA: 3s - loss: 0.7662 - accuracy: 0.76 - ETA: 3s - loss: 0.8079 - accuracy: 0.75 - ETA: 2s - loss: 0.8197 - accuracy: 0.75 - ETA: 2s - loss: 0.8151 - accuracy: 0.75 - ETA: 2s - loss: 0.8265 - accuracy: 0.74 - ETA: 1s - loss: 0.8232 - accuracy: 0.74 - ETA: 1s - loss: 0.8224 - accuracy: 0.74 - ETA: 0s - loss: 0.8200 - accuracy: 0.75 - ETA: 0s - loss: 0.8059 - accuracy: 0.75 - ETA: 0s - loss: 0.7877 - accuracy: 0.76 - 9s 14ms/step - loss: 0.7801 - accuracy: 0.7626 - val_loss: 0.5614 - val_accuracy: 0.8292\n",
+      "Epoch 5/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 0.8717 - accuracy: 0.78 - ETA: 3s - loss: 0.7388 - accuracy: 0.79 - ETA: 3s - loss: 0.7251 - accuracy: 0.79 - ETA: 3s - loss: 0.9180 - accuracy: 0.72 - ETA: 3s - loss: 0.8470 - accuracy: 0.74 - ETA: 3s - loss: 0.8564 - accuracy: 0.73 - ETA: 2s - loss: 0.7896 - accuracy: 0.76 - ETA: 2s - loss: 0.7865 - accuracy: 0.76 - ETA: 2s - loss: 0.7887 - accuracy: 0.74 - ETA: 2s - loss: 0.7887 - accuracy: 0.75 - ETA: 2s - loss: 0.8024 - accuracy: 0.74 - ETA: 2s - loss: 0.7989 - accuracy: 0.74 - ETA: 1s - loss: 0.7856 - accuracy: 0.75 - ETA: 1s - loss: 0.7943 - accuracy: 0.75 - ETA: 1s - loss: 0.7788 - accuracy: 0.76 - ETA: 1s - loss: 0.7626 - accuracy: 0.76 - ETA: 0s - loss: 0.7563 - accuracy: 0.77 - ETA: 0s - loss: 0.7758 - accuracy: 0.76 - ETA: 0s - loss: 0.7528 - accuracy: 0.77 - ETA: 0s - loss: 0.7622 - accuracy: 0.76 - 7s 11ms/step - loss: 0.7514 - accuracy: 0.7702 - val_loss: 0.4817 - val_accuracy: 0.8497\n",
+      "Epoch 6/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 0.8847 - accuracy: 0.78 - ETA: 4s - loss: 0.7266 - accuracy: 0.78 - ETA: 4s - loss: 0.7128 - accuracy: 0.80 - ETA: 4s - loss: 0.7204 - accuracy: 0.77 - ETA: 4s - loss: 0.7218 - accuracy: 0.77 - ETA: 4s - loss: 0.7009 - accuracy: 0.78 - ETA: 3s - loss: 0.6731 - accuracy: 0.79 - ETA: 3s - loss: 0.6392 - accuracy: 0.81 - ETA: 3s - loss: 0.6047 - accuracy: 0.82 - ETA: 2s - loss: 0.5835 - accuracy: 0.82 - ETA: 2s - loss: 0.5918 - accuracy: 0.81 - ETA: 2s - loss: 0.5608 - accuracy: 0.82 - ETA: 2s - loss: 0.6113 - accuracy: 0.81 - ETA: 1s - loss: 0.6224 - accuracy: 0.81 - ETA: 1s - loss: 0.6306 - accuracy: 0.80 - ETA: 1s - loss: 0.6313 - accuracy: 0.79 - ETA: 1s - loss: 0.6271 - accuracy: 0.79 - ETA: 0s - loss: 0.6260 - accuracy: 0.79 - ETA: 0s - loss: 0.6283 - accuracy: 0.79 - ETA: 0s - loss: 0.6135 - accuracy: 0.80 - 10s 15ms/step - loss: 0.6093 - accuracy: 0.8006 - val_loss: 0.4722 - val_accuracy: 0.8542\n",
+      "Epoch 7/17\n",
+      "657/657 [==============================] - ETA: 23s - loss: 0.7458 - accuracy: 0.750 - ETA: 17s - loss: 0.6467 - accuracy: 0.812 - ETA: 15s - loss: 0.5985 - accuracy: 0.812 - ETA: 13s - loss: 0.6466 - accuracy: 0.796 - ETA: 12s - loss: 0.6417 - accuracy: 0.793 - ETA: 13s - loss: 0.6491 - accuracy: 0.786 - ETA: 11s - loss: 0.6074 - accuracy: 0.803 - ETA: 10s - loss: 0.5828 - accuracy: 0.812 - ETA: 10s - loss: 0.5942 - accuracy: 0.809 - ETA: 9s - loss: 0.5959 - accuracy: 0.806 - ETA: 7s - loss: 0.5921 - accuracy: 0.80 - ETA: 6s - loss: 0.5746 - accuracy: 0.81 - ETA: 5s - loss: 0.5906 - accuracy: 0.79 - ETA: 4s - loss: 0.5923 - accuracy: 0.80 - ETA: 3s - loss: 0.5961 - accuracy: 0.79 - ETA: 3s - loss: 0.5974 - accuracy: 0.79 - ETA: 2s - loss: 0.6017 - accuracy: 0.79 - ETA: 1s - loss: 0.5861 - accuracy: 0.79 - ETA: 0s - loss: 0.5895 - accuracy: 0.79 - ETA: 0s - loss: 0.5829 - accuracy: 0.80 - 15s 24ms/step - loss: 0.5745 - accuracy: 0.8052 - val_loss: 0.4689 - val_accuracy: 0.8428\n",
+      "Epoch 8/17\n",
+      "657/657 [==============================] - ETA: 5s - loss: 0.3866 - accuracy: 0.90 - ETA: 5s - loss: 0.4083 - accuracy: 0.89 - ETA: 5s - loss: 0.4690 - accuracy: 0.85 - ETA: 4s - loss: 0.4655 - accuracy: 0.85 - ETA: 4s - loss: 0.4468 - accuracy: 0.86 - ETA: 3s - loss: 0.4656 - accuracy: 0.85 - ETA: 3s - loss: 0.4574 - accuracy: 0.85 - ETA: 3s - loss: 0.4881 - accuracy: 0.82 - ETA: 3s - loss: 0.4773 - accuracy: 0.84 - ETA: 2s - loss: 0.4800 - accuracy: 0.83 - ETA: 2s - loss: 0.4944 - accuracy: 0.82 - ETA: 2s - loss: 0.5078 - accuracy: 0.82 - ETA: 2s - loss: 0.5019 - accuracy: 0.82 - ETA: 1s - loss: 0.4889 - accuracy: 0.83 - ETA: 1s - loss: 0.4874 - accuracy: 0.83 - ETA: 1s - loss: 0.4903 - accuracy: 0.83 - ETA: 0s - loss: 0.5046 - accuracy: 0.83 - ETA: 0s - loss: 0.5251 - accuracy: 0.82 - ETA: 0s - loss: 0.5299 - accuracy: 0.81 - ETA: 0s - loss: 0.5244 - accuracy: 0.82 - 7s 11ms/step - loss: 0.5228 - accuracy: 0.8189 - val_loss: 0.4748 - val_accuracy: 0.8428\n",
+      "Epoch 9/17\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Train on 281 samples, validate on 188 samples\n",
-      "Epoch 1/50\n",
-      "281/281 [==============================] - ETA: 2s - loss: 23.0465 - accuracy: 0.093 - ETA: 0s - loss: 16.3184 - accuracy: 0.085 - 0s 2ms/step - loss: 12.3469 - accuracy: 0.1530 - val_loss: 6.6698 - val_accuracy: 0.2766\n",
-      "Epoch 2/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 5.0918 - accuracy: 0.31 - ETA: 0s - loss: 4.7224 - accuracy: 0.26 - 0s 333us/step - loss: 4.5251 - accuracy: 0.2776 - val_loss: 3.5798 - val_accuracy: 0.3138\n",
-      "Epoch 3/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 2.9302 - accuracy: 0.37 - ETA: 0s - loss: 2.8241 - accuracy: 0.31 - 0s 325us/step - loss: 2.7315 - accuracy: 0.3203 - val_loss: 2.8565 - val_accuracy: 0.3032\n",
-      "Epoch 4/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.7559 - accuracy: 0.46 - ETA: 0s - loss: 1.7744 - accuracy: 0.48 - 0s 297us/step - loss: 1.7635 - accuracy: 0.4911 - val_loss: 2.7842 - val_accuracy: 0.3777\n",
-      "Epoch 5/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.9932 - accuracy: 0.59 - ETA: 0s - loss: 1.4765 - accuracy: 0.55 - 0s 500us/step - loss: 1.3992 - accuracy: 0.5658 - val_loss: 2.4757 - val_accuracy: 0.3511\n",
-      "Epoch 6/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.0645 - accuracy: 0.65 - ETA: 0s - loss: 1.3214 - accuracy: 0.63 - 0s 539us/step - loss: 1.2217 - accuracy: 0.6548 - val_loss: 2.8309 - val_accuracy: 0.3617\n",
-      "Epoch 7/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.7947 - accuracy: 0.78 - ETA: 0s - loss: 1.0072 - accuracy: 0.69 - 0s 374us/step - loss: 1.0246 - accuracy: 0.7011 - val_loss: 2.5759 - val_accuracy: 0.4202\n",
-      "Epoch 8/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.8965 - accuracy: 0.75 - ETA: 0s - loss: 1.0584 - accuracy: 0.65 - 0s 335us/step - loss: 0.9949 - accuracy: 0.6797 - val_loss: 2.7374 - val_accuracy: 0.4096\n",
-      "Epoch 9/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.7779 - accuracy: 0.78 - 0s 288us/step - loss: 0.8002 - accuracy: 0.7722 - val_loss: 2.5783 - val_accuracy: 0.4096\n",
-      "Epoch 10/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5472 - accuracy: 0.81 - ETA: 0s - loss: 0.7422 - accuracy: 0.78 - ETA: 0s - loss: 0.7563 - accuracy: 0.77 - 0s 730us/step - loss: 0.7588 - accuracy: 0.7722 - val_loss: 2.8751 - val_accuracy: 0.3883\n",
-      "Epoch 11/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 1.2013 - accuracy: 0.75 - ETA: 0s - loss: 0.6930 - accuracy: 0.81 - 0s 501us/step - loss: 0.6858 - accuracy: 0.8185 - val_loss: 2.6259 - val_accuracy: 0.3564\n",
-      "Epoch 12/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3786 - accuracy: 0.93 - ETA: 0s - loss: 0.5313 - accuracy: 0.84 - 0s 320us/step - loss: 0.5298 - accuracy: 0.8470 - val_loss: 2.7889 - val_accuracy: 0.3511\n",
-      "Epoch 13/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5906 - accuracy: 0.84 - ETA: 0s - loss: 0.5497 - accuracy: 0.84 - 0s 340us/step - loss: 0.5385 - accuracy: 0.8505 - val_loss: 2.6226 - val_accuracy: 0.3989\n",
-      "Epoch 14/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.4711 - accuracy: 0.90 - ETA: 0s - loss: 0.5003 - accuracy: 0.87 - 0s 353us/step - loss: 0.4798 - accuracy: 0.8826 - val_loss: 2.9803 - val_accuracy: 0.3138\n",
-      "Epoch 15/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.5302 - accuracy: 0.84 - 0s 276us/step - loss: 0.4402 - accuracy: 0.9004 - val_loss: 2.6732 - val_accuracy: 0.4043\n",
-      "Epoch 16/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2521 - accuracy: 0.93 - ETA: 0s - loss: 0.3664 - accuracy: 0.89 - 0s 327us/step - loss: 0.3706 - accuracy: 0.8897 - val_loss: 2.9172 - val_accuracy: 0.3457\n",
-      "Epoch 17/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3003 - accuracy: 0.87 - 0s 261us/step - loss: 0.3737 - accuracy: 0.9004 - val_loss: 2.7488 - val_accuracy: 0.4043\n",
-      "Epoch 18/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2518 - accuracy: 0.90 - ETA: 0s - loss: 0.3444 - accuracy: 0.91 - 0s 328us/step - loss: 0.3300 - accuracy: 0.9217 - val_loss: 2.8965 - val_accuracy: 0.4255\n",
-      "Epoch 19/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2022 - accuracy: 0.93 - ETA: 0s - loss: 0.3102 - accuracy: 0.91 - 0s 381us/step - loss: 0.3142 - accuracy: 0.9146 - val_loss: 3.0782 - val_accuracy: 0.3830\n",
-      "Epoch 20/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.4091 - accuracy: 0.87 - ETA: 0s - loss: 0.2662 - accuracy: 0.94 - 0s 349us/step - loss: 0.2553 - accuracy: 0.9466 - val_loss: 2.9722 - val_accuracy: 0.3989\n",
-      "Epoch 21/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.3199 - accuracy: 0.84 - ETA: 0s - loss: 0.2778 - accuracy: 0.92 - 0s 328us/step - loss: 0.2780 - accuracy: 0.9288 - val_loss: 3.1543 - val_accuracy: 0.3777\n",
-      "Epoch 22/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2065 - accuracy: 0.93 - ETA: 0s - loss: 0.2018 - accuracy: 0.95 - 0s 312us/step - loss: 0.2135 - accuracy: 0.9573 - val_loss: 3.0016 - val_accuracy: 0.3723\n",
-      "Epoch 23/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1530 - accuracy: 1.00 - ETA: 0s - loss: 0.1672 - accuracy: 0.96 - 0s 391us/step - loss: 0.1630 - accuracy: 0.9680 - val_loss: 2.9483 - val_accuracy: 0.4149\n",
-      "Epoch 24/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0950 - accuracy: 1.00 - ETA: 0s - loss: 0.1391 - accuracy: 0.97 - ETA: 0s - loss: 0.1322 - accuracy: 0.98 - 0s 742us/step - loss: 0.1495 - accuracy: 0.9786 - val_loss: 3.1443 - val_accuracy: 0.3723\n",
-      "Epoch 25/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2155 - accuracy: 0.96 - ETA: 0s - loss: 0.1644 - accuracy: 0.96 - 0s 345us/step - loss: 0.1596 - accuracy: 0.9680 - val_loss: 3.1408 - val_accuracy: 0.3777\n",
-      "Epoch 26/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2744 - accuracy: 0.96 - 0s 279us/step - loss: 0.1713 - accuracy: 0.9644 - val_loss: 3.3056 - val_accuracy: 0.3883\n",
-      "Epoch 27/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0661 - accuracy: 1.00 - ETA: 0s - loss: 0.1034 - accuracy: 0.98 - 0s 358us/step - loss: 0.1384 - accuracy: 0.9786 - val_loss: 3.1630 - val_accuracy: 0.3564\n",
-      "Epoch 28/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0931 - accuracy: 1.00 - 0s 334us/step - loss: 0.1158 - accuracy: 0.9786 - val_loss: 3.2077 - val_accuracy: 0.3936\n",
-      "Epoch 29/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0765 - accuracy: 1.00 - ETA: 0s - loss: 0.1380 - accuracy: 0.97 - ETA: 0s - loss: 0.1156 - accuracy: 0.98 - 0s 595us/step - loss: 0.1128 - accuracy: 0.9822 - val_loss: 3.3168 - val_accuracy: 0.3989\n",
-      "Epoch 30/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0909 - accuracy: 1.00 - ETA: 0s - loss: 0.0954 - accuracy: 0.98 - 0s 515us/step - loss: 0.0994 - accuracy: 0.9893 - val_loss: 3.3483 - val_accuracy: 0.3723\n",
-      "Epoch 31/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0612 - accuracy: 1.00 - 0s 258us/step - loss: 0.0910 - accuracy: 0.9786 - val_loss: 3.3935 - val_accuracy: 0.3723\n",
-      "Epoch 32/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0532 - accuracy: 1.00 - ETA: 0s - loss: 0.1474 - accuracy: 0.98 - 0s 411us/step - loss: 0.1534 - accuracy: 0.9822 - val_loss: 3.4210 - val_accuracy: 0.3723\n",
-      "Epoch 33/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2349 - accuracy: 0.93 - ETA: 0s - loss: 0.1145 - accuracy: 0.98 - 0s 453us/step - loss: 0.1363 - accuracy: 0.9822 - val_loss: 3.5561 - val_accuracy: 0.4096\n",
-      "Epoch 34/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1375 - accuracy: 0.96 - ETA: 0s - loss: 0.1624 - accuracy: 0.95 - 0s 365us/step - loss: 0.1564 - accuracy: 0.9537 - val_loss: 3.7636 - val_accuracy: 0.3883\n",
-      "Epoch 35/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1473 - accuracy: 0.96 - ETA: 0s - loss: 0.1620 - accuracy: 0.94 - 0s 436us/step - loss: 0.1161 - accuracy: 0.9680 - val_loss: 3.4313 - val_accuracy: 0.3617\n",
-      "Epoch 36/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.1176 - accuracy: 0.96 - ETA: 0s - loss: 0.1088 - accuracy: 0.98 - 0s 341us/step - loss: 0.1037 - accuracy: 0.9822 - val_loss: 3.5027 - val_accuracy: 0.3404\n",
-      "Epoch 37/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0528 - accuracy: 1.00 - 0s 276us/step - loss: 0.0928 - accuracy: 0.9786 - val_loss: 3.4027 - val_accuracy: 0.3830\n",
-      "Epoch 38/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0446 - accuracy: 1.00 - ETA: 0s - loss: 0.1070 - accuracy: 0.98 - 0s 527us/step - loss: 0.1131 - accuracy: 0.9858 - val_loss: 3.4673 - val_accuracy: 0.4043\n",
-      "Epoch 39/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0330 - accuracy: 1.00 - ETA: 0s - loss: 0.0613 - accuracy: 0.99 - 0s 518us/step - loss: 0.0732 - accuracy: 0.9929 - val_loss: 3.5865 - val_accuracy: 0.3830\n",
-      "Epoch 40/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0310 - accuracy: 1.00 - 0s 257us/step - loss: 0.0709 - accuracy: 0.9858 - val_loss: 3.4783 - val_accuracy: 0.3723\n",
-      "Epoch 41/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.2000 - accuracy: 0.96 - 0s 248us/step - loss: 0.0775 - accuracy: 0.9858 - val_loss: 3.5490 - val_accuracy: 0.3777\n",
-      "Epoch 42/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0373 - accuracy: 1.00 - ETA: 0s - loss: 0.0730 - accuracy: 0.98 - 0s 363us/step - loss: 0.0740 - accuracy: 0.9858 - val_loss: 3.8505 - val_accuracy: 0.3723\n",
-      "Epoch 43/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0341 - accuracy: 1.00 - ETA: 0s - loss: 0.0645 - accuracy: 0.98 - 0s 449us/step - loss: 0.0596 - accuracy: 0.9893 - val_loss: 3.6512 - val_accuracy: 0.3777\n",
-      "Epoch 44/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0223 - accuracy: 1.00 - 0s 252us/step - loss: 0.0542 - accuracy: 0.9929 - val_loss: 3.6441 - val_accuracy: 0.3670\n",
-      "Epoch 45/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0308 - accuracy: 1.00 - 0s 275us/step - loss: 0.0468 - accuracy: 0.9893 - val_loss: 3.6158 - val_accuracy: 0.3723\n",
-      "Epoch 46/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0172 - accuracy: 1.00 - ETA: 0s - loss: 0.0425 - accuracy: 0.99 - 0s 486us/step - loss: 0.0504 - accuracy: 0.9929 - val_loss: 3.6831 - val_accuracy: 0.3777\n",
-      "Epoch 47/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0248 - accuracy: 1.00 - ETA: 0s - loss: 0.1069 - accuracy: 0.99 - 0s 357us/step - loss: 0.0945 - accuracy: 0.9929 - val_loss: 3.7183 - val_accuracy: 0.3830\n",
-      "Epoch 48/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0305 - accuracy: 1.00 - 0s 257us/step - loss: 0.0545 - accuracy: 0.9858 - val_loss: 3.7581 - val_accuracy: 0.3989\n",
-      "Epoch 49/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0211 - accuracy: 1.00 - ETA: 0s - loss: 0.0681 - accuracy: 0.98 - 0s 358us/step - loss: 0.0656 - accuracy: 0.9822 - val_loss: 3.9350 - val_accuracy: 0.3723\n",
-      "Epoch 50/50\n",
-      "281/281 [==============================] - ETA: 0s - loss: 0.0954 - accuracy: 0.96 - ETA: 0s - loss: 0.0738 - accuracy: 0.98 - 0s 555us/step - loss: 0.0570 - accuracy: 0.9893 - val_loss: 3.7512 - val_accuracy: 0.3670\n"
+      "657/657 [==============================] - ETA: 6s - loss: 0.5219 - accuracy: 0.81 - ETA: 6s - loss: 0.4303 - accuracy: 0.85 - ETA: 6s - loss: 0.3996 - accuracy: 0.89 - ETA: 5s - loss: 0.3617 - accuracy: 0.90 - ETA: 4s - loss: 0.3568 - accuracy: 0.90 - ETA: 4s - loss: 0.3520 - accuracy: 0.90 - ETA: 4s - loss: 0.4301 - accuracy: 0.88 - ETA: 3s - loss: 0.4188 - accuracy: 0.88 - ETA: 3s - loss: 0.4456 - accuracy: 0.87 - ETA: 3s - loss: 0.4406 - accuracy: 0.87 - ETA: 2s - loss: 0.4408 - accuracy: 0.87 - ETA: 2s - loss: 0.4326 - accuracy: 0.87 - ETA: 2s - loss: 0.4298 - accuracy: 0.87 - ETA: 1s - loss: 0.4257 - accuracy: 0.87 - ETA: 1s - loss: 0.4437 - accuracy: 0.86 - ETA: 1s - loss: 0.4434 - accuracy: 0.86 - ETA: 1s - loss: 0.4371 - accuracy: 0.86 - ETA: 0s - loss: 0.4309 - accuracy: 0.86 - ETA: 0s - loss: 0.4250 - accuracy: 0.86 - ETA: 0s - loss: 0.4262 - accuracy: 0.86 - 8s 12ms/step - loss: 0.4280 - accuracy: 0.8661 - val_loss: 0.4008 - val_accuracy: 0.8770\n",
+      "Epoch 10/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 0.3568 - accuracy: 0.84 - ETA: 4s - loss: 0.3297 - accuracy: 0.87 - ETA: 4s - loss: 0.4147 - accuracy: 0.84 - ETA: 3s - loss: 0.4121 - accuracy: 0.85 - ETA: 3s - loss: 0.4045 - accuracy: 0.85 - ETA: 3s - loss: 0.3893 - accuracy: 0.85 - ETA: 3s - loss: 0.3803 - accuracy: 0.86 - ETA: 2s - loss: 0.3816 - accuracy: 0.87 - ETA: 2s - loss: 0.3897 - accuracy: 0.87 - ETA: 2s - loss: 0.3703 - accuracy: 0.88 - ETA: 2s - loss: 0.3698 - accuracy: 0.87 - ETA: 2s - loss: 0.3768 - accuracy: 0.87 - ETA: 1s - loss: 0.3647 - accuracy: 0.87 - ETA: 1s - loss: 0.3550 - accuracy: 0.87 - ETA: 1s - loss: 0.3459 - accuracy: 0.87 - ETA: 1s - loss: 0.3603 - accuracy: 0.86 - ETA: 1s - loss: 0.3468 - accuracy: 0.86 - ETA: 0s - loss: 0.3434 - accuracy: 0.87 - ETA: 0s - loss: 0.3438 - accuracy: 0.87 - ETA: 0s - loss: 0.3606 - accuracy: 0.86 - 7s 11ms/step - loss: 0.3630 - accuracy: 0.8676 - val_loss: 0.4258 - val_accuracy: 0.8337\n",
+      "Epoch 11/17\n",
+      "657/657 [==============================] - ETA: 4s - loss: 0.2802 - accuracy: 0.90 - ETA: 4s - loss: 0.3108 - accuracy: 0.90 - ETA: 4s - loss: 0.2954 - accuracy: 0.89 - ETA: 4s - loss: 0.2840 - accuracy: 0.90 - ETA: 4s - loss: 0.2974 - accuracy: 0.90 - ETA: 3s - loss: 0.3111 - accuracy: 0.91 - ETA: 3s - loss: 0.3021 - accuracy: 0.91 - ETA: 3s - loss: 0.3102 - accuracy: 0.90 - ETA: 3s - loss: 0.3206 - accuracy: 0.90 - ETA: 3s - loss: 0.3199 - accuracy: 0.90 - ETA: 2s - loss: 0.3094 - accuracy: 0.90 - ETA: 2s - loss: 0.2993 - accuracy: 0.90 - ETA: 2s - loss: 0.3106 - accuracy: 0.90 - ETA: 2s - loss: 0.3135 - accuracy: 0.90 - ETA: 1s - loss: 0.3147 - accuracy: 0.89 - ETA: 1s - loss: 0.3170 - accuracy: 0.89 - ETA: 1s - loss: 0.3265 - accuracy: 0.89 - ETA: 0s - loss: 0.3202 - accuracy: 0.90 - ETA: 0s - loss: 0.3331 - accuracy: 0.89 - ETA: 0s - loss: 0.3293 - accuracy: 0.89 - 10s 15ms/step - loss: 0.3241 - accuracy: 0.9011 - val_loss: 0.5041 - val_accuracy: 0.8497\n",
+      "Epoch 12/17\n",
+      "657/657 [==============================] - ETA: 9s - loss: 0.2008 - accuracy: 0.87 - ETA: 8s - loss: 0.2736 - accuracy: 0.87 - ETA: 8s - loss: 0.2541 - accuracy: 0.89 - ETA: 8s - loss: 0.2461 - accuracy: 0.91 - ETA: 9s - loss: 0.2538 - accuracy: 0.91 - ETA: 7s - loss: 0.2943 - accuracy: 0.89 - ETA: 7s - loss: 0.2845 - accuracy: 0.89 - ETA: 6s - loss: 0.2893 - accuracy: 0.89 - ETA: 5s - loss: 0.2782 - accuracy: 0.90 - ETA: 5s - loss: 0.2935 - accuracy: 0.89 - ETA: 4s - loss: 0.2955 - accuracy: 0.88 - ETA: 3s - loss: 0.3051 - accuracy: 0.88 - ETA: 3s - loss: 0.2980 - accuracy: 0.88 - ETA: 2s - loss: 0.2976 - accuracy: 0.88 - ETA: 2s - loss: 0.2916 - accuracy: 0.88 - ETA: 1s - loss: 0.2814 - accuracy: 0.89 - ETA: 1s - loss: 0.2813 - accuracy: 0.89 - ETA: 1s - loss: 0.2827 - accuracy: 0.89 - ETA: 0s - loss: 0.2834 - accuracy: 0.89 - ETA: 0s - loss: 0.2817 - accuracy: 0.88 - 11s 17ms/step - loss: 0.2912 - accuracy: 0.8843 - val_loss: 0.4004 - val_accuracy: 0.8656\n",
+      "Epoch 13/17\n",
+      "657/657 [==============================] - ETA: 5s - loss: 0.2760 - accuracy: 0.87 - ETA: 6s - loss: 0.2380 - accuracy: 0.90 - ETA: 6s - loss: 0.2356 - accuracy: 0.89 - ETA: 5s - loss: 0.3320 - accuracy: 0.85 - ETA: 5s - loss: 0.3177 - accuracy: 0.87 - ETA: 5s - loss: 0.2959 - accuracy: 0.89 - ETA: 4s - loss: 0.2884 - accuracy: 0.89 - ETA: 4s - loss: 0.3046 - accuracy: 0.88 - ETA: 3s - loss: 0.3167 - accuracy: 0.87 - ETA: 3s - loss: 0.3161 - accuracy: 0.87 - ETA: 3s - loss: 0.3066 - accuracy: 0.88 - ETA: 2s - loss: 0.3012 - accuracy: 0.88 - ETA: 2s - loss: 0.2997 - accuracy: 0.88 - ETA: 2s - loss: 0.2919 - accuracy: 0.89 - ETA: 1s - loss: 0.3087 - accuracy: 0.88 - ETA: 1s - loss: 0.3053 - accuracy: 0.89 - ETA: 1s - loss: 0.3004 - accuracy: 0.88 - ETA: 0s - loss: 0.2916 - accuracy: 0.89 - ETA: 0s - loss: 0.2913 - accuracy: 0.89 - ETA: 0s - loss: 0.2936 - accuracy: 0.89 - 10s 15ms/step - loss: 0.2900 - accuracy: 0.8904 - val_loss: 0.4083 - val_accuracy: 0.8565\n",
+      "Epoch 14/17\n",
+      "657/657 [==============================] - ETA: 7s - loss: 0.1383 - accuracy: 0.93 - ETA: 6s - loss: 0.2606 - accuracy: 0.87 - ETA: 5s - loss: 0.2588 - accuracy: 0.88 - ETA: 5s - loss: 0.2843 - accuracy: 0.88 - ETA: 5s - loss: 0.2554 - accuracy: 0.89 - ETA: 5s - loss: 0.2605 - accuracy: 0.89 - ETA: 4s - loss: 0.2588 - accuracy: 0.89 - ETA: 4s - loss: 0.2557 - accuracy: 0.90 - ETA: 3s - loss: 0.2425 - accuracy: 0.90 - ETA: 3s - loss: 0.2405 - accuracy: 0.90 - ETA: 3s - loss: 0.2328 - accuracy: 0.90 - ETA: 2s - loss: 0.2315 - accuracy: 0.90 - ETA: 2s - loss: 0.2324 - accuracy: 0.91 - ETA: 2s - loss: 0.2315 - accuracy: 0.91 - ETA: 1s - loss: 0.2360 - accuracy: 0.90 - ETA: 1s - loss: 0.2354 - accuracy: 0.90 - ETA: 1s - loss: 0.2463 - accuracy: 0.90 - ETA: 0s - loss: 0.2382 - accuracy: 0.90 - ETA: 0s - loss: 0.2383 - accuracy: 0.90 - ETA: 0s - loss: 0.2411 - accuracy: 0.90 - 11s 16ms/step - loss: 0.2403 - accuracy: 0.9041 - val_loss: 0.4337 - val_accuracy: 0.8747\n",
+      "Epoch 15/17\n",
+      "657/657 [==============================] - ETA: 7s - loss: 0.0555 - accuracy: 1.00 - ETA: 9s - loss: 0.1010 - accuracy: 0.96 - ETA: 7s - loss: 0.1470 - accuracy: 0.94 - ETA: 6s - loss: 0.1366 - accuracy: 0.96 - ETA: 5s - loss: 0.1278 - accuracy: 0.96 - ETA: 5s - loss: 0.1132 - accuracy: 0.96 - ETA: 5s - loss: 0.1314 - accuracy: 0.95 - ETA: 4s - loss: 0.1421 - accuracy: 0.94 - ETA: 4s - loss: 0.1431 - accuracy: 0.94 - ETA: 4s - loss: 0.1523 - accuracy: 0.93 - ETA: 3s - loss: 0.1552 - accuracy: 0.94 - ETA: 3s - loss: 0.1483 - accuracy: 0.94 - ETA: 2s - loss: 0.1462 - accuracy: 0.94 - ETA: 2s - loss: 0.1570 - accuracy: 0.93 - ETA: 2s - loss: 0.1680 - accuracy: 0.93 - ETA: 1s - loss: 0.1650 - accuracy: 0.93 - ETA: 1s - loss: 0.1682 - accuracy: 0.93 - ETA: 1s - loss: 0.1626 - accuracy: 0.94 - ETA: 0s - loss: 0.1598 - accuracy: 0.94 - ETA: 0s - loss: 0.1681 - accuracy: 0.93 - 11s 17ms/step - loss: 0.1674 - accuracy: 0.9376 - val_loss: 0.3869 - val_accuracy: 0.8770\n",
+      "Epoch 16/17\n",
+      "657/657 [==============================] - ETA: 6s - loss: 0.1634 - accuracy: 0.93 - ETA: 6s - loss: 0.2038 - accuracy: 0.92 - ETA: 7s - loss: 0.2980 - accuracy: 0.87 - ETA: 6s - loss: 0.2515 - accuracy: 0.89 - ETA: 7s - loss: 0.2261 - accuracy: 0.91 - ETA: 6s - loss: 0.2081 - accuracy: 0.91 - ETA: 5s - loss: 0.2003 - accuracy: 0.91 - ETA: 5s - loss: 0.1930 - accuracy: 0.91 - ETA: 4s - loss: 0.1953 - accuracy: 0.91 - ETA: 4s - loss: 0.2013 - accuracy: 0.91 - ETA: 4s - loss: 0.2186 - accuracy: 0.90 - ETA: 3s - loss: 0.2140 - accuracy: 0.90 - ETA: 3s - loss: 0.2212 - accuracy: 0.90 - ETA: 2s - loss: 0.2182 - accuracy: 0.90 - ETA: 2s - loss: 0.2136 - accuracy: 0.90 - ETA: 2s - loss: 0.2137 - accuracy: 0.91 - ETA: 1s - loss: 0.2160 - accuracy: 0.91 - ETA: 1s - loss: 0.2101 - accuracy: 0.91 - ETA: 0s - loss: 0.2114 - accuracy: 0.91 - ETA: 0s - loss: 0.2079 - accuracy: 0.91 - 12s 18ms/step - loss: 0.2090 - accuracy: 0.9148 - val_loss: 0.4128 - val_accuracy: 0.8702\n",
+      "Epoch 17/17\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "657/657 [==============================] - ETA: 4s - loss: 0.1133 - accuracy: 0.96 - ETA: 5s - loss: 0.2007 - accuracy: 0.92 - ETA: 5s - loss: 0.2069 - accuracy: 0.92 - ETA: 7s - loss: 0.2032 - accuracy: 0.92 - ETA: 7s - loss: 0.1786 - accuracy: 0.93 - ETA: 6s - loss: 0.2122 - accuracy: 0.91 - ETA: 5s - loss: 0.2222 - accuracy: 0.91 - ETA: 5s - loss: 0.2016 - accuracy: 0.91 - ETA: 4s - loss: 0.2045 - accuracy: 0.92 - ETA: 4s - loss: 0.1902 - accuracy: 0.92 - ETA: 3s - loss: 0.1879 - accuracy: 0.93 - ETA: 3s - loss: 0.1873 - accuracy: 0.93 - ETA: 3s - loss: 0.1851 - accuracy: 0.93 - ETA: 3s - loss: 0.1907 - accuracy: 0.92 - ETA: 2s - loss: 0.1856 - accuracy: 0.93 - ETA: 2s - loss: 0.1892 - accuracy: 0.93 - ETA: 1s - loss: 0.1906 - accuracy: 0.93 - ETA: 1s - loss: 0.1938 - accuracy: 0.92 - ETA: 0s - loss: 0.2057 - accuracy: 0.92 - ETA: 0s - loss: 0.2028 - accuracy: 0.92 - 11s 17ms/step - loss: 0.1997 - accuracy: 0.9254 - val_loss: 0.5544 - val_accuracy: 0.8747\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<keras.callbacks.callbacks.History at 0x16ff36d33c8>"
+       "<keras.callbacks.callbacks.History at 0x25a182792c8>"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 51,
      "metadata": {},
      "output_type": "execute_result"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: Network error resolved after 0:00:25.850209, resuming normal operation.\n"
+     ]
     }
    ],
    "source": [
     "wandb.init()\n",
-    "\n",
+    "print(y_train_hot.shape)\n",
+    "print(labels.shape)\n",
+    "print(X_train.shape)\n",
     "# Train the CNN model\n",
     "#    X_train: Input data\n",
     "#    y_train_hot: Target data\n",
-    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
+    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_val, y_val_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [
     {
@@ -940,7 +430,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 53,
    "metadata": {
     "scrolled": true
    },
@@ -954,29 +444,49 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 54,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Model: \"sequential_1\"\n",
+      "Model: \"sequential_4\"\n",
       "_________________________________________________________________\n",
       "Layer (type)                 Output Shape              Param #   \n",
       "=================================================================\n",
-      "conv2d_1 (Conv2D)            (None, 18, 9, 32)         320       \n",
+      "conv2d_10 (Conv2D)           (None, 126, 30, 21)       210       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_7 (MaxPooling2 (None, 63, 15, 21)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_16 (Activation)   (None, 63, 15, 21)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_11 (Conv2D)           (None, 61, 13, 48)        9120      \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_8 (MaxPooling2 (None, 30, 6, 48)         0         \n",
       "_________________________________________________________________\n",
-      "max_pooling2d_1 (MaxPooling2 (None, 9, 4, 32)          0         \n",
+      "activation_17 (Activation)   (None, 30, 6, 48)         0         \n",
       "_________________________________________________________________\n",
-      "flatten_1 (Flatten)          (None, 1152)              0         \n",
+      "conv2d_12 (Conv2D)           (None, 28, 6, 48)         6960      \n",
       "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 128)               147584    \n",
+      "activation_18 (Activation)   (None, 28, 6, 48)         0         \n",
       "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 10)                1290      \n",
+      "flatten_4 (Flatten)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dropout_7 (Dropout)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dense_7 (Dense)              (None, 64)                516160    \n",
+      "_________________________________________________________________\n",
+      "activation_19 (Activation)   (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_8 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_8 (Dense)              (None, 7)                 455       \n",
+      "_________________________________________________________________\n",
+      "activation_20 (Activation)   (None, 7)                 0         \n",
       "=================================================================\n",
-      "Total params: 149,194\n",
-      "Trainable params: 149,194\n",
+      "Total params: 532,905\n",
+      "Trainable params: 532,905\n",
       "Non-trainable params: 0\n",
       "_________________________________________________________________\n"
      ]
@@ -989,68 +499,953 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 55,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[[ 24   0   0   0   0   0  10]\n",
+      " [  1   4   0   0   0   0   3]\n",
+      " [  0   0   5   0   0   0  16]\n",
+      " [  2   0   0   0   0   0   1]\n",
+      " [  0   0   0   0   0   0   6]\n",
+      " [  0   0   0   0   0   2   3]\n",
+      " [  1   0   1   1   0   0 194]]\n",
+      "Accuracy for class AAT : [0.70588235]\n",
+      "Accuracy for class AHV : [0.5]\n",
+      "Accuracy for class AMA : [0.23809524]\n",
+      "Accuracy for class ART : [0.]\n",
+      "Accuracy for class ASI : [0.]\n",
+      "Accuracy for class AVH : [0.4]\n",
+      "Accuracy for class AVT : [0.98477157]\n",
+      "Overall Accuracy : 0.8357664233576643\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "'Accuracy for class AAT : [0.46666667]\\nAccuracy for class AHV : [0.33333333]\\nAccuracy for class AMA : [0.125]\\nAccuracy for class ART : 0\\nAccuracy for class ASI : [0.]\\nAccuracy for class AVH : [0.6]\\nAccuracy for class AVT : [0.92307692]\\nOverall Accuracy : 0.676056338028169'"
+      ]
+     },
+     "execution_count": 55,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred_ohe = loaded_model.predict(X_test)  # shape=(n_samples, 12)\n",
+    "y_pred_labels = np.argmax(y_pred_ohe, axis=1)  # only necessary if output has one-hot-encoding, shape=(n_samples)\n",
+    "\n",
+    "confusion_matrix = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_labels)  # shape\n",
+    "print(confusion_matrix)\n",
+    "\n",
+    "for class_i in range(len(labels)) :\n",
+    "    indices = np.argwhere(y_test == class_i)\n",
+    "    sum = 0\n",
+    "    for index in indices:\n",
+    "        sum += (y_test[index] == y_pred_labels[index])\n",
+    "    if(len(indices) > 0) : mean = sum/len(indices)\n",
+    "    else : mean = \"N/A\"\n",
+    "    print(\"Accuracy for class\", labels[class_i], \":\", mean)\n",
+    "\n",
+    "print(\"Overall Accuracy :\", np.mean(y_test == y_pred_labels))\n",
+    "\n",
+    "'''[[ 24   0   0   0   0   0  10]\n",
+    " [  1   4   0   0   0   0   3]\n",
+    " [  0   0   5   0   0   0  16]\n",
+    " [  2   0   0   0   0   0   1]\n",
+    " [  0   0   0   0   0   0   6]\n",
+    " [  0   0   0   0   0   2   3]\n",
+    " [  1   0   1   1   0   0 194]]\n",
+    "Accuracy for class AAT : [0.70588235]\n",
+    "Accuracy for class AHV : [0.5]\n",
+    "Accuracy for class AMA : [0.23809524]\n",
+    "Accuracy for class ART : [0.]\n",
+    "Accuracy for class ASI : [0.]\n",
+    "Accuracy for class AVH : [0.4]\n",
+    "Accuracy for class AVT : [0.98477157]\n",
+    "Overall Accuracy : 0.8357664233576643'''"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 56,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
+      "[0. 1.]\n",
+      "[ 0.0000000e+00  1.5258789e-05  0.0000000e+00 ...  3.3020020e-02\n",
+      "  1.2680054e-02 -8.7432861e-03]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00000845\n",
+      "\n",
+      " AHV :  0.00002680\n",
+      "\n",
+      " AMA :  0.00160028\n",
+      "\n",
+      " ART :  0.00002374\n",
+      "\n",
+      " ASI :  0.00000634\n",
+      "\n",
+      " AVH :  0.00003628\n",
+      "\n",
+      " AVT :  0.99829823\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[1. 2.]\n",
+      "[-0.03717041 -0.05769348 -0.06455994 ...  0.01766968  0.01895142\n",
+      "  0.01779175]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.12997904\n",
+      "\n",
+      " AHV :  0.04505088\n",
+      "\n",
+      " AMA :  0.00426566\n",
+      "\n",
+      " ART :  0.00476746\n",
+      "\n",
+      " ASI :  0.00100627\n",
+      "\n",
+      " AVH :  0.00626362\n",
+      "\n",
+      " AVT :  0.80866700\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[2. 3.]\n",
+      "[ 0.02345276  0.02101135  0.01712036 ... -0.01161194 -0.0141449\n",
+      " -0.01431274]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00162159\n",
+      "\n",
+      " AHV :  0.02336102\n",
+      "\n",
+      " AMA :  0.02379958\n",
+      "\n",
+      " ART :  0.00201543\n",
+      "\n",
+      " ASI :  0.00147080\n",
+      "\n",
+      " AVH :  0.05321468\n",
+      "\n",
+      " AVT :  0.89451694\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[3. 4.]\n",
+      "[-0.01583862 -0.01066589 -0.00762939 ... -0.0377655  -0.03556824\n",
+      " -0.02685547]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00026622\n",
+      "\n",
+      " AHV :  0.00000569\n",
+      "\n",
+      " AMA :  0.00002566\n",
+      "\n",
+      " ART :  0.00000374\n",
+      "\n",
+      " ASI :  0.00000336\n",
+      "\n",
+      " AVH :  0.00011508\n",
+      "\n",
+      " AVT :  0.99958020\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[4. 5.]\n",
+      "[-0.02836609 -0.02510071 -0.02012634 ...  0.0138855  -0.00386047\n",
+      " -0.00904846]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00001108\n",
+      "\n",
+      " AHV :  0.00008323\n",
+      "\n",
+      " AMA :  0.00004823\n",
+      "\n",
+      " ART :  0.00000794\n",
+      "\n",
+      " ASI :  0.00000329\n",
+      "\n",
+      " AVH :  0.00019222\n",
+      "\n",
+      " AVT :  0.99965405\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[5. 6.]\n",
+      "[-0.00526428  0.00822449  0.01951599 ...  0.02729797  0.02156067\n",
+      "  0.01234436]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00061439\n",
+      "\n",
+      " AHV :  0.02362605\n",
+      "\n",
+      " AMA :  0.00448049\n",
+      "\n",
+      " ART :  0.00014941\n",
+      "\n",
+      " ASI :  0.00009322\n",
+      "\n",
+      " AVH :  0.00404324\n",
+      "\n",
+      " AVT :  0.96699321\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[6. 7.]\n",
+      "[ 0.00544739  0.00053406  0.00970459 ... -0.02848816 -0.01611328\n",
+      " -0.01091003]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00004080\n",
+      "\n",
+      " AHV :  0.00074152\n",
+      "\n",
+      " AMA :  0.00559893\n",
+      "\n",
+      " ART :  0.00048534\n",
+      "\n",
+      " ASI :  0.00055095\n",
+      "\n",
+      " AVH :  0.00444674\n",
+      "\n",
+      " AVT :  0.98813581\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[7. 8.]\n",
+      "[-0.0177002  -0.02372742 -0.02700806 ... -0.04304504 -0.04063416\n",
+      " -0.03363037]\n",
+      "(128, 32)\n",
       "PREDICTED VALUES\n",
       "\n",
-      " bus :  0.00002306\n",
+      " AAT :  0.00004655\n",
       "\n",
-      " car_horn :  0.98330659\n",
+      " AHV :  0.00002883\n",
+      "\n",
+      " AMA :  0.00047086\n",
+      "\n",
+      " ART :  0.00004399\n",
+      "\n",
+      " ASI :  0.00001032\n",
+      "\n",
+      " AVH :  0.00005926\n",
+      "\n",
+      " AVT :  0.99934012\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[8. 9.]\n",
+      "[-0.01539612 -0.00108337  0.00718689 ...  0.01161194  0.01818848\n",
+      "  0.02700806]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
       "\n",
-      " chainsaw :  0.00023836\n",
+      " AAT :  0.00001865\n",
       "\n",
-      " cow :  0.00675107\n",
+      " AHV :  0.00208160\n",
       "\n",
-      " engine :  0.00007791\n",
+      " AMA :  0.01226574\n",
       "\n",
-      " footsteps :  0.00000021\n",
+      " ART :  0.00032419\n",
       "\n",
-      " hand_saw :  0.00959078\n",
+      " ASI :  0.00006721\n",
       "\n",
-      " hen :  0.00000000\n",
+      " AVH :  0.00023971\n",
       "\n",
-      " rooster :  0.00001190\n",
+      " AVT :  0.98500293\n",
       "\n",
-      " siren :  0.00000016\n",
       "\n",
+      "GUESS:  AVT\n",
+      "[ 9. 10.]\n",
+      "[ 0.03549194  0.04856873  0.05519104 ... -0.02171326 -0.03634644\n",
+      " -0.03912354]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00033581\n",
+      "\n",
+      " AHV :  0.00389374\n",
+      "\n",
+      " AMA :  0.04916417\n",
+      "\n",
+      " ART :  0.00066305\n",
+      "\n",
+      " ASI :  0.00055320\n",
+      "\n",
+      " AVH :  0.00067650\n",
+      "\n",
+      " AVT :  0.94471347\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[10. 11.]\n",
+      "[-0.02934265 -0.0115509   0.00445557 ... -0.03616333 -0.03759766\n",
+      " -0.0304718 ]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00009942\n",
+      "\n",
+      " AHV :  0.00036154\n",
+      "\n",
+      " AMA :  0.00088362\n",
+      "\n",
+      " ART :  0.00033854\n",
+      "\n",
+      " ASI :  0.00006554\n",
+      "\n",
+      " AVH :  0.00013340\n",
+      "\n",
+      " AVT :  0.99811792\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[11. 12.]\n",
+      "[-0.03358459 -0.03901672 -0.03933716 ... -0.02337646 -0.02124023\n",
+      " -0.02107239]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.02913574\n",
+      "\n",
+      " AHV :  0.05098564\n",
+      "\n",
+      " AMA :  0.01407128\n",
+      "\n",
+      " ART :  0.00464849\n",
+      "\n",
+      " ASI :  0.00274732\n",
+      "\n",
+      " AVH :  0.02327583\n",
+      "\n",
+      " AVT :  0.87513572\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[12. 13.]\n",
+      "[-0.00846863  0.00444031  0.00852966 ... -0.00604248 -0.00845337\n",
+      " -0.00497437]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
       "\n",
-      "GUESS:  car_horn\n"
+      " AAT :  0.00023466\n",
+      "\n",
+      " AHV :  0.00001617\n",
+      "\n",
+      " AMA :  0.00001841\n",
+      "\n",
+      " ART :  0.00000659\n",
+      "\n",
+      " ASI :  0.00000598\n",
+      "\n",
+      " AVH :  0.00001476\n",
+      "\n",
+      " AVT :  0.99970335\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[13. 14.]\n",
+      "[-0.00427246 -0.00718689 -0.00811768 ... -0.01966858 -0.01296997\n",
+      " -0.01628113]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00485625\n",
+      "\n",
+      " AHV :  0.00167193\n",
+      "\n",
+      " AMA :  0.00056236\n",
+      "\n",
+      " ART :  0.00040990\n",
+      "\n",
+      " ASI :  0.00002041\n",
+      "\n",
+      " AVH :  0.00000730\n",
+      "\n",
+      " AVT :  0.99247181\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[14. 15.]\n",
+      "[-0.02262878 -0.01573181 -0.00117493 ... -0.08956909 -0.0695343\n",
+      " -0.04067993]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00089134\n",
+      "\n",
+      " AHV :  0.00646266\n",
+      "\n",
+      " AMA :  0.00076925\n",
+      "\n",
+      " ART :  0.00013778\n",
+      "\n",
+      " ASI :  0.00007284\n",
+      "\n",
+      " AVH :  0.00023529\n",
+      "\n",
+      " AVT :  0.99143094\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[15. 16.]\n",
+      "[-0.02532959 -0.01031494 -0.00280762 ... -0.07128906 -0.07106018\n",
+      " -0.05839539]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00013731\n",
+      "\n",
+      " AHV :  0.00183650\n",
+      "\n",
+      " AMA :  0.00056936\n",
+      "\n",
+      " ART :  0.00005597\n",
+      "\n",
+      " ASI :  0.00003344\n",
+      "\n",
+      " AVH :  0.00059690\n",
+      "\n",
+      " AVT :  0.99677050\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[16. 17.]\n",
+      "[-0.04600525 -0.02149963  0.00523376 ... -0.02526855 -0.02735901\n",
+      " -0.03106689]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00012023\n",
+      "\n",
+      " AHV :  0.00005425\n",
+      "\n",
+      " AMA :  0.00050078\n",
+      "\n",
+      " ART :  0.00001794\n",
+      "\n",
+      " ASI :  0.00000330\n",
+      "\n",
+      " AVH :  0.00000514\n",
+      "\n",
+      " AVT :  0.99929833\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[17. 18.]\n",
+      "[-0.02043152 -0.01174927 -0.02088928 ...  0.10055542  0.08653259\n",
+      "  0.06604004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00242063\n",
+      "\n",
+      " AHV :  0.02417476\n",
+      "\n",
+      " AMA :  0.00962186\n",
+      "\n",
+      " ART :  0.00315190\n",
+      "\n",
+      " ASI :  0.00090792\n",
+      "\n",
+      " AVH :  0.00031734\n",
+      "\n",
+      " AVT :  0.95940560\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[18. 19.]\n",
+      "[ 0.04153442  0.01223755 -0.00654602 ...  0.03269958  0.02374268\n",
+      "  0.02774048]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00005964\n",
+      "\n",
+      " AHV :  0.00011938\n",
+      "\n",
+      " AMA :  0.00017072\n",
+      "\n",
+      " ART :  0.00000962\n",
+      "\n",
+      " ASI :  0.00000644\n",
+      "\n",
+      " AVH :  0.00000328\n",
+      "\n",
+      " AVT :  0.99963093\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[19. 20.]\n",
+      "[0.02185059 0.02069092 0.01451111 ... 0.03469849 0.03985596 0.04600525]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00040058\n",
+      "\n",
+      " AHV :  0.00004938\n",
+      "\n",
+      " AMA :  0.00074538\n",
+      "\n",
+      " ART :  0.00003813\n",
+      "\n",
+      " ASI :  0.00007063\n",
+      "\n",
+      " AVH :  0.00003809\n",
+      "\n",
+      " AVT :  0.99865782\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[20. 21.]\n",
+      "[ 0.0353241   0.01567078 -0.00102234 ...  0.1058197   0.10365295\n",
+      "  0.09759521]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00074374\n",
+      "\n",
+      " AHV :  0.00207694\n",
+      "\n",
+      " AMA :  0.00160230\n",
+      "\n",
+      " ART :  0.00084336\n",
+      "\n",
+      " ASI :  0.00110702\n",
+      "\n",
+      " AVH :  0.00020138\n",
+      "\n",
+      " AVT :  0.99342537\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[21. 22.]\n",
+      "[ 0.09413147  0.07905579  0.05625916 ... -0.01145935 -0.00245667\n",
+      "  0.00479126]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00031931\n",
+      "\n",
+      " AHV :  0.00102429\n",
+      "\n",
+      " AMA :  0.00634787\n",
+      "\n",
+      " ART :  0.00009260\n",
+      "\n",
+      " ASI :  0.00047463\n",
+      "\n",
+      " AVH :  0.00170685\n",
+      "\n",
+      " AVT :  0.99003452\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[22. 23.]\n",
+      "[ 0.0037384   0.01168823  0.01628113 ... -0.03440857 -0.05511475\n",
+      " -0.08209229]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00003239\n",
+      "\n",
+      " AHV :  0.00036528\n",
+      "\n",
+      " AMA :  0.00011020\n",
+      "\n",
+      " ART :  0.00007367\n",
+      "\n",
+      " ASI :  0.00001307\n",
+      "\n",
+      " AVH :  0.00047624\n",
+      "\n",
+      " AVT :  0.99892908\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[23. 24.]\n",
+      "[-0.1026001  -0.12590027 -0.14944458 ...  0.03462219  0.02537537\n",
+      "  0.02354431]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00000667\n",
+      "\n",
+      " AHV :  0.00000333\n",
+      "\n",
+      " AMA :  0.00001054\n",
+      "\n",
+      " ART :  0.00000075\n",
+      "\n",
+      " ASI :  0.00000556\n",
+      "\n",
+      " AVH :  0.00063617\n",
+      "\n",
+      " AVT :  0.99933690\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[24. 25.]\n",
+      "[ 0.0196991   0.02836609  0.03103638 ... -0.03009033 -0.03392029\n",
+      " -0.03681946]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00188165\n",
+      "\n",
+      " AHV :  0.00130030\n",
+      "\n",
+      " AMA :  0.00001089\n",
+      "\n",
+      " ART :  0.00022374\n",
+      "\n",
+      " ASI :  0.00001649\n",
+      "\n",
+      " AVH :  0.00002545\n",
+      "\n",
+      " AVT :  0.99654144\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[25. 26.]\n",
+      "[-0.04151917 -0.03933716 -0.03703308 ...  0.05451965  0.0519104\n",
+      "  0.05206299]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00122705\n",
+      "\n",
+      " AHV :  0.00029669\n",
+      "\n",
+      " AMA :  0.00071102\n",
+      "\n",
+      " ART :  0.00031670\n",
+      "\n",
+      " ASI :  0.00006351\n",
+      "\n",
+      " AVH :  0.00002656\n",
+      "\n",
+      " AVT :  0.99735850\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[26. 27.]\n",
+      "[ 0.05670166  0.06253052  0.07643127 ... -0.00396729  0.00715637\n",
+      "  0.00585938]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.01289045\n",
+      "\n",
+      " AHV :  0.01568283\n",
+      "\n",
+      " AMA :  0.00384673\n",
+      "\n",
+      " ART :  0.00074689\n",
+      "\n",
+      " ASI :  0.00053665\n",
+      "\n",
+      " AVH :  0.00053112\n",
+      "\n",
+      " AVT :  0.96576536\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[27. 28.]\n",
+      "[-0.00222778 -0.01303101 -0.02310181 ...  0.01165771  0.01649475\n",
+      "  0.0194397 ]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00012742\n",
+      "\n",
+      " AHV :  0.00486032\n",
+      "\n",
+      " AMA :  0.02440478\n",
+      "\n",
+      " ART :  0.00109660\n",
+      "\n",
+      " ASI :  0.00052789\n",
+      "\n",
+      " AVH :  0.00020074\n",
+      "\n",
+      " AVT :  0.96878225\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[28. 29.]\n",
+      "[0.01657104 0.01519775 0.00924683 ... 0.03746033 0.03282166 0.02775574]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00012959\n",
+      "\n",
+      " AHV :  0.00014935\n",
+      "\n",
+      " AMA :  0.00006704\n",
+      "\n",
+      " ART :  0.00005216\n",
+      "\n",
+      " ASI :  0.00000344\n",
+      "\n",
+      " AVH :  0.00001072\n",
+      "\n",
+      " AVT :  0.99958771\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[29. 30.]\n",
+      "[ 0.01919556  0.0135498   0.01724243 ... -0.00575256 -0.01502991\n",
+      " -0.02742004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00030832\n",
+      "\n",
+      " AHV :  0.00008630\n",
+      "\n",
+      " AMA :  0.00009714\n",
+      "\n",
+      " ART :  0.00008344\n",
+      "\n",
+      " ASI :  0.00000965\n",
+      "\n",
+      " AVH :  0.00000210\n",
+      "\n",
+      " AVT :  0.99941301\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[30. 31.]\n",
+      "[-0.0322876  -0.0365448  -0.03544617 ... -0.0218811  -0.02978516\n",
+      " -0.04052734]\n",
+      "(128, 32)\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00001738\n",
+      "\n",
+      " AHV :  0.00008997\n",
+      "\n",
+      " AMA :  0.00040408\n",
+      "\n",
+      " ART :  0.00002873\n",
+      "\n",
+      " ASI :  0.00001739\n",
+      "\n",
+      " AVH :  0.00004352\n",
+      "\n",
+      " AVT :  0.99939895\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[31. 32.]\n",
+      "[-0.04328918 -0.03413391 -0.03421021 ...  0.05908203  0.06370544\n",
+      "  0.05949402]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00014836\n",
+      "\n",
+      " AHV :  0.00004444\n",
+      "\n",
+      " AMA :  0.00008131\n",
+      "\n",
+      " ART :  0.00006160\n",
+      "\n",
+      " ASI :  0.00001060\n",
+      "\n",
+      " AVH :  0.00000214\n",
+      "\n",
+      " AVT :  0.99965155\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[32. 33.]\n",
+      "[ 0.06063843  0.06056213  0.06610107 ... -0.12741089 -0.13371277\n",
+      " -0.12313843]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00000652\n",
+      "\n",
+      " AHV :  0.00017518\n",
+      "\n",
+      " AMA :  0.00026005\n",
+      "\n",
+      " ART :  0.00000556\n",
+      "\n",
+      " ASI :  0.00000064\n",
+      "\n",
+      " AVH :  0.00000350\n",
+      "\n",
+      " AVT :  0.99954849\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[33. 34.]\n",
+      "[-0.09968567 -0.06376648 -0.03105164 ... -0.0138092  -0.01574707\n",
+      " -0.01896667]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00003619\n",
+      "\n",
+      " AHV :  0.00004188\n",
+      "\n",
+      " AMA :  0.00008402\n",
+      "\n",
+      " ART :  0.00001355\n",
+      "\n",
+      " ASI :  0.00000258\n",
+      "\n",
+      " AVH :  0.00001106\n",
+      "\n",
+      " AVT :  0.99981076\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[34. 35.]\n",
+      "[-0.00811768  0.00149536  0.00953674 ... -0.004776   -0.0010376\n",
+      "  0.00231934]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00199645\n",
+      "\n",
+      " AHV :  0.00405928\n",
+      "\n",
+      " AMA :  0.00041420\n",
+      "\n",
+      " ART :  0.00131999\n",
+      "\n",
+      " ASI :  0.00015780\n",
+      "\n",
+      " AVH :  0.00013391\n",
+      "\n",
+      " AVT :  0.99191839\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[35. 36.]\n",
+      "[ 0.00238037  0.00236511  0.00231934 ... -0.00193787  0.0068512\n",
+      "  0.00695801]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " AAT :  0.00453538\n",
+      "\n",
+      " AHV :  0.04714373\n",
+      "\n",
+      " AMA :  0.00146411\n",
+      "\n",
+      " ART :  0.00228473\n",
+      "\n",
+      " ASI :  0.00070103\n",
+      "\n",
+      " AVH :  0.00112808\n",
+      "\n",
+      " AVT :  0.94274294\n",
+      "\n",
+      "\n",
+      "GUESS:  AVT\n",
+      "[{'class': 'AVT', 'timestamp': 0}, {'class': 'AVT', 'timestamp': 1}, {'class': 'AVT', 'timestamp': 2}, {'class': 'AVT', 'timestamp': 3}, {'class': 'AVT', 'timestamp': 4}, {'class': 'AVT', 'timestamp': 5}, {'class': 'AVT', 'timestamp': 6}, {'class': 'AVT', 'timestamp': 7}, {'class': 'AVT', 'timestamp': 8}, {'class': 'AVT', 'timestamp': 9}, {'class': 'AVT', 'timestamp': 10}, {'class': 'AVT', 'timestamp': 11}, {'class': 'AVT', 'timestamp': 12}, {'class': 'AVT', 'timestamp': 13}, {'class': 'AVT', 'timestamp': 14}, {'class': 'AVT', 'timestamp': 15}, {'class': 'AVT', 'timestamp': 16}, {'class': 'AVT', 'timestamp': 17}, {'class': 'AVT', 'timestamp': 18}, {'class': 'AVT', 'timestamp': 19}, {'class': 'AVT', 'timestamp': 20}, {'class': 'AVT', 'timestamp': 21}, {'class': 'AVT', 'timestamp': 22}, {'class': 'AVT', 'timestamp': 23}, {'class': 'AVT', 'timestamp': 24}, {'class': 'AVT', 'timestamp': 25}, {'class': 'AVT', 'timestamp': 26}, {'class': 'AVT', 'timestamp': 27}, {'class': 'AVT', 'timestamp': 28}, {'class': 'AVT', 'timestamp': 29}, {'class': 'AVT', 'timestamp': 30}, {'class': 'AVT', 'timestamp': 31}, {'class': 'AVT', 'timestamp': 32}, {'class': 'AVT', 'timestamp': 33}, {'class': 'AVT', 'timestamp': 34}, {'class': 'AVT', 'timestamp': 35}]\n"
      ]
     }
    ],
    "source": [
     "## Running the model\n",
     "\n",
-    "# Convert wav to MFCC\n",
-    "prediction_data = wav2mfcc('./prediction/cow.wav')\n",
+    "n_mfcc = config.buckets\n",
+    "max_len = config.max_len\n",
+    "# convert file to wav2mfcc\n",
+    "# Mel-frequency cepstral coefficients\n",
+    "file_path = \"./prediction/nature_sc.wav\"\n",
+    "big_wave, sr = librosa.load(file_path, mono=True, sr=None)\n",
+    "#print(wave.shape, sr)\n",
+    "\n",
+    "classification = []\n",
+    "\n",
+    "for sec_index in range( int(big_wave.shape[0] / sr) ) :\n",
+    "    start_sec = sec_index\n",
+    "    end_sec = sec_index + 1\n",
+    "    \n",
+    "    sec_to_trim = np.array( [ float(start_sec), float(end_sec) ] )\n",
+    "    print(sec_to_trim)\n",
+    "    sec_to_trim = np.ceil( sec_to_trim * sr )\n",
+    "\n",
+    "    wave = big_wave[int(sec_to_trim[0]) : int(sec_to_trim[1])]\n",
+    "    print(wave)\n",
+    "\n",
+    "    wave = np.asfortranarray(wave[::3])\n",
+    "    mfcc = librosa.feature.mfcc(wave, sr=16000, n_mfcc=n_mfcc)\n",
+    "\n",
+    "    # If maximum length exceeds mfcc lengths then pad the remaining ones\n",
+    "    if (max_len > mfcc.shape[1]):\n",
+    "        pad_width = max_len - mfcc.shape[1]\n",
+    "        mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')\n",
+    "\n",
+    "    # Else cutoff the remaining parts\n",
+    "    else:\n",
+    "        mfcc = mfcc[:, :max_len]\n",
+    "\n",
+    "    # Convert wav to MFCC\n",
+    "    prediction_data = wav2mfcc('./prediction/nature_sc.wav')\n",
+    "    prediction_data = mfcc\n",
+    "    print(prediction_data.shape)\n",
+    "    #print(wav2mfcc())\n",
+    "    # Reshape to 4 dimensions\n",
+    "    prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
+    "    #prediction_data = prediction_data.reshape(1, 20, config.max_len, channels)\n",
     "\n",
-    "# Reshape to 4 dimensions\n",
-    "prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
+    "    # Run the model on the inputted file\n",
+    "    predicted = loaded_model.predict(prediction_data)\n",
     "\n",
-    "# Run the model on the inputted file\n",
-    "predicted = loaded_model.predict(prediction_data)\n",
+    "    # Output the prediction values for each class\n",
+    "    print ('PREDICTED VALUES')\n",
+    "    labels_indices = range(len(labels))\n",
+    "    max_value = 0\n",
+    "    max_value_index = 0\n",
+    "    for index in labels_indices:\n",
+    "        print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
+    "        if predicted[0,index] > max_value:\n",
+    "            max_value_index = index\n",
+    "            max_value = predicted[0,index]\n",
     "\n",
-    "# Output the prediction values for each class\n",
-    "print ('PREDICTED VALUES')\n",
-    "labels_indices = range(len(labels))\n",
-    "max_value = 0\n",
-    "max_value_index = 0\n",
-    "for index in labels_indices:\n",
-    "    print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
-    "    if predicted[0,index] > max_value:\n",
-    "        max_value_index = index\n",
-    "        max_value = predicted[0,index]\n",
+    "    # Output the prediction\n",
+    "    if max_value < 0.5:\n",
+    "        print(\"GUESS: Nothing\")\n",
+    "        classification.append( { \"class\" : \"Nothing\", \"timestamp\" : start_sec } )\n",
+    "    else:\n",
+    "        print('\\n\\nGUESS: ', labels[max_value_index])\n",
+    "        classification.append( { \"class\" : labels[max_value_index], \"timestamp\" : start_sec } )\n",
     "\n",
-    "# Output the prediction\n",
-    "if max_value < 0.5:\n",
-    "    print(\"GUESS: Nothing\")\n",
-    "else:\n",
-    "    print('\\n\\nGUESS: ', labels[max_value_index])"
+    "print(classification)"
    ]
   },
   {
@@ -1077,7 +1472,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.2"
+   "version": "3.7.4"
   }
  },
  "nbformat": 4,
diff --git a/ant-cnn/ant_cnn_model.h5 b/ant-cnn/ant_cnn_model.h5
new file mode 100644
index 0000000..57ef8af
Binary files /dev/null and b/ant-cnn/ant_cnn_model.h5 differ
diff --git a/ant-cnn/prediction/nature_sc.wav b/ant-cnn/prediction/nature_sc.wav
new file mode 100644
index 0000000..ead84c1
Binary files /dev/null and b/ant-cnn/prediction/nature_sc.wav differ
diff --git a/ant-cnn/preprocess.py b/ant-cnn/preprocess.py
index e5fe230..1b26999 100644
--- a/ant-cnn/preprocess.py
+++ b/ant-cnn/preprocess.py
@@ -65,9 +65,10 @@ def get_train_test(split_ratio=0.6, random_state=42):
 
     assert X.shape[0] == len(y)
 
-    return train_test_split(X, y, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
-
+    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= (1 - 0.8), random_state=random_state, shuffle=True)
+    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
 
+    return X_train, X_test, X_val, y_train, y_test, y_val
 
 def prepare_dataset(path=DATA_PATH):
     labels, _, _ = get_labels(path)
diff --git a/ant_cnn_model.h5 b/ant_cnn_model.h5
new file mode 100644
index 0000000..57ef8af
Binary files /dev/null and b/ant_cnn_model.h5 differ
diff --git a/bio-cnn/bio-cnn.ipynb b/bio-cnn/bio-cnn.ipynb
index 04f5b4f..6affcb5 100644
--- a/bio-cnn/bio-cnn.ipynb
+++ b/bio-cnn/bio-cnn.ipynb
@@ -2,31 +2,24 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 16,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from preprocess import *\n",
     "import keras\n",
     "from keras.models import Sequential\n",
-    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM\n",
+    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM, Activation\n",
     "from keras.utils import to_categorical\n",
     "import wandb\n",
     "from wandb.keras import WandbCallback\n",
-    "import matplotlib.pyplot as plt"
+    "import matplotlib.pyplot as plt\n",
+    "import sklearn.metrics as metrics"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 17,
    "metadata": {},
    "outputs": [
     {
@@ -34,8 +27,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/87t9fiik\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/87t9fiik</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2scjqmi0\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2scjqmi0</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -49,12 +42,11 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
-      "Saving vectors of label - 'chirping_birds': 100%|██████████████████████████████████████| 40/40 [00:01<00:00, 21.45it/s]\n",
-      "Saving vectors of label - 'crickets': 100%|████████████████████████████████████████████| 40/40 [00:01<00:00, 23.38it/s]\n",
-      "Saving vectors of label - 'crow': 100%|████████████████████████████████████████████████| 40/40 [00:01<00:00, 28.51it/s]\n",
-      "Saving vectors of label - 'frog': 100%|████████████████████████████████████████████████| 40/40 [00:01<00:00, 20.78it/s]\n",
-      "Saving vectors of label - 'insects': 100%|█████████████████████████████████████████████| 40/40 [00:01<00:00, 24.60it/s]\n"
+      "Saving vectors of label - 'BAM': 100%|███████████████████████████████████████████████| 564/564 [00:09<00:00, 57.61it/s]\n",
+      "Saving vectors of label - 'BBI': 100%|█████████████████████████████████████████████| 2488/2488 [00:40<00:00, 61.41it/s]\n",
+      "Saving vectors of label - 'BIN': 100%|███████████████████████████████████████████████| 480/480 [00:05<00:00, 82.26it/s]\n",
+      "Saving vectors of label - 'BMA': 100%|████████████████████████████████████████████████| 29/29 [00:00<00:00, 110.56it/s]\n",
+      "Saving vectors of label - 'BRA': 100%|████████████████████████████████████████████████| 32/32 [00:00<00:00, 145.18it/s]\n"
      ]
     }
    ],
@@ -62,107 +54,170 @@
     "wandb.init()\n",
     "config = wandb.config\n",
     "\n",
-    "config.max_len = 11\n",
-    "config.buckets = 20\n",
+    "config.max_len = 32\n",
+    "config.buckets = 128\n",
     "\n",
     "# Save data to array file first\n",
     "save_data_to_array(max_len=config.max_len, n_mfcc=config.buckets)\n",
     "\n",
-    "labels=[\"chirping_birds\", \"crickets\", \"crow\", \"frog\", \"insects\"]"
+    "#labels=np.array([\"chirping_birds\", \"crickets\", \"crow\", \n",
+    "#                 \"frog\", \"insects\"])\n",
+    "labels=np.array([\"BRA\", \"BAM\", \"BBI\", \n",
+    "                 \"BMA\", \"BIN\"])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 18,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Loading train/test set\n",
-    "X_train, X_test, y_train, y_test = get_train_test()"
+    "X_train, X_test, X_val, y_train, y_test, y_val = get_train_test()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 19,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "# Setting channels to 1 to generalize stereo sound to 1 channel\n",
     "channels = 1\n",
-    "config.epochs = 50\n",
+    "config.epochs = 11\n",
     "config.batch_size = 100\n",
     "\n",
-    "# Number of classes (chirping_birds, crickets, crow, frog, insects)\n",
+    "# Number of classes\n",
     "num_classes = 5\n",
     "\n",
     "# Reshape X_train and X_test to include a 4th dimension (channels)\n",
     "X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len, channels)\n",
-    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)"
+    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)\n",
+    "X_val = X_val.reshape(X_val.shape[0], config.buckets, config.max_len, channels)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 20,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "1.0\n"
+      "(1724, 128, 32, 1)\n"
      ]
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
     }
    ],
    "source": [
     "# Spectrogram visualized of 0th element\n",
-    "plt.imshow(X_train[1, :, :, 0])\n",
-    "print(y_train[1])"
+    "print(X_train.shape)\n",
+    "#plt.imshow(X_train[500, :, :, 0])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 21,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Getting vector number where each number corresponds to a label\n",
     "y_train_hot = to_categorical(y_train)\n",
-    "y_test_hot = to_categorical(y_test)"
+    "y_test_hot = to_categorical(y_test)\n",
+    "y_val_hot = to_categorical(y_val)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 22,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Model: \"sequential_2\"\n",
+      "_________________________________________________________________\n",
+      "Layer (type)                 Output Shape              Param #   \n",
+      "=================================================================\n",
+      "conv2d_4 (Conv2D)            (None, 126, 30, 24)       240       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_3 (MaxPooling2 (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_6 (Activation)    (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_5 (Conv2D)            (None, 61, 13, 48)        10416     \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_4 (MaxPooling2 (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "activation_7 (Activation)    (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_6 (Conv2D)            (None, 28, 6, 48)         6960      \n",
+      "_________________________________________________________________\n",
+      "activation_8 (Activation)    (None, 28, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "flatten_2 (Flatten)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dropout_3 (Dropout)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dense_3 (Dense)              (None, 64)                516160    \n",
+      "_________________________________________________________________\n",
+      "activation_9 (Activation)    (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_4 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_4 (Dense)              (None, 5)                 325       \n",
+      "_________________________________________________________________\n",
+      "activation_10 (Activation)   (None, 5)                 0         \n",
+      "=================================================================\n",
+      "Total params: 534,101\n",
+      "Trainable params: 534,101\n",
+      "Non-trainable params: 0\n",
+      "_________________________________________________________________\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "\"model.add(Conv2D(32, (3, 3),\\n    input_shape=(config.buckets, config.max_len, channels),\\n    activation='relu'))\\n\\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\\n\\nmodel.add(Flatten())\\n\\nmodel.add(Dense(128, activation='relu'))\\nmodel.add(Dense(num_classes, activation='softmax'))\""
+      ]
+     },
+     "execution_count": 22,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Building the model\n",
     "model = Sequential()\n",
     "\n",
+    "input_shape= (config.buckets, config.max_len, channels)\n",
+    "\n",
+    "model.add(Conv2D(24, (3, 3), strides=(1, 1), input_shape=input_shape))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 3), padding=\"valid\"))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 1), padding=\"valid\"))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Flatten())\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(64))\n",
+    "model.add(Activation('relu'))\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(len(labels)))\n",
+    "model.add(Activation('softmax'))\n",
+    "model.summary()\n",
     "# Conv2D: \n",
     "#    Filters: 32\n",
     "#    Kernel_size: (3,3) (height/width of the 2D convolution window)     \n",
-    "model.add(Conv2D(32, (3, 3),\n",
+    "'''model.add(Conv2D(32, (3, 3),\n",
     "    input_shape=(config.buckets, config.max_len, channels),\n",
     "    activation='relu'))\n",
     "\n",
@@ -171,12 +226,12 @@
     "model.add(Flatten())\n",
     "\n",
     "model.add(Dense(128, activation='relu'))\n",
-    "model.add(Dense(num_classes, activation='softmax'))"
+    "model.add(Dense(num_classes, activation='softmax'))'''"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 23,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -188,7 +243,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 24,
    "metadata": {
     "scrolled": false
    },
@@ -198,8 +253,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/q0j9dcai\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/q0j9dcai</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2rmjxl57\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2rmjxl57</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -210,148 +265,80 @@
      "output_type": "display_data"
     },
     {
-     "name": "stderr",
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(1724, 5)\n",
+      "(5,)\n",
+      "(1724, 128, 32, 1)\n",
+      "Train on 1724 samples, validate on 1150 samples\n",
+      "Epoch 1/11\n",
+      "1724/1724 [==============================] - ETA: 36s - loss: 2.3595 - accuracy: 0.406 - ETA: 19s - loss: 2.7648 - accuracy: 0.578 - ETA: 14s - loss: 3.0706 - accuracy: 0.541 - ETA: 11s - loss: 2.7080 - accuracy: 0.578 - ETA: 9s - loss: 2.4034 - accuracy: 0.581 - ETA: 8s - loss: 2.1790 - accuracy: 0.55 - ETA: 7s - loss: 2.0256 - accuracy: 0.55 - ETA: 6s - loss: 1.9185 - accuracy: 0.55 - ETA: 6s - loss: 1.8244 - accuracy: 0.56 - ETA: 6s - loss: 1.7247 - accuracy: 0.57 - ETA: 5s - loss: 1.6566 - accuracy: 0.59 - ETA: 5s - loss: 1.5882 - accuracy: 0.61 - ETA: 5s - loss: 1.5701 - accuracy: 0.60 - ETA: 5s - loss: 1.5059 - accuracy: 0.62 - ETA: 5s - loss: 1.4804 - accuracy: 0.61 - ETA: 4s - loss: 1.4343 - accuracy: 0.62 - ETA: 4s - loss: 1.3946 - accuracy: 0.63 - ETA: 4s - loss: 1.3560 - accuracy: 0.64 - ETA: 4s - loss: 1.3337 - accuracy: 0.64 - ETA: 4s - loss: 1.2899 - accuracy: 0.65 - ETA: 4s - loss: 1.2602 - accuracy: 0.66 - ETA: 3s - loss: 1.2327 - accuracy: 0.66 - ETA: 3s - loss: 1.2023 - accuracy: 0.67 - ETA: 3s - loss: 1.1818 - accuracy: 0.67 - ETA: 3s - loss: 1.1526 - accuracy: 0.68 - ETA: 3s - loss: 1.1283 - accuracy: 0.69 - ETA: 3s - loss: 1.1162 - accuracy: 0.69 - ETA: 3s - loss: 1.0979 - accuracy: 0.69 - ETA: 3s - loss: 1.0821 - accuracy: 0.70 - ETA: 3s - loss: 1.0586 - accuracy: 0.70 - ETA: 2s - loss: 1.0464 - accuracy: 0.71 - ETA: 2s - loss: 1.0292 - accuracy: 0.71 - ETA: 2s - loss: 1.0248 - accuracy: 0.71 - ETA: 2s - loss: 1.0142 - accuracy: 0.71 - ETA: 2s - loss: 0.9965 - accuracy: 0.72 - ETA: 2s - loss: 0.9897 - accuracy: 0.71 - ETA: 2s - loss: 0.9764 - accuracy: 0.72 - ETA: 1s - loss: 0.9598 - accuracy: 0.72 - ETA: 1s - loss: 0.9550 - accuracy: 0.72 - ETA: 1s - loss: 0.9404 - accuracy: 0.72 - ETA: 1s - loss: 0.9298 - accuracy: 0.72 - ETA: 1s - loss: 0.9251 - accuracy: 0.73 - ETA: 1s - loss: 0.9165 - accuracy: 0.73 - ETA: 1s - loss: 0.9122 - accuracy: 0.73 - ETA: 1s - loss: 0.9090 - accuracy: 0.73 - ETA: 0s - loss: 0.9061 - accuracy: 0.73 - ETA: 0s - loss: 0.9047 - accuracy: 0.73 - ETA: 0s - loss: 0.8941 - accuracy: 0.74 - ETA: 0s - loss: 0.8889 - accuracy: 0.73 - ETA: 0s - loss: 0.8792 - accuracy: 0.74 - ETA: 0s - loss: 0.8760 - accuracy: 0.74 - ETA: 0s - loss: 0.8765 - accuracy: 0.74 - ETA: 0s - loss: 0.8699 - accuracy: 0.74 - 8s 4ms/step - loss: 0.8663 - accuracy: 0.7448 - val_loss: 0.5761 - val_accuracy: 0.7748\n",
+      "Epoch 2/11\n",
+      "1724/1724 [==============================] - ETA: 7s - loss: 0.7468 - accuracy: 0.81 - ETA: 6s - loss: 0.6847 - accuracy: 0.81 - ETA: 5s - loss: 0.7795 - accuracy: 0.79 - ETA: 4s - loss: 0.7285 - accuracy: 0.78 - ETA: 4s - loss: 0.7104 - accuracy: 0.80 - ETA: 4s - loss: 0.6931 - accuracy: 0.80 - ETA: 4s - loss: 0.6639 - accuracy: 0.80 - ETA: 4s - loss: 0.6344 - accuracy: 0.81 - ETA: 4s - loss: 0.6135 - accuracy: 0.81 - ETA: 4s - loss: 0.6045 - accuracy: 0.81 - ETA: 4s - loss: 0.5995 - accuracy: 0.82 - ETA: 4s - loss: 0.6221 - accuracy: 0.81 - ETA: 4s - loss: 0.5942 - accuracy: 0.82 - ETA: 4s - loss: 0.5866 - accuracy: 0.81 - ETA: 4s - loss: 0.5690 - accuracy: 0.82 - ETA: 4s - loss: 0.5766 - accuracy: 0.82 - ETA: 4s - loss: 0.5942 - accuracy: 0.81 - ETA: 3s - loss: 0.5743 - accuracy: 0.82 - ETA: 3s - loss: 0.5661 - accuracy: 0.82 - ETA: 3s - loss: 0.5723 - accuracy: 0.82 - ETA: 3s - loss: 0.5736 - accuracy: 0.82 - ETA: 3s - loss: 0.5783 - accuracy: 0.81 - ETA: 3s - loss: 0.5734 - accuracy: 0.82 - ETA: 3s - loss: 0.5704 - accuracy: 0.82 - ETA: 3s - loss: 0.5603 - accuracy: 0.82 - ETA: 3s - loss: 0.5547 - accuracy: 0.82 - ETA: 3s - loss: 0.5681 - accuracy: 0.82 - ETA: 3s - loss: 0.5594 - accuracy: 0.82 - ETA: 3s - loss: 0.5455 - accuracy: 0.83 - ETA: 2s - loss: 0.5502 - accuracy: 0.83 - ETA: 2s - loss: 0.5460 - accuracy: 0.83 - ETA: 2s - loss: 0.5373 - accuracy: 0.83 - ETA: 2s - loss: 0.5390 - accuracy: 0.83 - ETA: 2s - loss: 0.5325 - accuracy: 0.83 - ETA: 2s - loss: 0.5227 - accuracy: 0.83 - ETA: 2s - loss: 0.5346 - accuracy: 0.83 - ETA: 2s - loss: 0.5405 - accuracy: 0.83 - ETA: 1s - loss: 0.5352 - accuracy: 0.83 - ETA: 1s - loss: 0.5375 - accuracy: 0.83 - ETA: 1s - loss: 0.5348 - accuracy: 0.83 - ETA: 1s - loss: 0.5290 - accuracy: 0.83 - ETA: 1s - loss: 0.5330 - accuracy: 0.83 - ETA: 1s - loss: 0.5413 - accuracy: 0.82 - ETA: 1s - loss: 0.5366 - accuracy: 0.82 - ETA: 1s - loss: 0.5325 - accuracy: 0.82 - ETA: 0s - loss: 0.5299 - accuracy: 0.83 - ETA: 0s - loss: 0.5326 - accuracy: 0.82 - ETA: 0s - loss: 0.5308 - accuracy: 0.82 - ETA: 0s - loss: 0.5323 - accuracy: 0.82 - ETA: 0s - loss: 0.5285 - accuracy: 0.83 - ETA: 0s - loss: 0.5287 - accuracy: 0.82 - ETA: 0s - loss: 0.5281 - accuracy: 0.82 - ETA: 0s - loss: 0.5228 - accuracy: 0.83 - 8s 5ms/step - loss: 0.5194 - accuracy: 0.8318 - val_loss: 0.4937 - val_accuracy: 0.8513\n",
+      "Epoch 3/11\n",
+      "1724/1724 [==============================] - ETA: 6s - loss: 0.4234 - accuracy: 0.84 - ETA: 5s - loss: 0.3679 - accuracy: 0.85 - ETA: 5s - loss: 0.4395 - accuracy: 0.84 - ETA: 5s - loss: 0.5246 - accuracy: 0.83 - ETA: 5s - loss: 0.5328 - accuracy: 0.82 - ETA: 5s - loss: 0.5089 - accuracy: 0.83 - ETA: 5s - loss: 0.5013 - accuracy: 0.83 - ETA: 5s - loss: 0.4835 - accuracy: 0.84 - ETA: 4s - loss: 0.4636 - accuracy: 0.85 - ETA: 4s - loss: 0.4422 - accuracy: 0.86 - ETA: 4s - loss: 0.4242 - accuracy: 0.86 - ETA: 4s - loss: 0.4079 - accuracy: 0.86 - ETA: 4s - loss: 0.4152 - accuracy: 0.86 - ETA: 4s - loss: 0.4217 - accuracy: 0.86 - ETA: 4s - loss: 0.4193 - accuracy: 0.86 - ETA: 4s - loss: 0.4256 - accuracy: 0.86 - ETA: 4s - loss: 0.4257 - accuracy: 0.86 - ETA: 4s - loss: 0.4338 - accuracy: 0.86 - ETA: 4s - loss: 0.4550 - accuracy: 0.85 - ETA: 4s - loss: 0.4658 - accuracy: 0.85 - ETA: 3s - loss: 0.4654 - accuracy: 0.85 - ETA: 3s - loss: 0.4639 - accuracy: 0.84 - ETA: 3s - loss: 0.4654 - accuracy: 0.84 - ETA: 3s - loss: 0.4790 - accuracy: 0.84 - ETA: 3s - loss: 0.4755 - accuracy: 0.84 - ETA: 3s - loss: 0.4745 - accuracy: 0.84 - ETA: 3s - loss: 0.4776 - accuracy: 0.84 - ETA: 3s - loss: 0.4744 - accuracy: 0.84 - ETA: 2s - loss: 0.4674 - accuracy: 0.84 - ETA: 2s - loss: 0.4676 - accuracy: 0.84 - ETA: 2s - loss: 0.4724 - accuracy: 0.84 - ETA: 2s - loss: 0.4680 - accuracy: 0.84 - ETA: 2s - loss: 0.4632 - accuracy: 0.85 - ETA: 2s - loss: 0.4605 - accuracy: 0.85 - ETA: 2s - loss: 0.4636 - accuracy: 0.85 - ETA: 2s - loss: 0.4616 - accuracy: 0.85 - ETA: 1s - loss: 0.4548 - accuracy: 0.85 - ETA: 1s - loss: 0.4591 - accuracy: 0.85 - ETA: 1s - loss: 0.4539 - accuracy: 0.85 - ETA: 1s - loss: 0.4541 - accuracy: 0.85 - ETA: 1s - loss: 0.4543 - accuracy: 0.85 - ETA: 1s - loss: 0.4526 - accuracy: 0.85 - ETA: 1s - loss: 0.4483 - accuracy: 0.85 - ETA: 1s - loss: 0.4511 - accuracy: 0.85 - ETA: 1s - loss: 0.4509 - accuracy: 0.85 - ETA: 0s - loss: 0.4507 - accuracy: 0.85 - ETA: 0s - loss: 0.4588 - accuracy: 0.85 - ETA: 0s - loss: 0.4572 - accuracy: 0.85 - ETA: 0s - loss: 0.4541 - accuracy: 0.85 - ETA: 0s - loss: 0.4516 - accuracy: 0.85 - ETA: 0s - loss: 0.4545 - accuracy: 0.85 - ETA: 0s - loss: 0.4554 - accuracy: 0.84 - ETA: 0s - loss: 0.4524 - accuracy: 0.84 - 8s 5ms/step - loss: 0.4519 - accuracy: 0.8492 - val_loss: 0.4259 - val_accuracy: 0.8678\n",
+      "Epoch 4/11\n"
+     ]
+    },
+    {
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+      "1724/1724 [==============================] - ETA: 10s - loss: 0.4947 - accuracy: 0.843 - ETA: 8s - loss: 0.3784 - accuracy: 0.875 - ETA: 11s - loss: 0.4152 - accuracy: 0.854 - ETA: 10s - loss: 0.4073 - accuracy: 0.843 - ETA: 9s - loss: 0.3941 - accuracy: 0.856 - ETA: 8s - loss: 0.3931 - accuracy: 0.84 - ETA: 7s - loss: 0.3798 - accuracy: 0.84 - ETA: 6s - loss: 0.3702 - accuracy: 0.85 - ETA: 6s - loss: 0.3820 - accuracy: 0.85 - ETA: 6s - loss: 0.3743 - accuracy: 0.85 - ETA: 5s - loss: 0.3750 - accuracy: 0.85 - ETA: 5s - loss: 0.3638 - accuracy: 0.85 - ETA: 5s - loss: 0.3679 - accuracy: 0.85 - ETA: 5s - loss: 0.3704 - accuracy: 0.85 - ETA: 5s - loss: 0.3887 - accuracy: 0.85 - ETA: 5s - loss: 0.3779 - accuracy: 0.85 - ETA: 4s - loss: 0.3747 - accuracy: 0.85 - ETA: 4s - loss: 0.3747 - accuracy: 0.85 - ETA: 4s - loss: 0.3684 - accuracy: 0.86 - ETA: 4s - loss: 0.3627 - accuracy: 0.86 - ETA: 4s - loss: 0.3569 - accuracy: 0.86 - ETA: 3s - loss: 0.3563 - accuracy: 0.86 - ETA: 3s - loss: 0.3653 - accuracy: 0.85 - ETA: 3s - loss: 0.3742 - accuracy: 0.85 - ETA: 3s - loss: 0.3695 - accuracy: 0.86 - ETA: 3s - loss: 0.3642 - accuracy: 0.86 - ETA: 3s - loss: 0.3676 - accuracy: 0.86 - ETA: 2s - loss: 0.3615 - accuracy: 0.86 - ETA: 2s - loss: 0.3613 - accuracy: 0.86 - ETA: 2s - loss: 0.3668 - accuracy: 0.85 - ETA: 2s - loss: 0.3694 - accuracy: 0.85 - ETA: 2s - loss: 0.3700 - accuracy: 0.85 - ETA: 2s - loss: 0.3635 - accuracy: 0.86 - ETA: 2s - loss: 0.3642 - accuracy: 0.86 - ETA: 2s - loss: 0.3583 - accuracy: 0.86 - ETA: 1s - loss: 0.3595 - accuracy: 0.86 - ETA: 1s - loss: 0.3563 - accuracy: 0.86 - ETA: 1s - loss: 0.3559 - accuracy: 0.86 - ETA: 1s - loss: 0.3537 - accuracy: 0.86 - ETA: 1s - loss: 0.3530 - accuracy: 0.86 - ETA: 1s - loss: 0.3490 - accuracy: 0.86 - ETA: 1s - loss: 0.3520 - accuracy: 0.86 - ETA: 1s - loss: 0.3555 - accuracy: 0.86 - ETA: 1s - loss: 0.3539 - accuracy: 0.86 - ETA: 0s - loss: 0.3567 - accuracy: 0.86 - ETA: 0s - loss: 0.3603 - accuracy: 0.86 - ETA: 0s - loss: 0.3625 - accuracy: 0.86 - ETA: 0s - loss: 0.3637 - accuracy: 0.86 - ETA: 0s - loss: 0.3665 - accuracy: 0.86 - ETA: 0s - loss: 0.3674 - accuracy: 0.86 - ETA: 0s - loss: 0.3680 - accuracy: 0.85 - ETA: 0s - loss: 0.3709 - accuracy: 0.85 - ETA: 0s - loss: 0.3786 - accuracy: 0.85 - 7s 4ms/step - loss: 0.3814 - accuracy: 0.8561 - val_loss: 0.4127 - val_accuracy: 0.8670\n",
+      "Epoch 5/11\n",
+      "1724/1724 [==============================] - ETA: 9s - loss: 0.3703 - accuracy: 0.84 - ETA: 6s - loss: 0.3603 - accuracy: 0.85 - ETA: 7s - loss: 0.3071 - accuracy: 0.88 - ETA: 8s - loss: 0.3665 - accuracy: 0.86 - ETA: 8s - loss: 0.3796 - accuracy: 0.85 - ETA: 8s - loss: 0.4046 - accuracy: 0.84 - ETA: 7s - loss: 0.4030 - accuracy: 0.84 - ETA: 7s - loss: 0.4089 - accuracy: 0.85 - ETA: 7s - loss: 0.3865 - accuracy: 0.86 - ETA: 8s - loss: 0.3783 - accuracy: 0.87 - ETA: 8s - loss: 0.3775 - accuracy: 0.87 - ETA: 7s - loss: 0.3722 - accuracy: 0.87 - ETA: 7s - loss: 0.3680 - accuracy: 0.86 - ETA: 7s - loss: 0.3684 - accuracy: 0.87 - ETA: 6s - loss: 0.3773 - accuracy: 0.86 - ETA: 6s - loss: 0.3689 - accuracy: 0.87 - ETA: 6s - loss: 0.3770 - accuracy: 0.86 - ETA: 5s - loss: 0.3730 - accuracy: 0.86 - ETA: 5s - loss: 0.3762 - accuracy: 0.86 - ETA: 5s - loss: 0.3838 - accuracy: 0.86 - ETA: 5s - loss: 0.3851 - accuracy: 0.86 - ETA: 5s - loss: 0.3795 - accuracy: 0.87 - ETA: 5s - loss: 0.3894 - accuracy: 0.86 - ETA: 5s - loss: 0.3853 - accuracy: 0.86 - ETA: 4s - loss: 0.3865 - accuracy: 0.86 - ETA: 4s - loss: 0.3988 - accuracy: 0.86 - ETA: 4s - loss: 0.3944 - accuracy: 0.86 - ETA: 4s - loss: 0.3918 - accuracy: 0.86 - ETA: 4s - loss: 0.3911 - accuracy: 0.86 - ETA: 3s - loss: 0.3873 - accuracy: 0.86 - ETA: 3s - loss: 0.3872 - accuracy: 0.86 - ETA: 3s - loss: 0.3846 - accuracy: 0.86 - ETA: 3s - loss: 0.3852 - accuracy: 0.87 - ETA: 3s - loss: 0.3827 - accuracy: 0.87 - ETA: 2s - loss: 0.3885 - accuracy: 0.86 - ETA: 2s - loss: 0.3833 - accuracy: 0.87 - ETA: 2s - loss: 0.3853 - accuracy: 0.87 - ETA: 2s - loss: 0.3821 - accuracy: 0.87 - ETA: 2s - loss: 0.3812 - accuracy: 0.87 - ETA: 2s - loss: 0.3766 - accuracy: 0.87 - ETA: 1s - loss: 0.3779 - accuracy: 0.87 - ETA: 1s - loss: 0.3761 - accuracy: 0.87 - ETA: 1s - loss: 0.3724 - accuracy: 0.87 - ETA: 1s - loss: 0.3685 - accuracy: 0.87 - ETA: 1s - loss: 0.3698 - accuracy: 0.87 - ETA: 1s - loss: 0.3670 - accuracy: 0.87 - ETA: 0s - loss: 0.3633 - accuracy: 0.87 - ETA: 0s - loss: 0.3611 - accuracy: 0.87 - ETA: 0s - loss: 0.3616 - accuracy: 0.87 - ETA: 0s - loss: 0.3602 - accuracy: 0.87 - ETA: 0s - loss: 0.3571 - accuracy: 0.87 - ETA: 0s - loss: 0.3538 - accuracy: 0.87 - ETA: 0s - loss: 0.3522 - accuracy: 0.87 - 9s 5ms/step - loss: 0.3503 - accuracy: 0.8788 - val_loss: 0.4078 - val_accuracy: 0.8800\n",
+      "Epoch 6/11\n",
+      "1724/1724 [==============================] - ETA: 6s - loss: 0.1030 - accuracy: 0.96 - ETA: 5s - loss: 0.0982 - accuracy: 0.96 - ETA: 5s - loss: 0.1751 - accuracy: 0.92 - ETA: 5s - loss: 0.2203 - accuracy: 0.88 - ETA: 4s - loss: 0.2887 - accuracy: 0.87 - ETA: 4s - loss: 0.2916 - accuracy: 0.88 - ETA: 4s - loss: 0.2926 - accuracy: 0.87 - ETA: 3s - loss: 0.2922 - accuracy: 0.87 - ETA: 3s - loss: 0.2846 - accuracy: 0.88 - ETA: 3s - loss: 0.2725 - accuracy: 0.89 - ETA: 3s - loss: 0.2744 - accuracy: 0.88 - ETA: 3s - loss: 0.2824 - accuracy: 0.88 - ETA: 3s - loss: 0.2806 - accuracy: 0.88 - ETA: 3s - loss: 0.2775 - accuracy: 0.88 - ETA: 3s - loss: 0.2758 - accuracy: 0.88 - ETA: 3s - loss: 0.2753 - accuracy: 0.88 - ETA: 3s - loss: 0.2783 - accuracy: 0.88 - ETA: 3s - loss: 0.2693 - accuracy: 0.89 - ETA: 3s - loss: 0.2679 - accuracy: 0.89 - ETA: 3s - loss: 0.2672 - accuracy: 0.89 - ETA: 2s - loss: 0.2646 - accuracy: 0.89 - ETA: 2s - loss: 0.2708 - accuracy: 0.89 - ETA: 2s - loss: 0.2687 - accuracy: 0.89 - ETA: 2s - loss: 0.2673 - accuracy: 0.89 - ETA: 2s - loss: 0.2678 - accuracy: 0.89 - ETA: 2s - loss: 0.2782 - accuracy: 0.88 - ETA: 2s - loss: 0.2899 - accuracy: 0.88 - ETA: 2s - loss: 0.2891 - accuracy: 0.88 - ETA: 2s - loss: 0.2954 - accuracy: 0.88 - ETA: 2s - loss: 0.3099 - accuracy: 0.88 - ETA: 2s - loss: 0.3164 - accuracy: 0.87 - ETA: 1s - loss: 0.3206 - accuracy: 0.88 - ETA: 1s - loss: 0.3214 - accuracy: 0.87 - ETA: 1s - loss: 0.3193 - accuracy: 0.88 - ETA: 1s - loss: 0.3175 - accuracy: 0.88 - ETA: 1s - loss: 0.3175 - accuracy: 0.88 - ETA: 1s - loss: 0.3186 - accuracy: 0.88 - ETA: 1s - loss: 0.3174 - accuracy: 0.88 - ETA: 1s - loss: 0.3167 - accuracy: 0.88 - ETA: 1s - loss: 0.3122 - accuracy: 0.88 - ETA: 1s - loss: 0.3120 - accuracy: 0.88 - ETA: 1s - loss: 0.3093 - accuracy: 0.88 - ETA: 0s - loss: 0.3100 - accuracy: 0.88 - ETA: 0s - loss: 0.3111 - accuracy: 0.88 - ETA: 0s - loss: 0.3104 - accuracy: 0.88 - ETA: 0s - loss: 0.3086 - accuracy: 0.88 - ETA: 0s - loss: 0.3146 - accuracy: 0.88 - ETA: 0s - loss: 0.3121 - accuracy: 0.88 - ETA: 0s - loss: 0.3127 - accuracy: 0.88 - ETA: 0s - loss: 0.3106 - accuracy: 0.88 - ETA: 0s - loss: 0.3088 - accuracy: 0.88 - ETA: 0s - loss: 0.3079 - accuracy: 0.88 - ETA: 0s - loss: 0.3052 - accuracy: 0.88 - 6s 3ms/step - loss: 0.3051 - accuracy: 0.8892 - val_loss: 0.3952 - val_accuracy: 0.8791\n",
+      "Epoch 7/11\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Train on 120 samples, validate on 80 samples\n",
-      "Epoch 1/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 10.5543 - accuracy: 0.156 - ETA: 0s - loss: 13.1522 - accuracy: 0.187 - 0s 4ms/step - loss: 13.1286 - accuracy: 0.2250 - val_loss: 10.6699 - val_accuracy: 0.2250\n",
-      "Epoch 2/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 11.6056 - accuracy: 0.125 - 0s 400us/step - loss: 7.1354 - accuracy: 0.3417 - val_loss: 3.2588 - val_accuracy: 0.4250\n",
-      "Epoch 3/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 1.6056 - accuracy: 0.65 - 0s 291us/step - loss: 3.1149 - accuracy: 0.5333 - val_loss: 3.6588 - val_accuracy: 0.5375\n",
-      "Epoch 4/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 2.7034 - accuracy: 0.53 - ETA: 0s - loss: 1.9968 - accuracy: 0.59 - 0s 1ms/step - loss: 1.9487 - accuracy: 0.6000 - val_loss: 5.2240 - val_accuracy: 0.3750\n",
-      "Epoch 5/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 2.5713 - accuracy: 0.43 - 0s 604us/step - loss: 1.8675 - accuracy: 0.5333 - val_loss: 3.2138 - val_accuracy: 0.5375\n",
-      "Epoch 6/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 1.6069 - accuracy: 0.62 - 0s 690us/step - loss: 0.9960 - accuracy: 0.7083 - val_loss: 3.9938 - val_accuracy: 0.5000\n",
-      "Epoch 7/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.9049 - accuracy: 0.71 - 0s 731us/step - loss: 1.1296 - accuracy: 0.7333 - val_loss: 2.6453 - val_accuracy: 0.5000\n",
-      "Epoch 8/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.4070 - accuracy: 0.81 - 0s 341us/step - loss: 0.6198 - accuracy: 0.7833 - val_loss: 3.1217 - val_accuracy: 0.4625\n",
-      "Epoch 9/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.7661 - accuracy: 0.81 - 0s 668us/step - loss: 0.5613 - accuracy: 0.7833 - val_loss: 3.1847 - val_accuracy: 0.5250\n",
-      "Epoch 10/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.2767 - accuracy: 0.87 - 0s 457us/step - loss: 0.4454 - accuracy: 0.8417 - val_loss: 3.0486 - val_accuracy: 0.5500\n",
-      "Epoch 11/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1627 - accuracy: 0.96 - 0s 499us/step - loss: 0.2569 - accuracy: 0.9250 - val_loss: 2.8507 - val_accuracy: 0.4750\n",
-      "Epoch 12/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.2446 - accuracy: 0.87 - 0s 399us/step - loss: 0.2927 - accuracy: 0.8917 - val_loss: 2.9276 - val_accuracy: 0.5250\n",
-      "Epoch 13/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1799 - accuracy: 0.93 - 0s 389us/step - loss: 0.3121 - accuracy: 0.8917 - val_loss: 2.7591 - val_accuracy: 0.5875\n",
-      "Epoch 14/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1356 - accuracy: 0.93 - 0s 822us/step - loss: 0.1590 - accuracy: 0.9417 - val_loss: 2.3186 - val_accuracy: 0.5500\n",
-      "Epoch 15/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.3103 - accuracy: 0.84 - 0s 316us/step - loss: 0.2310 - accuracy: 0.9083 - val_loss: 2.4051 - val_accuracy: 0.5250\n",
-      "Epoch 16/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1280 - accuracy: 1.00 - 0s 316us/step - loss: 0.1215 - accuracy: 0.9750 - val_loss: 2.4905 - val_accuracy: 0.5625\n",
-      "Epoch 17/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1392 - accuracy: 0.93 - 0s 324us/step - loss: 0.0994 - accuracy: 0.9667 - val_loss: 2.3728 - val_accuracy: 0.5000\n",
-      "Epoch 18/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0993 - accuracy: 0.96 - 0s 532us/step - loss: 0.0951 - accuracy: 0.9750 - val_loss: 2.3670 - val_accuracy: 0.5625\n",
-      "Epoch 19/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0881 - accuracy: 1.00 - 0s 1ms/step - loss: 0.0765 - accuracy: 0.9750 - val_loss: 2.5819 - val_accuracy: 0.6000\n",
-      "Epoch 20/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0365 - accuracy: 1.00 - 0s 589us/step - loss: 0.0925 - accuracy: 0.9750 - val_loss: 2.5205 - val_accuracy: 0.5625\n",
-      "Epoch 21/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0471 - accuracy: 1.00 - 0s 615us/step - loss: 0.0590 - accuracy: 0.9917 - val_loss: 2.3904 - val_accuracy: 0.5250\n",
-      "Epoch 22/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0941 - accuracy: 1.00 - 0s 490us/step - loss: 0.0592 - accuracy: 1.0000 - val_loss: 2.4980 - val_accuracy: 0.5625\n",
-      "Epoch 23/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0386 - accuracy: 1.00 - 0s 1ms/step - loss: 0.0419 - accuracy: 1.0000 - val_loss: 2.6462 - val_accuracy: 0.5875\n",
-      "Epoch 24/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0634 - accuracy: 0.96 - 0s 673us/step - loss: 0.0425 - accuracy: 0.9917 - val_loss: 2.4429 - val_accuracy: 0.5750\n",
-      "Epoch 25/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0354 - accuracy: 1.00 - 0s 540us/step - loss: 0.0365 - accuracy: 1.0000 - val_loss: 2.3979 - val_accuracy: 0.5875\n",
-      "Epoch 26/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0229 - accuracy: 1.00 - 0s 490us/step - loss: 0.0309 - accuracy: 1.0000 - val_loss: 2.4975 - val_accuracy: 0.5875\n",
-      "Epoch 27/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0265 - accuracy: 1.00 - 0s 598us/step - loss: 0.0282 - accuracy: 1.0000 - val_loss: 2.4750 - val_accuracy: 0.5875\n",
-      "Epoch 28/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0116 - accuracy: 1.00 - 0s 524us/step - loss: 0.0229 - accuracy: 1.0000 - val_loss: 2.4510 - val_accuracy: 0.5875\n",
-      "Epoch 29/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0167 - accuracy: 1.00 - 0s 742us/step - loss: 0.0223 - accuracy: 1.0000 - val_loss: 2.4469 - val_accuracy: 0.5875\n",
-      "Epoch 30/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0180 - accuracy: 1.00 - 0s 715us/step - loss: 0.0208 - accuracy: 1.0000 - val_loss: 2.4858 - val_accuracy: 0.6000\n",
-      "Epoch 31/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0212 - accuracy: 1.00 - 0s 332us/step - loss: 0.0193 - accuracy: 1.0000 - val_loss: 2.5032 - val_accuracy: 0.6000\n",
-      "Epoch 32/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0135 - accuracy: 1.00 - 0s 349us/step - loss: 0.0183 - accuracy: 1.0000 - val_loss: 2.5030 - val_accuracy: 0.5750\n",
-      "Epoch 33/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0156 - accuracy: 1.00 - 0s 574us/step - loss: 0.0173 - accuracy: 1.0000 - val_loss: 2.4789 - val_accuracy: 0.5750\n",
-      "Epoch 34/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0106 - accuracy: 1.00 - 0s 509us/step - loss: 0.0163 - accuracy: 1.0000 - val_loss: 2.4854 - val_accuracy: 0.5750\n",
-      "Epoch 35/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0162 - accuracy: 1.00 - 0s 557us/step - loss: 0.0158 - accuracy: 1.0000 - val_loss: 2.5064 - val_accuracy: 0.5750\n",
-      "Epoch 36/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0254 - accuracy: 1.00 - 0s 291us/step - loss: 0.0154 - accuracy: 1.0000 - val_loss: 2.4955 - val_accuracy: 0.5875\n",
-      "Epoch 37/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0161 - accuracy: 1.00 - 0s 241us/step - loss: 0.0148 - accuracy: 1.0000 - val_loss: 2.5050 - val_accuracy: 0.5875\n",
-      "Epoch 38/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0164 - accuracy: 1.00 - ETA: 0s - loss: 0.0161 - accuracy: 1.00 - 0s 1ms/step - loss: 0.0140 - accuracy: 1.0000 - val_loss: 2.4887 - val_accuracy: 0.5875\n",
-      "Epoch 39/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0065 - accuracy: 1.00 - 0s 407us/step - loss: 0.0133 - accuracy: 1.0000 - val_loss: 2.4986 - val_accuracy: 0.5875\n",
-      "Epoch 40/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0184 - accuracy: 1.00 - 0s 416us/step - loss: 0.0131 - accuracy: 1.0000 - val_loss: 2.5002 - val_accuracy: 0.5875\n",
-      "Epoch 41/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0135 - accuracy: 1.00 - ETA: 0s - loss: 0.0132 - accuracy: 1.00 - 0s 1ms/step - loss: 0.0123 - accuracy: 1.0000 - val_loss: 2.5144 - val_accuracy: 0.5875\n",
-      "Epoch 42/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0172 - accuracy: 1.00 - 0s 312us/step - loss: 0.0121 - accuracy: 1.0000 - val_loss: 2.5238 - val_accuracy: 0.5875\n",
-      "Epoch 43/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0121 - accuracy: 1.00 - 0s 339us/step - loss: 0.0116 - accuracy: 1.0000 - val_loss: 2.5055 - val_accuracy: 0.5875\n"
+      "1724/1724 [==============================] - ETA: 4s - loss: 0.3489 - accuracy: 0.87 - ETA: 4s - loss: 0.3208 - accuracy: 0.84 - ETA: 5s - loss: 0.2521 - accuracy: 0.88 - ETA: 5s - loss: 0.2059 - accuracy: 0.91 - ETA: 5s - loss: 0.2069 - accuracy: 0.91 - ETA: 4s - loss: 0.1927 - accuracy: 0.91 - ETA: 4s - loss: 0.1948 - accuracy: 0.92 - ETA: 4s - loss: 0.1996 - accuracy: 0.92 - ETA: 4s - loss: 0.2011 - accuracy: 0.92 - ETA: 4s - loss: 0.2119 - accuracy: 0.92 - ETA: 4s - loss: 0.2190 - accuracy: 0.92 - ETA: 4s - loss: 0.2183 - accuracy: 0.92 - ETA: 4s - loss: 0.2147 - accuracy: 0.92 - ETA: 4s - loss: 0.2292 - accuracy: 0.91 - ETA: 3s - loss: 0.2272 - accuracy: 0.92 - ETA: 3s - loss: 0.2250 - accuracy: 0.92 - ETA: 3s - loss: 0.2320 - accuracy: 0.92 - ETA: 3s - loss: 0.2310 - accuracy: 0.92 - ETA: 3s - loss: 0.2293 - accuracy: 0.92 - ETA: 3s - loss: 0.2312 - accuracy: 0.92 - ETA: 3s - loss: 0.2280 - accuracy: 0.91 - ETA: 3s - loss: 0.2303 - accuracy: 0.91 - ETA: 3s - loss: 0.2306 - accuracy: 0.91 - ETA: 3s - loss: 0.2329 - accuracy: 0.91 - ETA: 3s - loss: 0.2310 - accuracy: 0.92 - ETA: 3s - loss: 0.2282 - accuracy: 0.92 - ETA: 2s - loss: 0.2310 - accuracy: 0.92 - ETA: 2s - loss: 0.2289 - accuracy: 0.92 - ETA: 2s - loss: 0.2350 - accuracy: 0.92 - ETA: 2s - loss: 0.2326 - accuracy: 0.92 - ETA: 2s - loss: 0.2289 - accuracy: 0.92 - ETA: 2s - loss: 0.2276 - accuracy: 0.92 - ETA: 2s - loss: 0.2240 - accuracy: 0.92 - ETA: 2s - loss: 0.2283 - accuracy: 0.92 - ETA: 2s - loss: 0.2350 - accuracy: 0.92 - ETA: 2s - loss: 0.2333 - accuracy: 0.92 - ETA: 2s - loss: 0.2326 - accuracy: 0.92 - ETA: 1s - loss: 0.2332 - accuracy: 0.92 - ETA: 1s - loss: 0.2315 - accuracy: 0.91 - ETA: 1s - loss: 0.2363 - accuracy: 0.91 - ETA: 1s - loss: 0.2390 - accuracy: 0.91 - ETA: 1s - loss: 0.2394 - accuracy: 0.91 - ETA: 1s - loss: 0.2384 - accuracy: 0.91 - ETA: 1s - loss: 0.2409 - accuracy: 0.91 - ETA: 1s - loss: 0.2399 - accuracy: 0.91 - ETA: 0s - loss: 0.2370 - accuracy: 0.91 - ETA: 0s - loss: 0.2395 - accuracy: 0.91 - ETA: 0s - loss: 0.2428 - accuracy: 0.91 - ETA: 0s - loss: 0.2396 - accuracy: 0.91 - ETA: 0s - loss: 0.2406 - accuracy: 0.91 - ETA: 0s - loss: 0.2401 - accuracy: 0.90 - ETA: 0s - loss: 0.2422 - accuracy: 0.90 - ETA: 0s - loss: 0.2470 - accuracy: 0.90 - 8s 4ms/step - loss: 0.2486 - accuracy: 0.9089 - val_loss: 0.3677 - val_accuracy: 0.8704\n",
+      "Epoch 8/11\n",
+      "1724/1724 [==============================] - ETA: 3s - loss: 0.3543 - accuracy: 0.90 - ETA: 9s - loss: 0.3166 - accuracy: 0.87 - ETA: 7s - loss: 0.3175 - accuracy: 0.86 - ETA: 7s - loss: 0.2711 - accuracy: 0.89 - ETA: 7s - loss: 0.2588 - accuracy: 0.89 - ETA: 6s - loss: 0.2404 - accuracy: 0.90 - ETA: 6s - loss: 0.2240 - accuracy: 0.91 - ETA: 5s - loss: 0.2115 - accuracy: 0.91 - ETA: 5s - loss: 0.2424 - accuracy: 0.90 - ETA: 5s - loss: 0.2483 - accuracy: 0.90 - ETA: 5s - loss: 0.2486 - accuracy: 0.90 - ETA: 5s - loss: 0.2442 - accuracy: 0.90 - ETA: 4s - loss: 0.2489 - accuracy: 0.90 - ETA: 4s - loss: 0.2375 - accuracy: 0.90 - ETA: 4s - loss: 0.2317 - accuracy: 0.91 - ETA: 4s - loss: 0.2277 - accuracy: 0.91 - ETA: 4s - loss: 0.2255 - accuracy: 0.91 - ETA: 3s - loss: 0.2372 - accuracy: 0.90 - ETA: 3s - loss: 0.2323 - accuracy: 0.91 - ETA: 3s - loss: 0.2374 - accuracy: 0.90 - ETA: 3s - loss: 0.2304 - accuracy: 0.91 - ETA: 3s - loss: 0.2275 - accuracy: 0.91 - ETA: 3s - loss: 0.2240 - accuracy: 0.91 - ETA: 3s - loss: 0.2321 - accuracy: 0.91 - ETA: 3s - loss: 0.2331 - accuracy: 0.90 - ETA: 3s - loss: 0.2353 - accuracy: 0.90 - ETA: 3s - loss: 0.2322 - accuracy: 0.90 - ETA: 2s - loss: 0.2295 - accuracy: 0.90 - ETA: 2s - loss: 0.2273 - accuracy: 0.90 - ETA: 2s - loss: 0.2278 - accuracy: 0.91 - ETA: 2s - loss: 0.2291 - accuracy: 0.90 - ETA: 2s - loss: 0.2266 - accuracy: 0.91 - ETA: 2s - loss: 0.2247 - accuracy: 0.91 - ETA: 2s - loss: 0.2229 - accuracy: 0.91 - ETA: 2s - loss: 0.2237 - accuracy: 0.91 - ETA: 1s - loss: 0.2225 - accuracy: 0.91 - ETA: 1s - loss: 0.2211 - accuracy: 0.91 - ETA: 1s - loss: 0.2242 - accuracy: 0.91 - ETA: 1s - loss: 0.2232 - accuracy: 0.91 - ETA: 1s - loss: 0.2196 - accuracy: 0.91 - ETA: 1s - loss: 0.2180 - accuracy: 0.91 - ETA: 1s - loss: 0.2174 - accuracy: 0.91 - ETA: 1s - loss: 0.2178 - accuracy: 0.91 - ETA: 1s - loss: 0.2148 - accuracy: 0.91 - ETA: 0s - loss: 0.2131 - accuracy: 0.91 - ETA: 0s - loss: 0.2177 - accuracy: 0.91 - ETA: 0s - loss: 0.2201 - accuracy: 0.91 - ETA: 0s - loss: 0.2198 - accuracy: 0.91 - ETA: 0s - loss: 0.2191 - accuracy: 0.91 - ETA: 0s - loss: 0.2199 - accuracy: 0.91 - ETA: 0s - loss: 0.2227 - accuracy: 0.91 - ETA: 0s - loss: 0.2201 - accuracy: 0.91 - ETA: 0s - loss: 0.2206 - accuracy: 0.91 - 7s 4ms/step - loss: 0.2219 - accuracy: 0.9130 - val_loss: 0.4182 - val_accuracy: 0.8791\n",
+      "Epoch 9/11\n",
+      "1724/1724 [==============================] - ETA: 7s - loss: 0.0716 - accuracy: 0.96 - ETA: 6s - loss: 0.0964 - accuracy: 0.96 - ETA: 5s - loss: 0.1440 - accuracy: 0.93 - ETA: 5s - loss: 0.1362 - accuracy: 0.94 - ETA: 4s - loss: 0.1837 - accuracy: 0.92 - ETA: 4s - loss: 0.1595 - accuracy: 0.93 - ETA: 4s - loss: 0.1693 - accuracy: 0.93 - ETA: 3s - loss: 0.1577 - accuracy: 0.94 - ETA: 3s - loss: 0.1704 - accuracy: 0.93 - ETA: 3s - loss: 0.1770 - accuracy: 0.93 - ETA: 3s - loss: 0.1829 - accuracy: 0.93 - ETA: 3s - loss: 0.1824 - accuracy: 0.93 - ETA: 3s - loss: 0.1817 - accuracy: 0.93 - ETA: 3s - loss: 0.1773 - accuracy: 0.94 - ETA: 3s - loss: 0.1825 - accuracy: 0.94 - ETA: 3s - loss: 0.1825 - accuracy: 0.93 - ETA: 3s - loss: 0.1878 - accuracy: 0.93 - ETA: 2s - loss: 0.1941 - accuracy: 0.93 - ETA: 2s - loss: 0.2163 - accuracy: 0.92 - ETA: 2s - loss: 0.2210 - accuracy: 0.92 - ETA: 2s - loss: 0.2162 - accuracy: 0.92 - ETA: 2s - loss: 0.2099 - accuracy: 0.92 - ETA: 2s - loss: 0.2063 - accuracy: 0.92 - ETA: 2s - loss: 0.2100 - accuracy: 0.92 - ETA: 2s - loss: 0.2177 - accuracy: 0.92 - ETA: 2s - loss: 0.2190 - accuracy: 0.92 - ETA: 2s - loss: 0.2170 - accuracy: 0.92 - ETA: 2s - loss: 0.2193 - accuracy: 0.92 - ETA: 1s - loss: 0.2171 - accuracy: 0.92 - ETA: 1s - loss: 0.2224 - accuracy: 0.92 - ETA: 1s - loss: 0.2197 - accuracy: 0.92 - ETA: 1s - loss: 0.2183 - accuracy: 0.92 - ETA: 1s - loss: 0.2163 - accuracy: 0.92 - ETA: 1s - loss: 0.2133 - accuracy: 0.92 - ETA: 1s - loss: 0.2121 - accuracy: 0.92 - ETA: 1s - loss: 0.2082 - accuracy: 0.92 - ETA: 1s - loss: 0.2033 - accuracy: 0.92 - ETA: 1s - loss: 0.2011 - accuracy: 0.92 - ETA: 1s - loss: 0.2006 - accuracy: 0.92 - ETA: 1s - loss: 0.1992 - accuracy: 0.92 - ETA: 1s - loss: 0.1992 - accuracy: 0.92 - ETA: 1s - loss: 0.1990 - accuracy: 0.92 - ETA: 1s - loss: 0.1961 - accuracy: 0.92 - ETA: 0s - loss: 0.1984 - accuracy: 0.92 - ETA: 0s - loss: 0.1979 - accuracy: 0.92 - ETA: 0s - loss: 0.1985 - accuracy: 0.92 - ETA: 0s - loss: 0.1966 - accuracy: 0.92 - ETA: 0s - loss: 0.2001 - accuracy: 0.92 - ETA: 0s - loss: 0.2039 - accuracy: 0.92 - ETA: 0s - loss: 0.2023 - accuracy: 0.92 - ETA: 0s - loss: 0.2009 - accuracy: 0.92 - ETA: 0s - loss: 0.2005 - accuracy: 0.92 - ETA: 0s - loss: 0.2011 - accuracy: 0.92 - 7s 4ms/step - loss: 0.1997 - accuracy: 0.9234 - val_loss: 0.3574 - val_accuracy: 0.8913\n",
+      "Epoch 10/11\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 44/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0079 - accuracy: 1.00 - 0s 374us/step - loss: 0.0113 - accuracy: 1.0000 - val_loss: 2.4862 - val_accuracy: 0.5875\n",
-      "Epoch 45/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0079 - accuracy: 1.00 - 0s 291us/step - loss: 0.0108 - accuracy: 1.0000 - val_loss: 2.5043 - val_accuracy: 0.5875\n",
-      "Epoch 46/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0105 - accuracy: 1.00 - 0s 283us/step - loss: 0.0107 - accuracy: 1.0000 - val_loss: 2.5234 - val_accuracy: 0.5875\n",
-      "Epoch 47/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0160 - accuracy: 1.00 - ETA: 0s - loss: 0.0127 - accuracy: 1.00 - 0s 1ms/step - loss: 0.0105 - accuracy: 1.0000 - val_loss: 2.5090 - val_accuracy: 0.5875\n",
-      "Epoch 48/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0088 - accuracy: 1.00 - 0s 399us/step - loss: 0.0099 - accuracy: 1.0000 - val_loss: 2.5225 - val_accuracy: 0.5875\n",
-      "Epoch 49/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0080 - accuracy: 1.00 - 0s 374us/step - loss: 0.0097 - accuracy: 1.0000 - val_loss: 2.5271 - val_accuracy: 0.5875\n",
-      "Epoch 50/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0085 - accuracy: 1.00 - 0s 989us/step - loss: 0.0094 - accuracy: 1.0000 - val_loss: 2.5235 - val_accuracy: 0.5875\n"
+      "1724/1724 [==============================] - ETA: 6s - loss: 0.1649 - accuracy: 0.90 - ETA: 6s - loss: 0.1684 - accuracy: 0.89 - ETA: 6s - loss: 0.1324 - accuracy: 0.91 - ETA: 6s - loss: 0.1258 - accuracy: 0.92 - ETA: 5s - loss: 0.1250 - accuracy: 0.93 - ETA: 5s - loss: 0.1375 - accuracy: 0.93 - ETA: 5s - loss: 0.1356 - accuracy: 0.93 - ETA: 5s - loss: 0.1326 - accuracy: 0.94 - ETA: 4s - loss: 0.1300 - accuracy: 0.94 - ETA: 4s - loss: 0.1390 - accuracy: 0.94 - ETA: 4s - loss: 0.1340 - accuracy: 0.94 - ETA: 4s - loss: 0.1266 - accuracy: 0.95 - ETA: 4s - loss: 0.1220 - accuracy: 0.95 - ETA: 4s - loss: 0.1243 - accuracy: 0.95 - ETA: 4s - loss: 0.1195 - accuracy: 0.95 - ETA: 4s - loss: 0.1416 - accuracy: 0.95 - ETA: 4s - loss: 0.1377 - accuracy: 0.95 - ETA: 4s - loss: 0.1333 - accuracy: 0.95 - ETA: 3s - loss: 0.1328 - accuracy: 0.95 - ETA: 3s - loss: 0.1378 - accuracy: 0.95 - ETA: 3s - loss: 0.1405 - accuracy: 0.95 - ETA: 3s - loss: 0.1399 - accuracy: 0.95 - ETA: 3s - loss: 0.1391 - accuracy: 0.95 - ETA: 3s - loss: 0.1362 - accuracy: 0.95 - ETA: 3s - loss: 0.1351 - accuracy: 0.95 - ETA: 3s - loss: 0.1334 - accuracy: 0.95 - ETA: 2s - loss: 0.1387 - accuracy: 0.95 - ETA: 2s - loss: 0.1373 - accuracy: 0.95 - ETA: 2s - loss: 0.1405 - accuracy: 0.95 - ETA: 2s - loss: 0.1408 - accuracy: 0.95 - ETA: 2s - loss: 0.1391 - accuracy: 0.94 - ETA: 2s - loss: 0.1368 - accuracy: 0.95 - ETA: 2s - loss: 0.1352 - accuracy: 0.94 - ETA: 2s - loss: 0.1376 - accuracy: 0.95 - ETA: 2s - loss: 0.1371 - accuracy: 0.95 - ETA: 2s - loss: 0.1374 - accuracy: 0.94 - ETA: 1s - loss: 0.1412 - accuracy: 0.94 - ETA: 1s - loss: 0.1420 - accuracy: 0.94 - ETA: 1s - loss: 0.1421 - accuracy: 0.94 - ETA: 1s - loss: 0.1449 - accuracy: 0.94 - ETA: 1s - loss: 0.1437 - accuracy: 0.94 - ETA: 1s - loss: 0.1422 - accuracy: 0.94 - ETA: 1s - loss: 0.1396 - accuracy: 0.94 - ETA: 1s - loss: 0.1410 - accuracy: 0.94 - ETA: 1s - loss: 0.1411 - accuracy: 0.94 - ETA: 0s - loss: 0.1440 - accuracy: 0.94 - ETA: 0s - loss: 0.1509 - accuracy: 0.94 - ETA: 0s - loss: 0.1512 - accuracy: 0.94 - ETA: 0s - loss: 0.1508 - accuracy: 0.94 - ETA: 0s - loss: 0.1519 - accuracy: 0.94 - ETA: 0s - loss: 0.1504 - accuracy: 0.94 - ETA: 0s - loss: 0.1513 - accuracy: 0.94 - ETA: 0s - loss: 0.1533 - accuracy: 0.94 - 7s 4ms/step - loss: 0.1553 - accuracy: 0.9420 - val_loss: 0.3454 - val_accuracy: 0.8878\n",
+      "Epoch 11/11\n",
+      "1724/1724 [==============================] - ETA: 6s - loss: 0.1769 - accuracy: 0.90 - ETA: 5s - loss: 0.1904 - accuracy: 0.90 - ETA: 5s - loss: 0.2045 - accuracy: 0.90 - ETA: 5s - loss: 0.1816 - accuracy: 0.91 - ETA: 5s - loss: 0.1741 - accuracy: 0.91 - ETA: 5s - loss: 0.1567 - accuracy: 0.92 - ETA: 5s - loss: 0.1692 - accuracy: 0.92 - ETA: 5s - loss: 0.1813 - accuracy: 0.92 - ETA: 5s - loss: 0.1707 - accuracy: 0.93 - ETA: 5s - loss: 0.1641 - accuracy: 0.93 - ETA: 4s - loss: 0.1621 - accuracy: 0.93 - ETA: 4s - loss: 0.1662 - accuracy: 0.92 - ETA: 4s - loss: 0.1636 - accuracy: 0.93 - ETA: 4s - loss: 0.1584 - accuracy: 0.93 - ETA: 4s - loss: 0.1500 - accuracy: 0.94 - ETA: 4s - loss: 0.1461 - accuracy: 0.94 - ETA: 4s - loss: 0.1463 - accuracy: 0.94 - ETA: 3s - loss: 0.1428 - accuracy: 0.94 - ETA: 3s - loss: 0.1544 - accuracy: 0.93 - ETA: 3s - loss: 0.1542 - accuracy: 0.94 - ETA: 3s - loss: 0.1556 - accuracy: 0.94 - ETA: 3s - loss: 0.1536 - accuracy: 0.94 - ETA: 3s - loss: 0.1496 - accuracy: 0.94 - ETA: 3s - loss: 0.1474 - accuracy: 0.94 - ETA: 3s - loss: 0.1449 - accuracy: 0.94 - ETA: 3s - loss: 0.1449 - accuracy: 0.94 - ETA: 3s - loss: 0.1436 - accuracy: 0.94 - ETA: 3s - loss: 0.1486 - accuracy: 0.94 - ETA: 3s - loss: 0.1475 - accuracy: 0.94 - ETA: 3s - loss: 0.1463 - accuracy: 0.94 - ETA: 2s - loss: 0.1435 - accuracy: 0.94 - ETA: 2s - loss: 0.1436 - accuracy: 0.94 - ETA: 2s - loss: 0.1418 - accuracy: 0.94 - ETA: 2s - loss: 0.1406 - accuracy: 0.94 - ETA: 2s - loss: 0.1434 - accuracy: 0.94 - ETA: 2s - loss: 0.1452 - accuracy: 0.94 - ETA: 2s - loss: 0.1483 - accuracy: 0.94 - ETA: 2s - loss: 0.1514 - accuracy: 0.94 - ETA: 1s - loss: 0.1513 - accuracy: 0.94 - ETA: 1s - loss: 0.1532 - accuracy: 0.94 - ETA: 1s - loss: 0.1552 - accuracy: 0.94 - ETA: 1s - loss: 0.1544 - accuracy: 0.94 - ETA: 1s - loss: 0.1536 - accuracy: 0.94 - ETA: 1s - loss: 0.1526 - accuracy: 0.94 - ETA: 1s - loss: 0.1555 - accuracy: 0.94 - ETA: 0s - loss: 0.1537 - accuracy: 0.94 - ETA: 0s - loss: 0.1518 - accuracy: 0.94 - ETA: 0s - loss: 0.1563 - accuracy: 0.94 - ETA: 0s - loss: 0.1568 - accuracy: 0.94 - ETA: 0s - loss: 0.1557 - accuracy: 0.94 - ETA: 0s - loss: 0.1591 - accuracy: 0.94 - ETA: 0s - loss: 0.1590 - accuracy: 0.93 - ETA: 0s - loss: 0.1592 - accuracy: 0.94 - 8s 5ms/step - loss: 0.1608 - accuracy: 0.9397 - val_loss: 0.4344 - val_accuracy: 0.8583\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<keras.callbacks.callbacks.History at 0x22a3dd462e8>"
+       "<keras.callbacks.callbacks.History at 0x182456011c8>"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 24,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "wandb.init()\n",
-    "\n",
+    "print(y_train_hot.shape)\n",
+    "print(labels.shape)\n",
+    "print(X_train.shape)\n",
     "# Train the CNN model\n",
-    "#    - X_train: Input data\n",
-    "#    - y_train_hot: Target data\n",
-    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
+    "#    X_train: Input data\n",
+    "#    y_train_hot: Target data\n",
+    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_val, y_val_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 25,
    "metadata": {},
    "outputs": [
     {
@@ -377,7 +364,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 26,
    "metadata": {
     "scrolled": true
    },
@@ -391,29 +378,49 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 27,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Model: \"sequential_1\"\n",
+      "Model: \"sequential_2\"\n",
       "_________________________________________________________________\n",
       "Layer (type)                 Output Shape              Param #   \n",
       "=================================================================\n",
-      "conv2d_1 (Conv2D)            (None, 18, 9, 32)         320       \n",
+      "conv2d_4 (Conv2D)            (None, 126, 30, 24)       240       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_3 (MaxPooling2 (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_6 (Activation)    (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_5 (Conv2D)            (None, 61, 13, 48)        10416     \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_4 (MaxPooling2 (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "activation_7 (Activation)    (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_6 (Conv2D)            (None, 28, 6, 48)         6960      \n",
       "_________________________________________________________________\n",
-      "max_pooling2d_1 (MaxPooling2 (None, 9, 4, 32)          0         \n",
+      "activation_8 (Activation)    (None, 28, 6, 48)         0         \n",
       "_________________________________________________________________\n",
-      "flatten_1 (Flatten)          (None, 1152)              0         \n",
+      "flatten_2 (Flatten)          (None, 8064)              0         \n",
       "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 128)               147584    \n",
+      "dropout_3 (Dropout)          (None, 8064)              0         \n",
       "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 5)                 645       \n",
+      "dense_3 (Dense)              (None, 64)                516160    \n",
+      "_________________________________________________________________\n",
+      "activation_9 (Activation)    (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_4 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_4 (Dense)              (None, 5)                 325       \n",
+      "_________________________________________________________________\n",
+      "activation_10 (Activation)   (None, 5)                 0         \n",
       "=================================================================\n",
-      "Total params: 148,549\n",
-      "Trainable params: 148,549\n",
+      "Total params: 534,101\n",
+      "Trainable params: 534,101\n",
       "Non-trainable params: 0\n",
       "_________________________________________________________________\n"
      ]
@@ -426,90 +433,801 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
+   "execution_count": 28,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[[125  10   0   0   0]\n",
+      " [  3 430  45   0   0]\n",
+      " [  0  17  78   0   0]\n",
+      " [  0   5   0   0   0]\n",
+      " [  0   4   0   0   2]]\n",
+      "Accuracy for class BRA : [0.92592593]\n",
+      "Accuracy for class BAM : [0.89958159]\n",
+      "Accuracy for class BBI : [0.82105263]\n",
+      "Accuracy for class BMA : [0.]\n",
+      "Accuracy for class BIN : [0.33333333]\n",
+      "Overall Accuracy : 0.8831710709318498\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "'[[126   9   0   0   0]\\n [  2 461  15   0   0]\\n [  0  29  66   0   0]\\n [  0   5   0   0   0]\\n [  0   0   0   0   6]]\\nAccuracy for class BRA : [0.93333333]\\nAccuracy for class BAM : [0.96443515]\\nAccuracy for class BBI : [0.69473684]\\nAccuracy for class BMA : [0.]\\nAccuracy for class BIN : [1.]\\nOverall Accuracy : 0.9165507649513213'"
+      ]
+     },
+     "execution_count": 28,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred_ohe = loaded_model.predict(X_test)  # shape=(n_samples, 12)\n",
+    "y_pred_labels = np.argmax(y_pred_ohe, axis=1)  # only necessary if output has one-hot-encoding, shape=(n_samples)\n",
+    "\n",
+    "confusion_matrix = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_labels)  # shape\n",
+    "print(confusion_matrix)\n",
+    "\n",
+    "for class_i in range(len(labels)) :\n",
+    "    indices = np.argwhere(y_test == class_i)\n",
+    "    sum = 0\n",
+    "    for index in indices:\n",
+    "        sum += (y_test[index] == y_pred_labels[index])\n",
+    "    if(len(indices) > 0) : mean = sum/len(indices)\n",
+    "    else : mean = \"N/A\"\n",
+    "    print(\"Accuracy for class\", labels[class_i], \":\", mean)\n",
+    "\n",
+    "print(\"Overall Accuracy :\", np.mean(y_test == y_pred_labels))\n",
+    "\n",
+    "'''[[125  10   0   0   0]\n",
+    " [  3 430  45   0   0]\n",
+    " [  0  17  78   0   0]\n",
+    " [  0   5   0   0   0]\n",
+    " [  0   4   0   0   2]]\n",
+    "Accuracy for class BRA : [0.92592593]\n",
+    "Accuracy for class BAM : [0.89958159]\n",
+    "Accuracy for class BBI : [0.82105263]\n",
+    "Accuracy for class BMA : [0.]\n",
+    "Accuracy for class BIN : [0.33333333]\n",
+    "Overall Accuracy : 0.8831710709318498'''"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 29,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
+      "[0. 1.]\n",
+      "[ 0.0000000e+00  1.5258789e-05  0.0000000e+00 ...  3.3020020e-02\n",
+      "  1.2680054e-02 -8.7432861e-03]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00010891\n",
+      "\n",
+      " BAM :  0.99858701\n",
+      "\n",
+      " BBI :  0.00105622\n",
+      "\n",
+      " BMA :  0.00023835\n",
+      "\n",
+      " BIN :  0.00000958\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[1. 2.]\n",
+      "[-0.03717041 -0.05769348 -0.06455994 ...  0.01766968  0.01895142\n",
+      "  0.01779175]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00014382\n",
+      "\n",
+      " BAM :  0.85032731\n",
+      "\n",
+      " BBI :  0.14928448\n",
+      "\n",
+      " BMA :  0.00024211\n",
+      "\n",
+      " BIN :  0.00000233\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[2. 3.]\n",
+      "[ 0.02345276  0.02101135  0.01712036 ... -0.01161194 -0.0141449\n",
+      " -0.01431274]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000749\n",
+      "\n",
+      " BAM :  0.99568462\n",
+      "\n",
+      " BBI :  0.00429150\n",
+      "\n",
+      " BMA :  0.00001622\n",
+      "\n",
+      " BIN :  0.00000025\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[3. 4.]\n",
+      "[-0.01583862 -0.01066589 -0.00762939 ... -0.0377655  -0.03556824\n",
+      " -0.02685547]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00104451\n",
+      "\n",
+      " BAM :  0.99785441\n",
+      "\n",
+      " BBI :  0.00019401\n",
+      "\n",
+      " BMA :  0.00089407\n",
+      "\n",
+      " BIN :  0.00001295\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[4. 5.]\n",
+      "[-0.02836609 -0.02510071 -0.02012634 ...  0.0138855  -0.00386047\n",
+      " -0.00904846]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00064268\n",
+      "\n",
+      " BAM :  0.99867272\n",
+      "\n",
+      " BBI :  0.00047300\n",
+      "\n",
+      " BMA :  0.00020845\n",
+      "\n",
+      " BIN :  0.00000323\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[5. 6.]\n",
+      "[-0.00526428  0.00822449  0.01951599 ...  0.02729797  0.02156067\n",
+      "  0.01234436]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000077\n",
+      "\n",
+      " BAM :  0.99999666\n",
+      "\n",
+      " BBI :  0.00000220\n",
+      "\n",
+      " BMA :  0.00000035\n",
+      "\n",
+      " BIN :  0.00000011\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[6. 7.]\n",
+      "[ 0.00544739  0.00053406  0.00970459 ... -0.02848816 -0.01611328\n",
+      " -0.01091003]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000281\n",
+      "\n",
+      " BAM :  0.99997854\n",
+      "\n",
+      " BBI :  0.00001035\n",
+      "\n",
+      " BMA :  0.00000824\n",
+      "\n",
+      " BIN :  0.00000003\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[7. 8.]\n",
+      "[-0.0177002  -0.02372742 -0.02700806 ... -0.04304504 -0.04063416\n",
+      " -0.03363037]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[8. 9.]\n",
+      "[-0.01539612 -0.00108337  0.00718689 ...  0.01161194  0.01818848\n",
+      "  0.02700806]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000011\n",
+      "\n",
+      " BAM :  0.99999988\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000001\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[ 9. 10.]\n",
+      "[ 0.03549194  0.04856873  0.05519104 ... -0.02171326 -0.03634644\n",
+      " -0.03912354]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000004\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000001\n",
+      "\n",
+      " BMA :  0.00000005\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[10. 11.]\n",
+      "[-0.02934265 -0.0115509   0.00445557 ... -0.03616333 -0.03759766\n",
+      " -0.0304718 ]\n",
+      "(128, 32)\n",
       "PREDICTED VALUES\n",
       "\n",
-      " chirping_birds :  0.00123825\n",
+      " BRA :  0.00000056\n",
       "\n",
-      " crickets :  0.01059426\n",
+      " BAM :  0.99999881\n",
       "\n",
-      " crow :  0.00000000\n",
+      " BBI :  0.00000035\n",
+      "\n",
+      " BMA :  0.00000023\n",
+      "\n",
+      " BIN :  0.00000003\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[11. 12.]\n",
+      "[-0.03358459 -0.03901672 -0.03933716 ... -0.02337646 -0.02124023\n",
+      " -0.02107239]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00001431\n",
+      "\n",
+      " BAM :  0.99988461\n",
+      "\n",
+      " BBI :  0.00006046\n",
+      "\n",
+      " BMA :  0.00004009\n",
+      "\n",
+      " BIN :  0.00000051\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[12. 13.]\n",
+      "[-0.00846863  0.00444031  0.00852966 ... -0.00604248 -0.00845337\n",
+      " -0.00497437]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
       "\n",
-      " frog :  0.97891253\n",
+      " BRA :  0.00025713\n",
       "\n",
-      " insects :  0.00925493\n",
+      " BAM :  0.98849314\n",
       "\n",
+      " BBI :  0.01096764\n",
       "\n",
-      "GUESS:  frog\n"
+      " BMA :  0.00024913\n",
+      "\n",
+      " BIN :  0.00003295\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[13. 14.]\n",
+      "[-0.00427246 -0.00718689 -0.00811768 ... -0.01966858 -0.01296997\n",
+      " -0.01628113]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00093799\n",
+      "\n",
+      " BAM :  0.99158257\n",
+      "\n",
+      " BBI :  0.00518909\n",
+      "\n",
+      " BMA :  0.00213042\n",
+      "\n",
+      " BIN :  0.00015992\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[14. 15.]\n",
+      "[-0.02262878 -0.01573181 -0.00117493 ... -0.08956909 -0.0695343\n",
+      " -0.04067993]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00020277\n",
+      "\n",
+      " BAM :  0.99944395\n",
+      "\n",
+      " BBI :  0.00022603\n",
+      "\n",
+      " BMA :  0.00012033\n",
+      "\n",
+      " BIN :  0.00000688\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[15. 16.]\n",
+      "[-0.02532959 -0.01031494 -0.00280762 ... -0.07128906 -0.07106018\n",
+      " -0.05839539]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00001111\n",
+      "\n",
+      " BAM :  0.99998546\n",
+      "\n",
+      " BBI :  0.00000003\n",
+      "\n",
+      " BMA :  0.00000348\n",
+      "\n",
+      " BIN :  0.00000006\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[16. 17.]\n",
+      "[-0.04600525 -0.02149963  0.00523376 ... -0.02526855 -0.02735901\n",
+      " -0.03106689]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[17. 18.]\n",
+      "[-0.02043152 -0.01174927 -0.02088928 ...  0.10055542  0.08653259\n",
+      "  0.06604004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000001\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000001\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[18. 19.]\n",
+      "[ 0.04153442  0.01223755 -0.00654602 ...  0.03269958  0.02374268\n",
+      "  0.02774048]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[19. 20.]\n",
+      "[0.02185059 0.02069092 0.01451111 ... 0.03469849 0.03985596 0.04600525]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000002\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000001\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[20. 21.]\n",
+      "[ 0.0353241   0.01567078 -0.00102234 ...  0.1058197   0.10365295\n",
+      "  0.09759521]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000130\n",
+      "\n",
+      " BAM :  0.99999797\n",
+      "\n",
+      " BBI :  0.00000012\n",
+      "\n",
+      " BMA :  0.00000049\n",
+      "\n",
+      " BIN :  0.00000013\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[21. 22.]\n",
+      "[ 0.09413147  0.07905579  0.05625916 ... -0.01145935 -0.00245667\n",
+      "  0.00479126]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000010\n",
+      "\n",
+      " BAM :  0.99999964\n",
+      "\n",
+      " BBI :  0.00000002\n",
+      "\n",
+      " BMA :  0.00000018\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[22. 23.]\n",
+      "[ 0.0037384   0.01168823  0.01628113 ... -0.03440857 -0.05511475\n",
+      " -0.08209229]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[23. 24.]\n",
+      "[-0.1026001  -0.12590027 -0.14944458 ...  0.03462219  0.02537537\n",
+      "  0.02354431]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[24. 25.]\n",
+      "[ 0.0196991   0.02836609  0.03103638 ... -0.03009033 -0.03392029\n",
+      " -0.03681946]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[25. 26.]\n",
+      "[-0.04151917 -0.03933716 -0.03703308 ...  0.05451965  0.0519104\n",
+      "  0.05206299]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000066\n",
+      "\n",
+      " BAM :  0.99999893\n",
+      "\n",
+      " BBI :  0.00000028\n",
+      "\n",
+      " BMA :  0.00000007\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[26. 27.]\n",
+      "[ 0.05670166  0.06253052  0.07643127 ... -0.00396729  0.00715637\n",
+      "  0.00585938]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00020419\n",
+      "\n",
+      " BAM :  0.99962115\n",
+      "\n",
+      " BBI :  0.00006228\n",
+      "\n",
+      " BMA :  0.00010320\n",
+      "\n",
+      " BIN :  0.00000904\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[27. 28.]\n",
+      "[-0.00222778 -0.01303101 -0.02310181 ...  0.01165771  0.01649475\n",
+      "  0.0194397 ]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000249\n",
+      "\n",
+      " BAM :  0.97886640\n",
+      "\n",
+      " BBI :  0.02111143\n",
+      "\n",
+      " BMA :  0.00001957\n",
+      "\n",
+      " BIN :  0.00000016\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[28. 29.]\n",
+      "[0.01657104 0.01519775 0.00924683 ... 0.03746033 0.03282166 0.02775574]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000001\n",
+      "\n",
+      " BAM :  0.99999988\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000009\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[29. 30.]\n",
+      "[ 0.01919556  0.0135498   0.01724243 ... -0.00575256 -0.01502991\n",
+      " -0.02742004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000054\n",
+      "\n",
+      " BAM :  0.99999917\n",
+      "\n",
+      " BBI :  0.00000003\n",
+      "\n",
+      " BMA :  0.00000019\n",
+      "\n",
+      " BIN :  0.00000001\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[30. 31.]\n",
+      "[-0.0322876  -0.0365448  -0.03544617 ... -0.0218811  -0.02978516\n",
+      " -0.04052734]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000001\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000001\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[31. 32.]\n",
+      "[-0.04328918 -0.03413391 -0.03421021 ...  0.05908203  0.06370544\n",
+      "  0.05949402]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000008\n",
+      "\n",
+      " BAM :  0.99999702\n",
+      "\n",
+      " BBI :  0.00000195\n",
+      "\n",
+      " BMA :  0.00000086\n",
+      "\n",
+      " BIN :  0.00000002\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[32. 33.]\n",
+      "[ 0.06063843  0.06056213  0.06610107 ... -0.12741089 -0.13371277\n",
+      " -0.12313843]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000000\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000000\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[33. 34.]\n",
+      "[-0.09968567 -0.06376648 -0.03105164 ... -0.0138092  -0.01574707\n",
+      " -0.01896667]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000003\n",
+      "\n",
+      " BAM :  1.00000000\n",
+      "\n",
+      " BBI :  0.00000000\n",
+      "\n",
+      " BMA :  0.00000003\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[34. 35.]\n",
+      "[-0.00811768  0.00149536  0.00953674 ... -0.004776   -0.0010376\n",
+      "  0.00231934]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00000002\n",
+      "\n",
+      " BAM :  0.99999988\n",
+      "\n",
+      " BBI :  0.00000005\n",
+      "\n",
+      " BMA :  0.00000007\n",
+      "\n",
+      " BIN :  0.00000000\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[35. 36.]\n",
+      "[ 0.00238037  0.00236511  0.00231934 ... -0.00193787  0.0068512\n",
+      "  0.00695801]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " BRA :  0.00005464\n",
+      "\n",
+      " BAM :  0.99956018\n",
+      "\n"
      ]
     },
     {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 720x288 with 2 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      " BBI :  0.00021886\n",
+      "\n",
+      " BMA :  0.00016426\n",
+      "\n",
+      " BIN :  0.00000198\n",
+      "\n",
+      "\n",
+      "GUESS:  BAM\n",
+      "[{'class': 'BAM', 'timestamp': 0}, {'class': 'BAM', 'timestamp': 1}, {'class': 'BAM', 'timestamp': 2}, {'class': 'BAM', 'timestamp': 3}, {'class': 'BAM', 'timestamp': 4}, {'class': 'BAM', 'timestamp': 5}, {'class': 'BAM', 'timestamp': 6}, {'class': 'BAM', 'timestamp': 7}, {'class': 'BAM', 'timestamp': 8}, {'class': 'BAM', 'timestamp': 9}, {'class': 'BAM', 'timestamp': 10}, {'class': 'BAM', 'timestamp': 11}, {'class': 'BAM', 'timestamp': 12}, {'class': 'BAM', 'timestamp': 13}, {'class': 'BAM', 'timestamp': 14}, {'class': 'BAM', 'timestamp': 15}, {'class': 'BAM', 'timestamp': 16}, {'class': 'BAM', 'timestamp': 17}, {'class': 'BAM', 'timestamp': 18}, {'class': 'BAM', 'timestamp': 19}, {'class': 'BAM', 'timestamp': 20}, {'class': 'BAM', 'timestamp': 21}, {'class': 'BAM', 'timestamp': 22}, {'class': 'BAM', 'timestamp': 23}, {'class': 'BAM', 'timestamp': 24}, {'class': 'BAM', 'timestamp': 25}, {'class': 'BAM', 'timestamp': 26}, {'class': 'BAM', 'timestamp': 27}, {'class': 'BAM', 'timestamp': 28}, {'class': 'BAM', 'timestamp': 29}, {'class': 'BAM', 'timestamp': 30}, {'class': 'BAM', 'timestamp': 31}, {'class': 'BAM', 'timestamp': 32}, {'class': 'BAM', 'timestamp': 33}, {'class': 'BAM', 'timestamp': 34}, {'class': 'BAM', 'timestamp': 35}]\n"
+     ]
     }
    ],
    "source": [
     "## Running the model\n",
     "\n",
-    "import librosa\n",
-    "import librosa.display\n",
-    "\n",
-    "# Convert wav to MFCC\n",
-    "prediction_data = wav2mfcc('./prediction/frog.wav')\n",
-    "\n",
-    "# Reshape to 4 dimensions\n",
-    "prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
-    "\n",
-    "# Run the model on the inputted file\n",
-    "predicted = loaded_model.predict(prediction_data)\n",
-    "\n",
-    "# Output the prediction values for each class\n",
-    "print ('PREDICTED VALUES')\n",
-    "labels_indices = range(len(labels))\n",
-    "max_value = 0\n",
-    "max_value_index = 0\n",
-    "for index in labels_indices:\n",
-    "    print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
-    "    if predicted[0,index] > max_value:\n",
-    "        max_value_index = index\n",
-    "        max_value = predicted[0,index]\n",
-    "\n",
-    "# Output the prediction\n",
-    "if max_value < 0.5:\n",
-    "    print(\"GUESS: Nothing\")\n",
-    "else:\n",
-    "    print('\\n\\nGUESS: ', labels[max_value_index])\n",
-    "       \n",
-    "\n",
-    "# Display spectrogram (adapted from librosa docs)\n",
-    "wave, sr = librosa.load('./prediction/frog.wav', mono=True, sr=None)\n",
-    "librosa.feature.melspectrogram(y=wave, sr=sr)\n",
-    "\n",
-    "S = librosa.feature.melspectrogram(y=wave, sr=sr, n_mels=128, fmax=12000)\n",
-    "\n",
-    "plt.figure(figsize=(10, 4))\n",
-    "S_dB = librosa.power_to_db(S, ref=np.max)\n",
-    "librosa.display.specshow(S_dB, x_axis='time',\n",
-    "                         y_axis='mel', sr=sr,\n",
-    "                         fmax=12000)\n",
-    "plt.colorbar(format='%+2.0f dB')\n",
-    "plt.title('Mel-Frequency Spectrogram')\n",
-    "plt.tight_layout()\n",
-    "plt.show()"
+    "n_mfcc = config.buckets\n",
+    "max_len = config.max_len\n",
+    "# convert file to wav2mfcc\n",
+    "# Mel-frequency cepstral coefficients\n",
+    "file_path = \"./prediction/nature_sc.wav\"\n",
+    "big_wave, sr = librosa.load(file_path, mono=True, sr=None)\n",
+    "#print(wave.shape, sr)\n",
+    "\n",
+    "classification = []\n",
+    "\n",
+    "for sec_index in range( int(big_wave.shape[0] / sr) ) :\n",
+    "    start_sec = sec_index\n",
+    "    end_sec = sec_index + 1\n",
+    "    \n",
+    "    sec_to_trim = np.array( [ float(start_sec), float(end_sec) ] )\n",
+    "    print(sec_to_trim)\n",
+    "    sec_to_trim = np.ceil( sec_to_trim * sr )\n",
+    "\n",
+    "    wave = big_wave[int(sec_to_trim[0]) : int(sec_to_trim[1])]\n",
+    "    print(wave)\n",
+    "\n",
+    "    wave = np.asfortranarray(wave[::3])\n",
+    "    mfcc = librosa.feature.mfcc(wave, sr=16000, n_mfcc=n_mfcc)\n",
+    "\n",
+    "    # If maximum length exceeds mfcc lengths then pad the remaining ones\n",
+    "    if (max_len > mfcc.shape[1]):\n",
+    "        pad_width = max_len - mfcc.shape[1]\n",
+    "        mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')\n",
+    "\n",
+    "    # Else cutoff the remaining parts\n",
+    "    else:\n",
+    "        mfcc = mfcc[:, :max_len]\n",
+    "\n",
+    "    # Convert wav to MFCC\n",
+    "    prediction_data = wav2mfcc('./prediction/nature_sc.wav')\n",
+    "    prediction_data = mfcc\n",
+    "    print(prediction_data.shape)\n",
+    "    #print(wav2mfcc())\n",
+    "    # Reshape to 4 dimensions\n",
+    "    prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
+    "    #prediction_data = prediction_data.reshape(1, 20, config.max_len, channels)\n",
+    "\n",
+    "    # Run the model on the inputted file\n",
+    "    predicted = loaded_model.predict(prediction_data)\n",
+    "\n",
+    "    # Output the prediction values for each class\n",
+    "    print ('PREDICTED VALUES')\n",
+    "    labels_indices = range(len(labels))\n",
+    "    max_value = 0\n",
+    "    max_value_index = 0\n",
+    "    for index in labels_indices:\n",
+    "        print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
+    "        if predicted[0,index] > max_value:\n",
+    "            max_value_index = index\n",
+    "            max_value = predicted[0,index]\n",
+    "\n",
+    "    # Output the prediction\n",
+    "    if max_value < 0.5:\n",
+    "        print(\"GUESS: Nothing\")\n",
+    "        classification.append( { \"class\" : \"Nothing\", \"timestamp\" : start_sec } )\n",
+    "    else:\n",
+    "        print('\\n\\nGUESS: ', labels[max_value_index])\n",
+    "        classification.append( { \"class\" : labels[max_value_index], \"timestamp\" : start_sec } )\n",
+    "\n",
+    "print(classification)"
    ]
   },
   {
@@ -522,9 +1240,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "kaggleNotebook",
+   "display_name": "Python 3",
    "language": "python",
-   "name": "kagglenotebook"
+   "name": "python3"
   },
   "language_info": {
    "codemirror_mode": {
@@ -536,7 +1254,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.4"
   }
  },
  "nbformat": 4,
diff --git a/bio-cnn/bio_cnn_model.h5 b/bio-cnn/bio_cnn_model.h5
new file mode 100644
index 0000000..bfdb4db
Binary files /dev/null and b/bio-cnn/bio_cnn_model.h5 differ
diff --git a/bio-cnn/preprocess.py b/bio-cnn/preprocess.py
index e5fe230..1b26999 100644
--- a/bio-cnn/preprocess.py
+++ b/bio-cnn/preprocess.py
@@ -65,9 +65,10 @@ def get_train_test(split_ratio=0.6, random_state=42):
 
     assert X.shape[0] == len(y)
 
-    return train_test_split(X, y, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
-
+    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= (1 - 0.8), random_state=random_state, shuffle=True)
+    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
 
+    return X_train, X_test, X_val, y_train, y_test, y_val
 
 def prepare_dataset(path=DATA_PATH):
     labels, _, _ = get_labels(path)
diff --git a/bio_cnn_model.h5 b/bio_cnn_model.h5
new file mode 100644
index 0000000..bfdb4db
Binary files /dev/null and b/bio_cnn_model.h5 differ
diff --git a/classification_cnn.py b/classification_cnn.py
new file mode 100644
index 0000000..22faf33
--- /dev/null
+++ b/classification_cnn.py
@@ -0,0 +1,99 @@
+from keras.models import load_model
+import keras
+from keras.models import Sequential
+from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM, Activation
+from keras.utils import to_categorical
+import wandb
+from wandb.keras import WandbCallback
+import matplotlib.pyplot as plt
+import sklearn.metrics as metrics
+import librosa
+import numpy as np
+
+def classify_file( audio_file ) :
+    # load the models
+    all_models = [ load_model('ant_cnn_model.h5'),
+                   load_model('bio_cnn_model.h5'),
+                   load_model('geo_cnn_model.h5') ]
+
+    all_labels = [ ["AAT", "AHV", "AMA", "ART", "ASI", "AVH", "AVT"],
+                   ["BRA", "BAM", "BBI", "BMA", "BIN"],
+                   ["GOC", "GRA", "GST","GWG", "GWC"] ]
+
+    classify_dict = [ {'name' : 'Anthrophony',
+                     'color' : '#0088FE',
+                     'data' : [] },
+                      {'name': 'Biophony',
+                       'color': '#00C49F',
+                       'data': [] },
+                      {'name': 'Geophony',
+                       'color': '#FFBB28',
+                       'data': [] } ]
+
+    ## Running the models
+
+    n_mfcc = 50 # bucket size !!SUBJECT TO CHANGE!!
+    max_len = 21 # max_len size !!SUBJECT TO CHANGE!!
+    channels = 1 # channels !!SUBJECT TO CHANGE!!
+
+    # convert file to wav2mfcc
+    # Mel-frequency cepstral coefficients
+    file_path = audio_file
+    big_wave, sr = librosa.load(file_path, mono=True, sr=None)
+    #print(wave.shape, sr)
+
+    for sec_index in range( int(big_wave.shape[0] / sr) ) :
+        start_sec = sec_index
+        end_sec = sec_index + 1
+
+        sec_to_trim = np.array( [ float(start_sec), float(end_sec) ] )
+        sec_to_trim = np.ceil( sec_to_trim * sr )
+
+        wave = big_wave[int(sec_to_trim[0]) : int(sec_to_trim[1])]
+
+        wave = np.asfortranarray(wave[::3])
+        mfcc = librosa.feature.mfcc(wave, sr=16000, n_mfcc=n_mfcc)
+
+        # If maximum length exceeds mfcc lengths then pad the remaining ones
+        if (max_len > mfcc.shape[1]):
+            pad_width = max_len - mfcc.shape[1]
+            mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')
+
+        # Else cutoff the remaining parts
+        else:
+            mfcc = mfcc[:, :max_len]
+
+        # Convert wav to MFCC
+        #prediction_data = wav2mfcc('./prediction/nature_sc.wav')
+        prediction_data = mfcc
+
+        # Reshape to 4 dimensions
+        prediction_data = prediction_data.reshape(1, n_mfcc, max_len, channels)
+
+        # Run the model on the inputted file
+
+        all_predicted = [ model.predict(prediction_data) for model in all_models ]
+
+        for labels, predicted, classification in zip( all_labels, all_predicted, classify_dict ) :
+            # Output the prediction values for each class
+            print ('PREDICTED VALUES')
+            labels_indices = range(len(labels))
+            max_value = 0
+            max_value_index = 0
+            for index in labels_indices:
+                print("\n", labels[index], ": ", '%.08f' % predicted[0,index])
+                if predicted[0,index] > max_value:
+                    max_value_index = index
+                    max_value = predicted[0,index]
+
+            # Output the prediction
+            if max_value < 0.5:
+                print("GUESS: Nothing")
+                classification['data'].append( { "class" : "Nothing", "timestamp" : start_sec } )
+            else:
+                print('\n\nGUESS: ', labels[max_value_index])
+                classification['data'].append( { "class" : labels[max_value_index], "timestamp" : start_sec } )
+
+    print(classify_dict)
+
+classify_file( "./prediction/nature_sc.wav" )
\ No newline at end of file
diff --git a/geo-cnn/geo-cnn.ipynb b/geo-cnn/geo-cnn.ipynb
index fdb6a80..8b53884 100644
--- a/geo-cnn/geo-cnn.ipynb
+++ b/geo-cnn/geo-cnn.ipynb
@@ -2,31 +2,24 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 15,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Using TensorFlow backend.\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from preprocess import *\n",
     "import keras\n",
     "from keras.models import Sequential\n",
-    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM\n",
+    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM, Activation\n",
     "from keras.utils import to_categorical\n",
     "import wandb\n",
     "from wandb.keras import WandbCallback\n",
-    "import matplotlib.pyplot as plt"
+    "import matplotlib.pyplot as plt\n",
+    "import sklearn.metrics as metrics"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [
     {
@@ -34,8 +27,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/k70rvi7p\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/k70rvi7p</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/15ugcco4\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/15ugcco4</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -49,12 +42,11 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n",
-      "Saving vectors of label - 'crackling_fire': 100%|██████████████████████████████████████| 40/40 [00:01<00:00, 23.58it/s]\n",
-      "Saving vectors of label - 'helicopter': 100%|██████████████████████████████████████████| 40/40 [00:01<00:00, 25.01it/s]\n",
-      "Saving vectors of label - 'rain': 100%|████████████████████████████████████████████████| 40/40 [00:01<00:00, 27.18it/s]\n",
-      "Saving vectors of label - 'thunderstorm': 100%|████████████████████████████████████████| 40/40 [00:01<00:00, 26.40it/s]\n",
-      "Saving vectors of label - 'wind': 100%|████████████████████████████████████████████████| 40/40 [00:01<00:00, 27.30it/s]\n"
+      "Saving vectors of label - 'GOC': 100%|█████████████████████████████████████████████████| 91/91 [00:01<00:00, 68.76it/s]\n",
+      "Saving vectors of label - 'GRA': 100%|███████████████████████████████████████████████| 623/623 [00:06<00:00, 93.69it/s]\n",
+      "Saving vectors of label - 'GST': 100%|█████████████████████████████████████████████████| 85/85 [00:01<00:00, 80.33it/s]\n",
+      "Saving vectors of label - 'GWC': 100%|███████████████████████████████████████████████| 464/464 [00:05<00:00, 78.34it/s]\n",
+      "Saving vectors of label - 'GWG': 100%|██████████████████████████████████████████████| 203/203 [00:02<00:00, 101.32it/s]\n"
      ]
     }
    ],
@@ -62,67 +54,81 @@
     "wandb.init()\n",
     "config = wandb.config\n",
     "\n",
-    "config.max_len = 11\n",
-    "config.buckets = 20\n",
+    "config.max_len = 32\n",
+    "config.buckets = 128\n",
     "\n",
     "# Save data to array file first\n",
     "save_data_to_array(max_len=config.max_len, n_mfcc=config.buckets)\n",
     "\n",
-    "labels=[\"crackling_fire\", \"helicopter\", \"rain\", \"thunderstorm\", \"wind\"]"
+    "#labels=np.array([\"chirping_birds\", \"crickets\", \"crow\", \n",
+    "#                 \"frog\", \"insects\"])\n",
+    "labels=np.array([\"GOC\", \"GRA\", \"GST\", \n",
+    "                 \"GWG\", \"GWC\"])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 17,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Loading train/test set\n",
-    "X_train, X_test, y_train, y_test = get_train_test()"
+    "X_train, X_test, X_val, y_train, y_test, y_val = get_train_test()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 18,
    "metadata": {},
    "outputs": [
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+      "(703, 128, 32)\n"
      ]
     }
    ],
    "source": [
     "# Setting channels to 1 to generalize stereo sound to 1 channel\n",
     "channels = 1\n",
-    "config.epochs = 50\n",
+    "config.epochs = 20\n",
     "config.batch_size = 100\n",
     "\n",
     "# Number of classes\n",
     "num_classes = 5\n",
-    "\n",
+    "print(X_train.shape)\n",
     "# Reshape X_train and X_test to include a 4th dimension (channels)\n",
     "X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len, channels)\n",
-    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)"
+    "X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len, channels)\n",
+    "X_val = X_val.reshape(X_val.shape[0], config.buckets, config.max_len, channels)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 19,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "1.0\n"
+      "(703, 128, 32, 1)\n"
      ]
     },
     {
      "data": {
-      "image/png": "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\n",
+      "text/plain": [
+       "<matplotlib.image.AxesImage at 0x1dd77bd2b48>"
+      ]
+     },
+     "execution_count": 19,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -135,34 +141,113 @@
    ],
    "source": [
     "# Spectrogram visualized of 0th element\n",
-    "plt.imshow(X_train[1, :, :, 0])\n",
-    "print(y_train[1])"
+    "print(X_train.shape)\n",
+    "plt.imshow(X_train[10, :, :, 0])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 20,
    "metadata": {},
    "outputs": [],
    "source": [
     "# Getting vector number where each number corresponds to a label\n",
     "y_train_hot = to_categorical(y_train)\n",
-    "y_test_hot = to_categorical(y_test)"
+    "y_test_hot = to_categorical(y_test)\n",
+    "y_val_hot = to_categorical(y_val)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 21,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Model: \"sequential_2\"\n",
+      "_________________________________________________________________\n",
+      "Layer (type)                 Output Shape              Param #   \n",
+      "=================================================================\n",
+      "conv2d_4 (Conv2D)            (None, 126, 30, 24)       240       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_3 (MaxPooling2 (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_6 (Activation)    (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_5 (Conv2D)            (None, 61, 13, 48)        10416     \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_4 (MaxPooling2 (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "activation_7 (Activation)    (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_6 (Conv2D)            (None, 28, 6, 48)         6960      \n",
+      "_________________________________________________________________\n",
+      "activation_8 (Activation)    (None, 28, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "flatten_2 (Flatten)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dropout_3 (Dropout)          (None, 8064)              0         \n",
+      "_________________________________________________________________\n",
+      "dense_3 (Dense)              (None, 64)                516160    \n",
+      "_________________________________________________________________\n",
+      "activation_9 (Activation)    (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_4 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_4 (Dense)              (None, 5)                 325       \n",
+      "_________________________________________________________________\n",
+      "activation_10 (Activation)   (None, 5)                 0         \n",
+      "=================================================================\n",
+      "Total params: 534,101\n",
+      "Trainable params: 534,101\n",
+      "Non-trainable params: 0\n",
+      "_________________________________________________________________\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "\"model.add(Conv2D(32, (3, 3),\\n    input_shape=(config.buckets, config.max_len, channels),\\n    activation='relu'))\\n\\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\\n\\nmodel.add(Flatten())\\n\\nmodel.add(Dense(128, activation='relu'))\\nmodel.add(Dense(num_classes, activation='softmax'))\""
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "# Building the model\n",
     "model = Sequential()\n",
     "\n",
+    "input_shape= (config.buckets, config.max_len, channels)\n",
+    "\n",
+    "model.add(Conv2D(24, (3, 3), strides=(1, 1), input_shape=input_shape))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 3), padding=\"valid\"))\n",
+    "model.add(MaxPooling2D((2, 2), strides=(2, 2)))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Conv2D(48, (3, 1), padding=\"valid\"))\n",
+    "model.add(Activation('relu'))\n",
+    "\n",
+    "model.add(Flatten())\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(64))\n",
+    "model.add(Activation('relu'))\n",
+    "model.add(Dropout(rate=0.5))\n",
+    "\n",
+    "model.add(Dense(len(labels)))\n",
+    "model.add(Activation('softmax'))\n",
+    "model.summary()\n",
     "# Conv2D: \n",
     "#    Filters: 32\n",
     "#    Kernel_size: (3,3) (height/width of the 2D convolution window)     \n",
-    "model.add(Conv2D(32, (3, 3),\n",
+    "'''model.add(Conv2D(32, (3, 3),\n",
     "    input_shape=(config.buckets, config.max_len, channels),\n",
     "    activation='relu'))\n",
     "\n",
@@ -171,12 +256,12 @@
     "model.add(Flatten())\n",
     "\n",
     "model.add(Dense(128, activation='relu'))\n",
-    "model.add(Dense(num_classes, activation='softmax'))"
+    "model.add(Dense(num_classes, activation='softmax'))'''"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 22,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -188,7 +273,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 23,
    "metadata": {
     "scrolled": false
    },
@@ -198,8 +283,8 @@
       "text/html": [
        "\n",
        "                Logging results to <a href=\"https://wandb.com\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized</a><br/>\n",
-       "                Run page: <a href=\"https://app.wandb.ai/stevenenriquez/uncategorized/runs/1lhfwpdp\" target=\"_blank\">https://app.wandb.ai/stevenenriquez/uncategorized/runs/1lhfwpdp</a><br/>\n",
+       "                Project page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN</a><br/>\n",
+       "                Run page: <a href=\"https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2fhx4pil\" target=\"_blank\">https://app.wandb.ai/joshekruse/intellichirp-snaw-NN/runs/2fhx4pil</a><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -210,148 +295,92 @@
      "output_type": "display_data"
     },
     {
-     "name": "stderr",
+     "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Failed to query for notebook name, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable\n"
+      "(703, 5)\n",
+      "(5,)\n",
+      "(703, 128, 32, 1)\n",
+      "Train on 703 samples, validate on 469 samples\n",
+      "Epoch 1/20\n",
+      "703/703 [==============================] - ETA: 31s - loss: 2.6549 - accuracy: 0.156 - ETA: 15s - loss: 2.9842 - accuracy: 0.296 - ETA: 10s - loss: 3.0744 - accuracy: 0.270 - ETA: 8s - loss: 2.7303 - accuracy: 0.273 - ETA: 6s - loss: 2.4843 - accuracy: 0.30 - ETA: 5s - loss: 2.3492 - accuracy: 0.29 - ETA: 4s - loss: 2.2642 - accuracy: 0.29 - ETA: 4s - loss: 2.1689 - accuracy: 0.30 - ETA: 3s - loss: 2.1129 - accuracy: 0.29 - ETA: 3s - loss: 2.0378 - accuracy: 0.31 - ETA: 2s - loss: 1.9852 - accuracy: 0.31 - ETA: 2s - loss: 1.9340 - accuracy: 0.33 - ETA: 2s - loss: 1.9016 - accuracy: 0.33 - ETA: 1s - loss: 1.8562 - accuracy: 0.34 - ETA: 1s - loss: 1.8084 - accuracy: 0.36 - ETA: 1s - loss: 1.7684 - accuracy: 0.36 - ETA: 1s - loss: 1.7591 - accuracy: 0.37 - ETA: 0s - loss: 1.7334 - accuracy: 0.37 - ETA: 0s - loss: 1.7094 - accuracy: 0.38 - ETA: 0s - loss: 1.6844 - accuracy: 0.39 - ETA: 0s - loss: 1.6595 - accuracy: 0.40 - 5s 7ms/step - loss: 1.6474 - accuracy: 0.4040 - val_loss: 1.1659 - val_accuracy: 0.5714\n",
+      "Epoch 2/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 1.1689 - accuracy: 0.53 - ETA: 1s - loss: 1.1853 - accuracy: 0.53 - ETA: 1s - loss: 1.2146 - accuracy: 0.53 - ETA: 1s - loss: 1.1864 - accuracy: 0.54 - ETA: 1s - loss: 1.1878 - accuracy: 0.53 - ETA: 1s - loss: 1.1766 - accuracy: 0.54 - ETA: 1s - loss: 1.1397 - accuracy: 0.54 - ETA: 1s - loss: 1.0926 - accuracy: 0.57 - ETA: 1s - loss: 1.1273 - accuracy: 0.55 - ETA: 1s - loss: 1.1230 - accuracy: 0.56 - ETA: 1s - loss: 1.1209 - accuracy: 0.55 - ETA: 1s - loss: 1.1409 - accuracy: 0.54 - ETA: 1s - loss: 1.1405 - accuracy: 0.55 - ETA: 0s - loss: 1.1359 - accuracy: 0.54 - ETA: 0s - loss: 1.1361 - accuracy: 0.54 - ETA: 0s - loss: 1.1366 - accuracy: 0.53 - ETA: 0s - loss: 1.1285 - accuracy: 0.54 - ETA: 0s - loss: 1.1155 - accuracy: 0.54 - ETA: 0s - loss: 1.1064 - accuracy: 0.54 - ETA: 0s - loss: 1.1103 - accuracy: 0.54 - ETA: 0s - loss: 1.1088 - accuracy: 0.54 - 3s 4ms/step - loss: 1.1050 - accuracy: 0.5505 - val_loss: 0.8259 - val_accuracy: 0.6951\n",
+      "Epoch 3/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 1.1657 - accuracy: 0.62 - ETA: 1s - loss: 1.0297 - accuracy: 0.65 - ETA: 2s - loss: 0.9726 - accuracy: 0.63 - ETA: 2s - loss: 0.9639 - accuracy: 0.64 - ETA: 2s - loss: 0.8999 - accuracy: 0.67 - ETA: 1s - loss: 0.8855 - accuracy: 0.69 - ETA: 1s - loss: 0.8684 - accuracy: 0.69 - ETA: 1s - loss: 0.8930 - accuracy: 0.68 - ETA: 1s - loss: 0.8792 - accuracy: 0.69 - ETA: 1s - loss: 0.8761 - accuracy: 0.68 - ETA: 1s - loss: 0.9006 - accuracy: 0.66 - ETA: 1s - loss: 0.9117 - accuracy: 0.65 - ETA: 1s - loss: 0.9005 - accuracy: 0.65 - ETA: 0s - loss: 0.9088 - accuracy: 0.65 - ETA: 0s - loss: 0.9208 - accuracy: 0.64 - ETA: 0s - loss: 0.9158 - accuracy: 0.63 - ETA: 0s - loss: 0.9094 - accuracy: 0.64 - ETA: 0s - loss: 0.9108 - accuracy: 0.63 - ETA: 0s - loss: 0.9111 - accuracy: 0.63 - ETA: 0s - loss: 0.8972 - accuracy: 0.64 - ETA: 0s - loss: 0.8848 - accuracy: 0.65 - 3s 4ms/step - loss: 0.8768 - accuracy: 0.6615 - val_loss: 0.6931 - val_accuracy: 0.7207\n",
+      "Epoch 4/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.7302 - accuracy: 0.71 - ETA: 2s - loss: 0.8262 - accuracy: 0.62 - ETA: 2s - loss: 0.7754 - accuracy: 0.66 - ETA: 2s - loss: 0.8438 - accuracy: 0.63 - ETA: 2s - loss: 0.8224 - accuracy: 0.64 - ETA: 2s - loss: 0.8558 - accuracy: 0.63 - ETA: 1s - loss: 0.8644 - accuracy: 0.63 - ETA: 1s - loss: 0.8531 - accuracy: 0.63 - ETA: 1s - loss: 0.8553 - accuracy: 0.64 - ETA: 1s - loss: 0.8430 - accuracy: 0.65 - ETA: 1s - loss: 0.8547 - accuracy: 0.65 - ETA: 1s - loss: 0.8600 - accuracy: 0.66 - ETA: 1s - loss: 0.8458 - accuracy: 0.66 - ETA: 1s - loss: 0.8280 - accuracy: 0.66 - ETA: 0s - loss: 0.8251 - accuracy: 0.67 - ETA: 0s - loss: 0.8243 - accuracy: 0.66 - ETA: 0s - loss: 0.8126 - accuracy: 0.67 - ETA: 0s - loss: 0.8111 - accuracy: 0.67 - ETA: 0s - loss: 0.8034 - accuracy: 0.67 - ETA: 0s - loss: 0.8006 - accuracy: 0.67 - ETA: 0s - loss: 0.7956 - accuracy: 0.68 - 3s 4ms/step - loss: 0.7886 - accuracy: 0.6828 - val_loss: 0.6377 - val_accuracy: 0.7527\n",
+      "Epoch 5/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.7483 - accuracy: 0.65 - ETA: 2s - loss: 0.7772 - accuracy: 0.67 - ETA: 2s - loss: 0.7717 - accuracy: 0.67 - ETA: 2s - loss: 0.7714 - accuracy: 0.65 - ETA: 2s - loss: 0.7747 - accuracy: 0.66 - ETA: 2s - loss: 0.7828 - accuracy: 0.66 - ETA: 1s - loss: 0.7560 - accuracy: 0.67 - ETA: 1s - loss: 0.7632 - accuracy: 0.67 - ETA: 1s - loss: 0.7435 - accuracy: 0.67 - ETA: 1s - loss: 0.7254 - accuracy: 0.68 - ETA: 1s - loss: 0.7383 - accuracy: 0.68 - ETA: 1s - loss: 0.7453 - accuracy: 0.68 - ETA: 1s - loss: 0.7375 - accuracy: 0.68 - ETA: 0s - loss: 0.7438 - accuracy: 0.68 - ETA: 0s - loss: 0.7291 - accuracy: 0.68 - ETA: 0s - loss: 0.7334 - accuracy: 0.68 - ETA: 0s - loss: 0.7219 - accuracy: 0.69 - ETA: 0s - loss: 0.7123 - accuracy: 0.69 - ETA: 0s - loss: 0.7190 - accuracy: 0.68 - ETA: 0s - loss: 0.7165 - accuracy: 0.69 - ETA: 0s - loss: 0.7038 - accuracy: 0.70 - 3s 4ms/step - loss: 0.6996 - accuracy: 0.7070 - val_loss: 0.5041 - val_accuracy: 0.8081\n",
+      "Epoch 6/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.4186 - accuracy: 0.84 - ETA: 1s - loss: 0.4938 - accuracy: 0.82 - ETA: 1s - loss: 0.5886 - accuracy: 0.79 - ETA: 1s - loss: 0.5768 - accuracy: 0.78 - ETA: 1s - loss: 0.5932 - accuracy: 0.78 - ETA: 1s - loss: 0.6154 - accuracy: 0.76 - ETA: 1s - loss: 0.5818 - accuracy: 0.78 - ETA: 1s - loss: 0.5586 - accuracy: 0.79 - ETA: 1s - loss: 0.5578 - accuracy: 0.79 - ETA: 1s - loss: 0.5580 - accuracy: 0.78 - ETA: 1s - loss: 0.5580 - accuracy: 0.79 - ETA: 1s - loss: 0.5687 - accuracy: 0.78 - ETA: 0s - loss: 0.5542 - accuracy: 0.78 - ETA: 0s - loss: 0.5590 - accuracy: 0.78 - ETA: 0s - loss: 0.5549 - accuracy: 0.78 - ETA: 0s - loss: 0.5587 - accuracy: 0.78 - ETA: 0s - loss: 0.5531 - accuracy: 0.79 - ETA: 0s - loss: 0.5718 - accuracy: 0.78 - ETA: 0s - loss: 0.5740 - accuracy: 0.78 - ETA: 0s - loss: 0.5730 - accuracy: 0.78 - ETA: 0s - loss: 0.5701 - accuracy: 0.78 - 3s 4ms/step - loss: 0.5677 - accuracy: 0.7852 - val_loss: 0.4942 - val_accuracy: 0.7953\n",
+      "Epoch 7/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.5380 - accuracy: 0.78 - ETA: 2s - loss: 0.5388 - accuracy: 0.76 - ETA: 2s - loss: 0.5438 - accuracy: 0.77 - ETA: 2s - loss: 0.5308 - accuracy: 0.78 - ETA: 2s - loss: 0.5148 - accuracy: 0.76 - ETA: 1s - loss: 0.5688 - accuracy: 0.75 - ETA: 1s - loss: 0.5506 - accuracy: 0.75 - ETA: 1s - loss: 0.5409 - accuracy: 0.76 - ETA: 1s - loss: 0.5528 - accuracy: 0.76 - ETA: 1s - loss: 0.5465 - accuracy: 0.76 - ETA: 1s - loss: 0.5389 - accuracy: 0.77 - ETA: 1s - loss: 0.5316 - accuracy: 0.77 - ETA: 1s - loss: 0.5243 - accuracy: 0.78 - ETA: 0s - loss: 0.5203 - accuracy: 0.78 - ETA: 0s - loss: 0.5279 - accuracy: 0.78 - ETA: 0s - loss: 0.5226 - accuracy: 0.78 - ETA: 0s - loss: 0.5156 - accuracy: 0.78 - ETA: 0s - loss: 0.5114 - accuracy: 0.78 - ETA: 0s - loss: 0.5075 - accuracy: 0.79 - ETA: 0s - loss: 0.5139 - accuracy: 0.79 - ETA: 0s - loss: 0.5146 - accuracy: 0.79 - 3s 4ms/step - loss: 0.5199 - accuracy: 0.7923 - val_loss: 0.4109 - val_accuracy: 0.8486\n",
+      "Epoch 8/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.6302 - accuracy: 0.68 - ETA: 1s - loss: 0.5093 - accuracy: 0.76 - ETA: 1s - loss: 0.4595 - accuracy: 0.79 - ETA: 1s - loss: 0.4537 - accuracy: 0.80 - ETA: 1s - loss: 0.5101 - accuracy: 0.78 - ETA: 1s - loss: 0.5269 - accuracy: 0.77 - ETA: 1s - loss: 0.5585 - accuracy: 0.76 - ETA: 1s - loss: 0.5607 - accuracy: 0.75 - ETA: 1s - loss: 0.5315 - accuracy: 0.76 - ETA: 1s - loss: 0.5156 - accuracy: 0.77 - ETA: 1s - loss: 0.5094 - accuracy: 0.77 - ETA: 1s - loss: 0.5043 - accuracy: 0.77 - ETA: 0s - loss: 0.5121 - accuracy: 0.78 - ETA: 0s - loss: 0.5207 - accuracy: 0.77 - ETA: 0s - loss: 0.5084 - accuracy: 0.78 - ETA: 0s - loss: 0.5173 - accuracy: 0.78 - ETA: 0s - loss: 0.5047 - accuracy: 0.78 - ETA: 0s - loss: 0.4943 - accuracy: 0.79 - ETA: 0s - loss: 0.5012 - accuracy: 0.79 - ETA: 0s - loss: 0.5003 - accuracy: 0.79 - ETA: 0s - loss: 0.4982 - accuracy: 0.79 - 3s 4ms/step - loss: 0.4998 - accuracy: 0.7937 - val_loss: 0.4046 - val_accuracy: 0.8230\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Train on 120 samples, validate on 80 samples\n",
-      "Epoch 1/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 33.5508 - accuracy: 0.125 - 0s 2ms/step - loss: 18.1951 - accuracy: 0.1833 - val_loss: 10.3962 - val_accuracy: 0.4000\n",
-      "Epoch 2/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 17.4644 - accuracy: 0.250 - 0s 472us/step - loss: 8.6679 - accuracy: 0.4583 - val_loss: 4.0171 - val_accuracy: 0.3625\n",
-      "Epoch 3/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 2.5825 - accuracy: 0.53 - 0s 519us/step - loss: 3.3282 - accuracy: 0.5583 - val_loss: 5.4318 - val_accuracy: 0.4625\n",
-      "Epoch 4/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 4.2256 - accuracy: 0.62 - 0s 599us/step - loss: 2.1849 - accuracy: 0.6417 - val_loss: 4.0702 - val_accuracy: 0.4625\n",
-      "Epoch 5/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 1.8456 - accuracy: 0.59 - 0s 648us/step - loss: 1.7867 - accuracy: 0.6667 - val_loss: 2.7362 - val_accuracy: 0.5125\n",
-      "Epoch 6/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 1.3590 - accuracy: 0.68 - 0s 697us/step - loss: 1.0915 - accuracy: 0.7500 - val_loss: 2.6797 - val_accuracy: 0.5875\n",
-      "Epoch 7/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 1.3637 - accuracy: 0.75 - 0s 669us/step - loss: 1.0301 - accuracy: 0.7833 - val_loss: 2.0103 - val_accuracy: 0.6250\n",
-      "Epoch 8/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.8696 - accuracy: 0.75 - 0s 583us/step - loss: 0.5904 - accuracy: 0.8250 - val_loss: 1.7943 - val_accuracy: 0.5625\n",
-      "Epoch 9/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.5246 - accuracy: 0.81 - 0s 719us/step - loss: 0.4340 - accuracy: 0.8500 - val_loss: 2.0257 - val_accuracy: 0.5875\n",
-      "Epoch 10/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.2066 - accuracy: 0.90 - 0s 540us/step - loss: 0.4555 - accuracy: 0.9000 - val_loss: 1.9874 - val_accuracy: 0.5875\n",
-      "Epoch 11/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.2767 - accuracy: 0.90 - 0s 522us/step - loss: 0.2692 - accuracy: 0.9417 - val_loss: 1.6319 - val_accuracy: 0.5625\n",
-      "Epoch 12/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.3339 - accuracy: 0.90 - 0s 637us/step - loss: 0.2545 - accuracy: 0.9167 - val_loss: 1.5142 - val_accuracy: 0.6250\n",
-      "Epoch 13/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0689 - accuracy: 1.00 - 0s 538us/step - loss: 0.1525 - accuracy: 0.9750 - val_loss: 1.7884 - val_accuracy: 0.5750\n",
-      "Epoch 14/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1707 - accuracy: 0.90 - 0s 459us/step - loss: 0.1651 - accuracy: 0.9417 - val_loss: 1.5603 - val_accuracy: 0.6375\n",
-      "Epoch 15/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.1475 - accuracy: 0.96 - 0s 482us/step - loss: 0.0835 - accuracy: 0.9917 - val_loss: 1.4115 - val_accuracy: 0.6750\n",
-      "Epoch 16/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0767 - accuracy: 1.00 - 0s 487us/step - loss: 0.0952 - accuracy: 0.9750 - val_loss: 1.4902 - val_accuracy: 0.6125\n",
-      "Epoch 17/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0767 - accuracy: 1.00 - 0s 487us/step - loss: 0.0658 - accuracy: 0.9917 - val_loss: 1.5738 - val_accuracy: 0.5875\n",
-      "Epoch 18/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0513 - accuracy: 1.00 - 0s 496us/step - loss: 0.0562 - accuracy: 1.0000 - val_loss: 1.8580 - val_accuracy: 0.6000\n",
-      "Epoch 19/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0637 - accuracy: 1.00 - 0s 560us/step - loss: 0.0512 - accuracy: 1.0000 - val_loss: 1.6093 - val_accuracy: 0.6500\n",
-      "Epoch 20/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0357 - accuracy: 1.00 - 0s 488us/step - loss: 0.0360 - accuracy: 1.0000 - val_loss: 1.4074 - val_accuracy: 0.6625\n",
-      "Epoch 21/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0521 - accuracy: 1.00 - 0s 557us/step - loss: 0.0344 - accuracy: 1.0000 - val_loss: 1.5700 - val_accuracy: 0.6375\n",
-      "Epoch 22/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0250 - accuracy: 1.00 - 0s 489us/step - loss: 0.0310 - accuracy: 1.0000 - val_loss: 1.6343 - val_accuracy: 0.6250\n",
-      "Epoch 23/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0233 - accuracy: 1.00 - 0s 470us/step - loss: 0.0270 - accuracy: 1.0000 - val_loss: 1.4676 - val_accuracy: 0.6625\n",
-      "Epoch 24/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0204 - accuracy: 1.00 - 0s 504us/step - loss: 0.0247 - accuracy: 1.0000 - val_loss: 1.4808 - val_accuracy: 0.6625\n",
-      "Epoch 25/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0250 - accuracy: 1.00 - 0s 559us/step - loss: 0.0213 - accuracy: 1.0000 - val_loss: 1.5529 - val_accuracy: 0.6750\n",
-      "Epoch 26/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0233 - accuracy: 1.00 - 0s 550us/step - loss: 0.0216 - accuracy: 1.0000 - val_loss: 1.5447 - val_accuracy: 0.6750\n",
-      "Epoch 27/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0205 - accuracy: 1.00 - 0s 567us/step - loss: 0.0189 - accuracy: 1.0000 - val_loss: 1.4762 - val_accuracy: 0.6375\n",
-      "Epoch 28/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0221 - accuracy: 1.00 - 0s 510us/step - loss: 0.0188 - accuracy: 1.0000 - val_loss: 1.5035 - val_accuracy: 0.6500\n",
-      "Epoch 29/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0172 - accuracy: 1.00 - 0s 624us/step - loss: 0.0171 - accuracy: 1.0000 - val_loss: 1.5444 - val_accuracy: 0.6750\n",
-      "Epoch 30/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0144 - accuracy: 1.00 - 0s 575us/step - loss: 0.0165 - accuracy: 1.0000 - val_loss: 1.5185 - val_accuracy: 0.6875\n",
-      "Epoch 31/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0202 - accuracy: 1.00 - 0s 747us/step - loss: 0.0154 - accuracy: 1.0000 - val_loss: 1.4934 - val_accuracy: 0.6750\n",
-      "Epoch 32/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0136 - accuracy: 1.00 - 0s 423us/step - loss: 0.0147 - accuracy: 1.0000 - val_loss: 1.4942 - val_accuracy: 0.6750\n",
-      "Epoch 33/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0160 - accuracy: 1.00 - 0s 521us/step - loss: 0.0142 - accuracy: 1.0000 - val_loss: 1.5134 - val_accuracy: 0.6750\n",
-      "Epoch 34/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0078 - accuracy: 1.00 - 0s 506us/step - loss: 0.0134 - accuracy: 1.0000 - val_loss: 1.5412 - val_accuracy: 0.6750\n",
-      "Epoch 35/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0168 - accuracy: 1.00 - 0s 513us/step - loss: 0.0130 - accuracy: 1.0000 - val_loss: 1.5457 - val_accuracy: 0.6750\n",
-      "Epoch 36/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0076 - accuracy: 1.00 - 0s 563us/step - loss: 0.0124 - accuracy: 1.0000 - val_loss: 1.5149 - val_accuracy: 0.6750\n",
-      "Epoch 37/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0105 - accuracy: 1.00 - 0s 475us/step - loss: 0.0121 - accuracy: 1.0000 - val_loss: 1.4925 - val_accuracy: 0.6625\n",
-      "Epoch 38/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0116 - accuracy: 1.00 - 0s 542us/step - loss: 0.0117 - accuracy: 1.0000 - val_loss: 1.5301 - val_accuracy: 0.6750\n",
-      "Epoch 39/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0103 - accuracy: 1.00 - 0s 495us/step - loss: 0.0114 - accuracy: 1.0000 - val_loss: 1.5482 - val_accuracy: 0.6750\n",
-      "Epoch 40/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0136 - accuracy: 1.00 - 0s 613us/step - loss: 0.0110 - accuracy: 1.0000 - val_loss: 1.5142 - val_accuracy: 0.6500\n",
-      "Epoch 41/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0080 - accuracy: 1.00 - 0s 305us/step - loss: 0.0106 - accuracy: 1.0000 - val_loss: 1.5218 - val_accuracy: 0.6625\n",
-      "Epoch 42/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0084 - accuracy: 1.00 - 0s 509us/step - loss: 0.0100 - accuracy: 1.0000 - val_loss: 1.5515 - val_accuracy: 0.6875\n",
-      "Epoch 43/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0089 - accuracy: 1.00 - 0s 650us/step - loss: 0.0100 - accuracy: 1.0000 - val_loss: 1.5745 - val_accuracy: 0.6875\n",
-      "Epoch 44/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0086 - accuracy: 1.00 - 0s 387us/step - loss: 0.0097 - accuracy: 1.0000 - val_loss: 1.5305 - val_accuracy: 0.6625\n"
+      "Epoch 9/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.4845 - accuracy: 0.75 - ETA: 2s - loss: 0.4677 - accuracy: 0.78 - ETA: 2s - loss: 0.4696 - accuracy: 0.80 - ETA: 2s - loss: 0.4628 - accuracy: 0.81 - ETA: 1s - loss: 0.4336 - accuracy: 0.81 - ETA: 1s - loss: 0.4494 - accuracy: 0.82 - ETA: 1s - loss: 0.4543 - accuracy: 0.81 - ETA: 1s - loss: 0.4611 - accuracy: 0.80 - ETA: 1s - loss: 0.4484 - accuracy: 0.81 - ETA: 1s - loss: 0.4424 - accuracy: 0.82 - ETA: 1s - loss: 0.4411 - accuracy: 0.82 - ETA: 1s - loss: 0.4719 - accuracy: 0.81 - ETA: 1s - loss: 0.4809 - accuracy: 0.80 - ETA: 0s - loss: 0.4852 - accuracy: 0.80 - ETA: 0s - loss: 0.4700 - accuracy: 0.81 - ETA: 0s - loss: 0.4808 - accuracy: 0.80 - ETA: 0s - loss: 0.4666 - accuracy: 0.81 - ETA: 0s - loss: 0.4851 - accuracy: 0.80 - ETA: 0s - loss: 0.4920 - accuracy: 0.80 - ETA: 0s - loss: 0.4855 - accuracy: 0.80 - ETA: 0s - loss: 0.4795 - accuracy: 0.81 - 3s 4ms/step - loss: 0.4820 - accuracy: 0.8094 - val_loss: 0.4047 - val_accuracy: 0.8124\n",
+      "Epoch 10/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.3916 - accuracy: 0.87 - ETA: 2s - loss: 0.3660 - accuracy: 0.87 - ETA: 2s - loss: 0.3773 - accuracy: 0.86 - ETA: 2s - loss: 0.4001 - accuracy: 0.85 - ETA: 2s - loss: 0.3903 - accuracy: 0.85 - ETA: 2s - loss: 0.3829 - accuracy: 0.86 - ETA: 1s - loss: 0.3896 - accuracy: 0.85 - ETA: 1s - loss: 0.3891 - accuracy: 0.85 - ETA: 1s - loss: 0.3916 - accuracy: 0.85 - ETA: 1s - loss: 0.3775 - accuracy: 0.85 - ETA: 1s - loss: 0.3794 - accuracy: 0.86 - ETA: 1s - loss: 0.3743 - accuracy: 0.86 - ETA: 1s - loss: 0.3642 - accuracy: 0.87 - ETA: 1s - loss: 0.3599 - accuracy: 0.87 - ETA: 0s - loss: 0.3582 - accuracy: 0.87 - ETA: 0s - loss: 0.3602 - accuracy: 0.87 - ETA: 0s - loss: 0.3793 - accuracy: 0.86 - ETA: 0s - loss: 0.4010 - accuracy: 0.85 - ETA: 0s - loss: 0.4015 - accuracy: 0.85 - ETA: 0s - loss: 0.3929 - accuracy: 0.85 - ETA: 0s - loss: 0.3934 - accuracy: 0.85 - 3s 5ms/step - loss: 0.3922 - accuracy: 0.8592 - val_loss: 0.3622 - val_accuracy: 0.8699\n",
+      "Epoch 11/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.4113 - accuracy: 0.87 - ETA: 1s - loss: 0.3553 - accuracy: 0.87 - ETA: 1s - loss: 0.3829 - accuracy: 0.86 - ETA: 2s - loss: 0.3465 - accuracy: 0.88 - ETA: 2s - loss: 0.3565 - accuracy: 0.86 - ETA: 2s - loss: 0.3519 - accuracy: 0.85 - ETA: 2s - loss: 0.3343 - accuracy: 0.87 - ETA: 2s - loss: 0.4087 - accuracy: 0.85 - ETA: 1s - loss: 0.3958 - accuracy: 0.85 - ETA: 1s - loss: 0.4004 - accuracy: 0.84 - ETA: 1s - loss: 0.3891 - accuracy: 0.84 - ETA: 1s - loss: 0.3870 - accuracy: 0.85 - ETA: 1s - loss: 0.3787 - accuracy: 0.85 - ETA: 1s - loss: 0.3815 - accuracy: 0.85 - ETA: 1s - loss: 0.3927 - accuracy: 0.85 - ETA: 0s - loss: 0.3890 - accuracy: 0.85 - ETA: 0s - loss: 0.3885 - accuracy: 0.85 - ETA: 0s - loss: 0.3870 - accuracy: 0.85 - ETA: 0s - loss: 0.3833 - accuracy: 0.85 - ETA: 0s - loss: 0.3781 - accuracy: 0.85 - ETA: 0s - loss: 0.3750 - accuracy: 0.85 - 4s 6ms/step - loss: 0.3777 - accuracy: 0.8549 - val_loss: 0.3595 - val_accuracy: 0.8742\n",
+      "Epoch 12/20\n",
+      "703/703 [==============================] - ETA: 3s - loss: 0.3841 - accuracy: 0.81 - ETA: 2s - loss: 0.4127 - accuracy: 0.84 - ETA: 2s - loss: 0.4122 - accuracy: 0.84 - ETA: 2s - loss: 0.3829 - accuracy: 0.84 - ETA: 2s - loss: 0.3869 - accuracy: 0.84 - ETA: 2s - loss: 0.3867 - accuracy: 0.86 - ETA: 2s - loss: 0.3801 - accuracy: 0.86 - ETA: 2s - loss: 0.3770 - accuracy: 0.85 - ETA: 1s - loss: 0.3931 - accuracy: 0.84 - ETA: 1s - loss: 0.3823 - accuracy: 0.85 - ETA: 1s - loss: 0.3746 - accuracy: 0.85 - ETA: 1s - loss: 0.3640 - accuracy: 0.85 - ETA: 1s - loss: 0.3766 - accuracy: 0.85 - ETA: 0s - loss: 0.3792 - accuracy: 0.84 - ETA: 0s - loss: 0.3734 - accuracy: 0.84 - ETA: 0s - loss: 0.3676 - accuracy: 0.84 - ETA: 0s - loss: 0.3708 - accuracy: 0.84 - ETA: 0s - loss: 0.3666 - accuracy: 0.84 - ETA: 0s - loss: 0.3632 - accuracy: 0.85 - ETA: 0s - loss: 0.3540 - accuracy: 0.85 - ETA: 0s - loss: 0.3436 - accuracy: 0.86 - 3s 5ms/step - loss: 0.3428 - accuracy: 0.8620 - val_loss: 0.2976 - val_accuracy: 0.8806\n",
+      "Epoch 13/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.0931 - accuracy: 0.96 - ETA: 2s - loss: 0.2314 - accuracy: 0.89 - ETA: 2s - loss: 0.2322 - accuracy: 0.88 - ETA: 2s - loss: 0.2098 - accuracy: 0.90 - ETA: 2s - loss: 0.2262 - accuracy: 0.90 - ETA: 2s - loss: 0.2380 - accuracy: 0.89 - ETA: 2s - loss: 0.2444 - accuracy: 0.89 - ETA: 2s - loss: 0.2267 - accuracy: 0.90 - ETA: 1s - loss: 0.2296 - accuracy: 0.90 - ETA: 1s - loss: 0.2357 - accuracy: 0.90 - ETA: 1s - loss: 0.2746 - accuracy: 0.88 - ETA: 1s - loss: 0.2888 - accuracy: 0.87 - ETA: 1s - loss: 0.2861 - accuracy: 0.87 - ETA: 1s - loss: 0.2749 - accuracy: 0.88 - ETA: 0s - loss: 0.2702 - accuracy: 0.88 - ETA: 0s - loss: 0.2643 - accuracy: 0.89 - ETA: 0s - loss: 0.2651 - accuracy: 0.89 - ETA: 0s - loss: 0.2652 - accuracy: 0.89 - ETA: 0s - loss: 0.2767 - accuracy: 0.88 - ETA: 0s - loss: 0.2743 - accuracy: 0.88 - ETA: 0s - loss: 0.2719 - accuracy: 0.88 - 3s 5ms/step - loss: 0.2763 - accuracy: 0.8862 - val_loss: 0.3465 - val_accuracy: 0.8571\n",
+      "Epoch 14/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.3396 - accuracy: 0.87 - ETA: 1s - loss: 0.3321 - accuracy: 0.87 - ETA: 1s - loss: 0.2989 - accuracy: 0.89 - ETA: 1s - loss: 0.2848 - accuracy: 0.89 - ETA: 1s - loss: 0.2650 - accuracy: 0.90 - ETA: 1s - loss: 0.2664 - accuracy: 0.90 - ETA: 1s - loss: 0.2753 - accuracy: 0.89 - ETA: 1s - loss: 0.2679 - accuracy: 0.90 - ETA: 1s - loss: 0.2793 - accuracy: 0.89 - ETA: 1s - loss: 0.2694 - accuracy: 0.89 - ETA: 1s - loss: 0.2679 - accuracy: 0.89 - ETA: 1s - loss: 0.2611 - accuracy: 0.90 - ETA: 1s - loss: 0.2625 - accuracy: 0.89 - ETA: 0s - loss: 0.2566 - accuracy: 0.89 - ETA: 0s - loss: 0.2593 - accuracy: 0.89 - ETA: 0s - loss: 0.2597 - accuracy: 0.89 - ETA: 0s - loss: 0.2538 - accuracy: 0.90 - ETA: 0s - loss: 0.2597 - accuracy: 0.89 - ETA: 0s - loss: 0.2544 - accuracy: 0.89 - ETA: 0s - loss: 0.2526 - accuracy: 0.90 - ETA: 0s - loss: 0.2691 - accuracy: 0.89 - 3s 4ms/step - loss: 0.2748 - accuracy: 0.8905 - val_loss: 0.2620 - val_accuracy: 0.8913\n",
+      "Epoch 15/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.2962 - accuracy: 0.87 - ETA: 2s - loss: 0.3433 - accuracy: 0.84 - ETA: 2s - loss: 0.3125 - accuracy: 0.86 - ETA: 2s - loss: 0.3087 - accuracy: 0.87 - ETA: 2s - loss: 0.2851 - accuracy: 0.88 - ETA: 2s - loss: 0.2723 - accuracy: 0.89 - ETA: 1s - loss: 0.2781 - accuracy: 0.89 - ETA: 1s - loss: 0.2752 - accuracy: 0.89 - ETA: 1s - loss: 0.2694 - accuracy: 0.90 - ETA: 1s - loss: 0.2705 - accuracy: 0.91 - ETA: 1s - loss: 0.2786 - accuracy: 0.91 - ETA: 1s - loss: 0.2819 - accuracy: 0.91 - ETA: 1s - loss: 0.2761 - accuracy: 0.91 - ETA: 1s - loss: 0.2753 - accuracy: 0.91 - ETA: 0s - loss: 0.2641 - accuracy: 0.92 - ETA: 0s - loss: 0.2561 - accuracy: 0.92 - ETA: 0s - loss: 0.2649 - accuracy: 0.92 - ETA: 0s - loss: 0.2697 - accuracy: 0.91 - ETA: 0s - loss: 0.2690 - accuracy: 0.91 - ETA: 0s - loss: 0.2702 - accuracy: 0.91 - ETA: 0s - loss: 0.2701 - accuracy: 0.91 - 3s 4ms/step - loss: 0.2660 - accuracy: 0.9118 - val_loss: 0.2809 - val_accuracy: 0.8763\n",
+      "Epoch 16/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.2073 - accuracy: 0.87 - ETA: 2s - loss: 0.2524 - accuracy: 0.85 - ETA: 1s - loss: 0.2867 - accuracy: 0.85 - ETA: 1s - loss: 0.2501 - accuracy: 0.87 - ETA: 1s - loss: 0.2704 - accuracy: 0.88 - ETA: 1s - loss: 0.2697 - accuracy: 0.87 - ETA: 1s - loss: 0.2504 - accuracy: 0.88 - ETA: 1s - loss: 0.2425 - accuracy: 0.89 - ETA: 1s - loss: 0.2301 - accuracy: 0.90 - ETA: 1s - loss: 0.2360 - accuracy: 0.90 - ETA: 1s - loss: 0.2324 - accuracy: 0.90 - ETA: 1s - loss: 0.2269 - accuracy: 0.90 - ETA: 0s - loss: 0.2152 - accuracy: 0.91 - ETA: 0s - loss: 0.2151 - accuracy: 0.91 - ETA: 0s - loss: 0.2126 - accuracy: 0.91 - ETA: 0s - loss: 0.2134 - accuracy: 0.91 - ETA: 0s - loss: 0.2123 - accuracy: 0.91 - ETA: 0s - loss: 0.2169 - accuracy: 0.91 - ETA: 0s - loss: 0.2122 - accuracy: 0.91 - ETA: 0s - loss: 0.2132 - accuracy: 0.91 - ETA: 0s - loss: 0.2165 - accuracy: 0.91 - 3s 4ms/step - loss: 0.2229 - accuracy: 0.9147 - val_loss: 0.2815 - val_accuracy: 0.8742\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Epoch 45/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0108 - accuracy: 1.00 - 0s 492us/step - loss: 0.0095 - accuracy: 1.0000 - val_loss: 1.5451 - val_accuracy: 0.6750\n",
-      "Epoch 46/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0097 - accuracy: 1.00 - 0s 600us/step - loss: 0.0090 - accuracy: 1.0000 - val_loss: 1.5218 - val_accuracy: 0.6750\n",
-      "Epoch 47/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0074 - accuracy: 1.00 - 0s 382us/step - loss: 0.0087 - accuracy: 1.0000 - val_loss: 1.5415 - val_accuracy: 0.6750\n",
-      "Epoch 48/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0082 - accuracy: 1.00 - 0s 454us/step - loss: 0.0084 - accuracy: 1.0000 - val_loss: 1.5488 - val_accuracy: 0.6750\n",
-      "Epoch 49/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0066 - accuracy: 1.00 - 0s 771us/step - loss: 0.0081 - accuracy: 1.0000 - val_loss: 1.5506 - val_accuracy: 0.6750\n",
-      "Epoch 50/50\n",
-      "120/120 [==============================] - ETA: 0s - loss: 0.0081 - accuracy: 1.00 - 0s 542us/step - loss: 0.0079 - accuracy: 1.0000 - val_loss: 1.5494 - val_accuracy: 0.6750\n"
+      "Epoch 17/20\n",
+      "703/703 [==============================] - ETA: 2s - loss: 0.0761 - accuracy: 1.00 - ETA: 2s - loss: 0.0978 - accuracy: 0.98 - ETA: 2s - loss: 0.1218 - accuracy: 0.95 - ETA: 2s - loss: 0.1368 - accuracy: 0.94 - ETA: 2s - loss: 0.1530 - accuracy: 0.93 - ETA: 2s - loss: 0.1898 - accuracy: 0.92 - ETA: 2s - loss: 0.1810 - accuracy: 0.93 - ETA: 2s - loss: 0.1851 - accuracy: 0.93 - ETA: 1s - loss: 0.2138 - accuracy: 0.93 - ETA: 1s - loss: 0.2094 - accuracy: 0.93 - ETA: 1s - loss: 0.2079 - accuracy: 0.93 - ETA: 1s - loss: 0.1979 - accuracy: 0.93 - ETA: 1s - loss: 0.2033 - accuracy: 0.93 - ETA: 1s - loss: 0.2072 - accuracy: 0.92 - ETA: 0s - loss: 0.2051 - accuracy: 0.92 - ETA: 0s - loss: 0.2008 - accuracy: 0.93 - ETA: 0s - loss: 0.1977 - accuracy: 0.93 - ETA: 0s - loss: 0.2074 - accuracy: 0.92 - ETA: 0s - loss: 0.2194 - accuracy: 0.92 - ETA: 0s - loss: 0.2159 - accuracy: 0.92 - ETA: 0s - loss: 0.2109 - accuracy: 0.93 - 3s 5ms/step - loss: 0.2068 - accuracy: 0.9317 - val_loss: 0.2568 - val_accuracy: 0.8870\n",
+      "Epoch 18/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.2396 - accuracy: 0.81 - ETA: 2s - loss: 0.2274 - accuracy: 0.89 - ETA: 2s - loss: 0.2077 - accuracy: 0.89 - ETA: 2s - loss: 0.1903 - accuracy: 0.91 - ETA: 2s - loss: 0.1785 - accuracy: 0.91 - ETA: 2s - loss: 0.1704 - accuracy: 0.92 - ETA: 1s - loss: 0.1823 - accuracy: 0.91 - ETA: 1s - loss: 0.1723 - accuracy: 0.92 - ETA: 1s - loss: 0.1623 - accuracy: 0.93 - ETA: 1s - loss: 0.1524 - accuracy: 0.93 - ETA: 1s - loss: 0.1414 - accuracy: 0.94 - ETA: 1s - loss: 0.1466 - accuracy: 0.94 - ETA: 1s - loss: 0.1635 - accuracy: 0.92 - ETA: 0s - loss: 0.1613 - accuracy: 0.92 - ETA: 0s - loss: 0.1602 - accuracy: 0.92 - ETA: 0s - loss: 0.1611 - accuracy: 0.93 - ETA: 0s - loss: 0.1583 - accuracy: 0.93 - ETA: 0s - loss: 0.1558 - accuracy: 0.93 - ETA: 0s - loss: 0.1629 - accuracy: 0.93 - ETA: 0s - loss: 0.1574 - accuracy: 0.93 - ETA: 0s - loss: 0.1612 - accuracy: 0.93 - 3s 4ms/step - loss: 0.1574 - accuracy: 0.9388 - val_loss: 0.2297 - val_accuracy: 0.9041\n",
+      "Epoch 19/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.2134 - accuracy: 0.90 - ETA: 2s - loss: 0.1912 - accuracy: 0.93 - ETA: 2s - loss: 0.1658 - accuracy: 0.94 - ETA: 2s - loss: 0.1487 - accuracy: 0.95 - ETA: 2s - loss: 0.1577 - accuracy: 0.94 - ETA: 1s - loss: 0.1700 - accuracy: 0.94 - ETA: 1s - loss: 0.1669 - accuracy: 0.94 - ETA: 1s - loss: 0.1695 - accuracy: 0.94 - ETA: 1s - loss: 0.1748 - accuracy: 0.93 - ETA: 1s - loss: 0.1761 - accuracy: 0.93 - ETA: 1s - loss: 0.1749 - accuracy: 0.93 - ETA: 1s - loss: 0.1706 - accuracy: 0.93 - ETA: 1s - loss: 0.1651 - accuracy: 0.93 - ETA: 1s - loss: 0.1596 - accuracy: 0.94 - ETA: 0s - loss: 0.1659 - accuracy: 0.94 - ETA: 0s - loss: 0.1604 - accuracy: 0.94 - ETA: 0s - loss: 0.1601 - accuracy: 0.94 - ETA: 0s - loss: 0.1546 - accuracy: 0.94 - ETA: 0s - loss: 0.1610 - accuracy: 0.94 - ETA: 0s - loss: 0.1590 - accuracy: 0.94 - ETA: 0s - loss: 0.1592 - accuracy: 0.94 - 3s 4ms/step - loss: 0.1609 - accuracy: 0.9445 - val_loss: 0.2845 - val_accuracy: 0.8998\n",
+      "Epoch 20/20\n",
+      "703/703 [==============================] - ETA: 1s - loss: 0.2891 - accuracy: 0.87 - ETA: 2s - loss: 0.2990 - accuracy: 0.87 - ETA: 2s - loss: 0.2143 - accuracy: 0.91 - ETA: 1s - loss: 0.1812 - accuracy: 0.92 - ETA: 1s - loss: 0.1767 - accuracy: 0.93 - ETA: 1s - loss: 0.1552 - accuracy: 0.94 - ETA: 1s - loss: 0.1531 - accuracy: 0.94 - ETA: 1s - loss: 0.1448 - accuracy: 0.94 - ETA: 1s - loss: 0.1562 - accuracy: 0.94 - ETA: 1s - loss: 0.1540 - accuracy: 0.94 - ETA: 1s - loss: 0.1491 - accuracy: 0.94 - ETA: 1s - loss: 0.1528 - accuracy: 0.94 - ETA: 1s - loss: 0.1484 - accuracy: 0.94 - ETA: 0s - loss: 0.1449 - accuracy: 0.95 - ETA: 0s - loss: 0.1527 - accuracy: 0.94 - ETA: 0s - loss: 0.1554 - accuracy: 0.94 - ETA: 0s - loss: 0.1582 - accuracy: 0.93 - ETA: 0s - loss: 0.1533 - accuracy: 0.94 - ETA: 0s - loss: 0.1489 - accuracy: 0.94 - ETA: 0s - loss: 0.1470 - accuracy: 0.94 - ETA: 0s - loss: 0.1441 - accuracy: 0.94 - 3s 4ms/step - loss: 0.1417 - accuracy: 0.9502 - val_loss: 0.2835 - val_accuracy: 0.8742\n"
      ]
     },
     {
      "data": {
       "text/plain": [
-       "<keras.callbacks.callbacks.History at 0x1da2d108208>"
+       "<keras.callbacks.callbacks.History at 0x1dd64399688>"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 23,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "wandb.init()\n",
-    "\n",
+    "print(y_train_hot.shape)\n",
+    "print(labels.shape)\n",
+    "print(X_train.shape)\n",
     "# Train the CNN model\n",
     "#    X_train: Input data\n",
     "#    y_train_hot: Target data\n",
-    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
+    "model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_val, y_val_hot), callbacks=[WandbCallback(data_type=\"image\", labels=labels)])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 24,
    "metadata": {},
    "outputs": [
     {
@@ -377,7 +406,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 25,
    "metadata": {
     "scrolled": true
    },
@@ -391,29 +420,49 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 26,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Model: \"sequential_1\"\n",
+      "Model: \"sequential_2\"\n",
       "_________________________________________________________________\n",
       "Layer (type)                 Output Shape              Param #   \n",
       "=================================================================\n",
-      "conv2d_1 (Conv2D)            (None, 18, 9, 32)         320       \n",
+      "conv2d_4 (Conv2D)            (None, 126, 30, 24)       240       \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_3 (MaxPooling2 (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "activation_6 (Activation)    (None, 63, 15, 24)        0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_5 (Conv2D)            (None, 61, 13, 48)        10416     \n",
+      "_________________________________________________________________\n",
+      "max_pooling2d_4 (MaxPooling2 (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "activation_7 (Activation)    (None, 30, 6, 48)         0         \n",
+      "_________________________________________________________________\n",
+      "conv2d_6 (Conv2D)            (None, 28, 6, 48)         6960      \n",
+      "_________________________________________________________________\n",
+      "activation_8 (Activation)    (None, 28, 6, 48)         0         \n",
       "_________________________________________________________________\n",
-      "max_pooling2d_1 (MaxPooling2 (None, 9, 4, 32)          0         \n",
+      "flatten_2 (Flatten)          (None, 8064)              0         \n",
       "_________________________________________________________________\n",
-      "flatten_1 (Flatten)          (None, 1152)              0         \n",
+      "dropout_3 (Dropout)          (None, 8064)              0         \n",
       "_________________________________________________________________\n",
-      "dense_1 (Dense)              (None, 128)               147584    \n",
+      "dense_3 (Dense)              (None, 64)                516160    \n",
       "_________________________________________________________________\n",
-      "dense_2 (Dense)              (None, 5)                 645       \n",
+      "activation_9 (Activation)    (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dropout_4 (Dropout)          (None, 64)                0         \n",
+      "_________________________________________________________________\n",
+      "dense_4 (Dense)              (None, 5)                 325       \n",
+      "_________________________________________________________________\n",
+      "activation_10 (Activation)   (None, 5)                 0         \n",
       "=================================================================\n",
-      "Total params: 148,549\n",
-      "Trainable params: 148,549\n",
+      "Total params: 534,101\n",
+      "Trainable params: 534,101\n",
       "Non-trainable params: 0\n",
       "_________________________________________________________________\n"
      ]
@@ -426,61 +475,795 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 27,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
+      "[[ 19   0   0   0   0]\n",
+      " [  1 112   0  10   0]\n",
+      " [  0   0  14   0   0]\n",
+      " [  1  12   1  67  14]\n",
+      " [  0   1   0   3  39]]\n",
+      "Accuracy for class GOC : [1.]\n",
+      "Accuracy for class GRA : [0.91056911]\n",
+      "Accuracy for class GST : [1.]\n",
+      "Accuracy for class GWG : [0.70526316]\n",
+      "Accuracy for class GWC : [0.90697674]\n",
+      "Overall Accuracy : 0.8537414965986394\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "'[[ 19   0   0   0   0]\\n [  0 119   0   4   0]\\n [  0   0  14   0   0]\\n [  2  19   0  67   7]\\n [  0   4   0   3  36]]\\nAccuracy for class GOC : [1.]\\nAccuracy for class GRA : [0.96747967]\\nAccuracy for class GST : [1.]\\nAccuracy for class GWG : [0.70526316]\\nAccuracy for class GWC : [0.8372093]\\nOverall Accuracy : 0.8673469387755102'"
+      ]
+     },
+     "execution_count": 27,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_pred_ohe = loaded_model.predict(X_test)  # shape=(n_samples, 12)\n",
+    "y_pred_labels = np.argmax(y_pred_ohe, axis=1)  # only necessary if output has one-hot-encoding, shape=(n_samples)\n",
+    "\n",
+    "confusion_matrix = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_labels)  # shape\n",
+    "print(confusion_matrix)\n",
+    "\n",
+    "for class_i in range(len(labels)) :\n",
+    "    indices = np.argwhere(y_test == class_i)\n",
+    "    sum = 0\n",
+    "    for index in indices:\n",
+    "        sum += (y_test[index] == y_pred_labels[index])\n",
+    "    if(len(indices) > 0) : mean = sum/len(indices)\n",
+    "    else : mean = \"N/A\"\n",
+    "    print(\"Accuracy for class\", labels[class_i], \":\", mean)\n",
+    "\n",
+    "print(\"Overall Accuracy :\", np.mean(y_test == y_pred_labels))\n",
+    "\n",
+    "'''[[ 19   0   0   0   0]\n",
+    " [  1 112   0  10   0]\n",
+    " [  0   0  14   0   0]\n",
+    " [  1  12   1  67  14]\n",
+    " [  0   1   0   3  39]]\n",
+    "Accuracy for class GOC : [1.]\n",
+    "Accuracy for class GRA : [0.91056911]\n",
+    "Accuracy for class GST : [1.]\n",
+    "Accuracy for class GWG : [0.70526316]\n",
+    "Accuracy for class GWC : [0.90697674]\n",
+    "Overall Accuracy : 0.8537414965986394'''"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 28,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[0. 1.]\n",
+      "[ 0.0000000e+00  1.5258789e-05  0.0000000e+00 ...  3.3020020e-02\n",
+      "  1.2680054e-02 -8.7432861e-03]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000176\n",
+      "\n",
+      " GRA :  0.38465884\n",
+      "\n",
+      " GST :  0.00000003\n",
+      "\n",
+      " GWG :  0.00648697\n",
+      "\n",
+      " GWC :  0.60885239\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[1. 2.]\n",
+      "[-0.03717041 -0.05769348 -0.06455994 ...  0.01766968  0.01895142\n",
+      "  0.01779175]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000044\n",
+      "\n",
+      " GRA :  0.00247770\n",
+      "\n",
+      " GST :  0.00000003\n",
+      "\n",
+      " GWG :  0.01955874\n",
+      "\n",
+      " GWC :  0.97796303\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[2. 3.]\n",
+      "[ 0.02345276  0.02101135  0.01712036 ... -0.01161194 -0.0141449\n",
+      " -0.01431274]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00002324\n",
+      "\n",
+      " GRA :  0.00770301\n",
+      "\n",
+      " GST :  0.00000020\n",
+      "\n",
+      " GWG :  0.01101210\n",
+      "\n",
+      " GWC :  0.98126149\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[3. 4.]\n",
+      "[-0.01583862 -0.01066589 -0.00762939 ... -0.0377655  -0.03556824\n",
+      " -0.02685547]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00001256\n",
+      "\n",
+      " GRA :  0.94493687\n",
+      "\n",
+      " GST :  0.00001222\n",
+      "\n",
+      " GWG :  0.03799357\n",
+      "\n",
+      " GWC :  0.01704480\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[4. 5.]\n",
+      "[-0.02836609 -0.02510071 -0.02012634 ...  0.0138855  -0.00386047\n",
+      " -0.00904846]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00009305\n",
+      "\n",
+      " GRA :  0.07313888\n",
+      "\n",
+      " GST :  0.00000047\n",
+      "\n",
+      " GWG :  0.15516256\n",
+      "\n",
+      " GWC :  0.77160501\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[5. 6.]\n",
+      "[-0.00526428  0.00822449  0.01951599 ...  0.02729797  0.02156067\n",
+      "  0.01234436]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00002247\n",
+      "\n",
+      " GRA :  0.26627952\n",
+      "\n",
+      " GST :  0.00000522\n",
+      "\n",
+      " GWG :  0.01112610\n",
+      "\n",
+      " GWC :  0.72256666\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[6. 7.]\n",
+      "[ 0.00544739  0.00053406  0.00970459 ... -0.02848816 -0.01611328\n",
+      " -0.01091003]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000011\n",
+      "\n",
+      " GRA :  0.00877954\n",
+      "\n",
+      " GST :  0.00000002\n",
+      "\n",
+      " GWG :  0.00733439\n",
+      "\n",
+      " GWC :  0.98388600\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[7. 8.]\n",
+      "[-0.0177002  -0.02372742 -0.02700806 ... -0.04304504 -0.04063416\n",
+      " -0.03363037]\n",
+      "(128, 32)\n",
       "PREDICTED VALUES\n",
       "\n",
-      " crackling_fire :  0.42179796\n",
+      " GOC :  0.00000136\n",
       "\n",
-      " helicopter :  0.00178161\n",
+      " GRA :  0.99270928\n",
       "\n",
-      " rain :  0.00269044\n",
+      " GST :  0.00002075\n",
       "\n",
-      " thunderstorm :  0.57372999\n",
+      " GWG :  0.00483087\n",
+      "\n",
+      " GWC :  0.00243783\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[8. 9.]\n",
+      "[-0.01539612 -0.00108337  0.00718689 ...  0.01161194  0.01818848\n",
+      "  0.02700806]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000364\n",
+      "\n",
+      " GRA :  0.89666098\n",
+      "\n",
+      " GST :  0.00000704\n",
+      "\n",
+      " GWG :  0.00706323\n",
+      "\n",
+      " GWC :  0.09626509\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[ 9. 10.]\n",
+      "[ 0.03549194  0.04856873  0.05519104 ... -0.02171326 -0.03634644\n",
+      " -0.03912354]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00001260\n",
+      "\n",
+      " GRA :  0.15989006\n",
+      "\n",
+      " GST :  0.00000509\n",
+      "\n",
+      " GWG :  0.05977093\n",
+      "\n",
+      " GWC :  0.78032130\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[10. 11.]\n",
+      "[-0.02934265 -0.0115509   0.00445557 ... -0.03616333 -0.03759766\n",
+      " -0.0304718 ]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000484\n",
+      "\n",
+      " GRA :  0.62774366\n",
+      "\n",
+      " GST :  0.00000141\n",
+      "\n",
+      " GWG :  0.05731521\n",
+      "\n",
+      " GWC :  0.31493491\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[11. 12.]\n",
+      "[-0.03358459 -0.03901672 -0.03933716 ... -0.02337646 -0.02124023\n",
+      " -0.02107239]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00001070\n",
+      "\n",
+      " GRA :  0.02227188\n",
+      "\n",
+      " GST :  0.00000205\n",
+      "\n",
+      " GWG :  0.06705441\n",
+      "\n",
+      " GWC :  0.91066092\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[12. 13.]\n",
+      "[-0.00846863  0.00444031  0.00852966 ... -0.00604248 -0.00845337\n",
+      " -0.00497437]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
       "\n",
-      " wind :  0.00000001\n",
+      " GOC :  0.00000028\n",
       "\n",
+      " GRA :  0.21407339\n",
       "\n",
-      "GUESS:  thunderstorm\n",
-      "[4.2179796e-01 1.7816082e-03 2.6904407e-03 5.7372999e-01 1.4333640e-08]\n"
+      " GST :  0.00000426\n",
+      "\n",
+      " GWG :  0.48406833\n",
+      "\n",
+      " GWC :  0.30185366\n",
+      "GUESS: Nothing\n",
+      "[13. 14.]\n",
+      "[-0.00427246 -0.00718689 -0.00811768 ... -0.01966858 -0.01296997\n",
+      " -0.01628113]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000002\n",
+      "\n",
+      " GRA :  0.04747614\n",
+      "\n",
+      " GST :  0.00000026\n",
+      "\n",
+      " GWG :  0.28232297\n",
+      "\n",
+      " GWC :  0.67020059\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[14. 15.]\n",
+      "[-0.02262878 -0.01573181 -0.00117493 ... -0.08956909 -0.0695343\n",
+      " -0.04067993]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000068\n",
+      "\n",
+      " GRA :  0.03221902\n",
+      "\n",
+      " GST :  0.00000030\n",
+      "\n",
+      " GWG :  0.06798044\n",
+      "\n",
+      " GWC :  0.89979953\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[15. 16.]\n",
+      "[-0.02532959 -0.01031494 -0.00280762 ... -0.07128906 -0.07106018\n",
+      " -0.05839539]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000002\n",
+      "\n",
+      " GRA :  0.86727339\n",
+      "\n",
+      " GST :  0.00000005\n",
+      "\n",
+      " GWG :  0.00011261\n",
+      "\n",
+      " GWC :  0.13261394\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[16. 17.]\n",
+      "[-0.04600525 -0.02149963  0.00523376 ... -0.02526855 -0.02735901\n",
+      " -0.03106689]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000016\n",
+      "\n",
+      " GRA :  0.10364556\n",
+      "\n",
+      " GST :  0.00000006\n",
+      "\n",
+      " GWG :  0.04509518\n",
+      "\n",
+      " GWC :  0.85125911\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[17. 18.]\n",
+      "[-0.02043152 -0.01174927 -0.02088928 ...  0.10055542  0.08653259\n",
+      "  0.06604004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00009542\n",
+      "\n",
+      " GRA :  0.34512478\n",
+      "\n",
+      " GST :  0.00000620\n",
+      "\n",
+      " GWG :  0.19678749\n",
+      "\n",
+      " GWC :  0.45798609\n",
+      "GUESS: Nothing\n",
+      "[18. 19.]\n",
+      "[ 0.04153442  0.01223755 -0.00654602 ...  0.03269958  0.02374268\n",
+      "  0.02774048]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000035\n",
+      "\n",
+      " GRA :  0.76191986\n",
+      "\n",
+      " GST :  0.00000023\n",
+      "\n",
+      " GWG :  0.08037928\n",
+      "\n",
+      " GWC :  0.15770023\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[19. 20.]\n",
+      "[0.02185059 0.02069092 0.01451111 ... 0.03469849 0.03985596 0.04600525]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00047749\n",
+      "\n",
+      " GRA :  0.76327378\n",
+      "\n",
+      " GST :  0.00000129\n",
+      "\n",
+      " GWG :  0.03341111\n",
+      "\n",
+      " GWC :  0.20283636\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[20. 21.]\n",
+      "[ 0.0353241   0.01567078 -0.00102234 ...  0.1058197   0.10365295\n",
+      "  0.09759521]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00002144\n",
+      "\n",
+      " GRA :  0.63609004\n",
+      "\n",
+      " GST :  0.00001051\n",
+      "\n",
+      " GWG :  0.30752742\n",
+      "\n",
+      " GWC :  0.05635052\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[21. 22.]\n",
+      "[ 0.09413147  0.07905579  0.05625916 ... -0.01145935 -0.00245667\n",
+      "  0.00479126]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000066\n",
+      "\n",
+      " GRA :  0.99761701\n",
+      "\n",
+      " GST :  0.00000020\n",
+      "\n",
+      " GWG :  0.00054236\n",
+      "\n",
+      " GWC :  0.00183976\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[22. 23.]\n",
+      "[ 0.0037384   0.01168823  0.01628113 ... -0.03440857 -0.05511475\n",
+      " -0.08209229]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00001949\n",
+      "\n",
+      " GRA :  0.87093616\n",
+      "\n",
+      " GST :  0.00000191\n",
+      "\n",
+      " GWG :  0.04734631\n",
+      "\n",
+      " GWC :  0.08169603\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[23. 24.]\n",
+      "[-0.1026001  -0.12590027 -0.14944458 ...  0.03462219  0.02537537\n",
+      "  0.02354431]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000000\n",
+      "\n",
+      " GRA :  0.79179174\n",
+      "\n",
+      " GST :  0.00000004\n",
+      "\n",
+      " GWG :  0.19508553\n",
+      "\n",
+      " GWC :  0.01312272\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[24. 25.]\n",
+      "[ 0.0196991   0.02836609  0.03103638 ... -0.03009033 -0.03392029\n",
+      " -0.03681946]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000019\n",
+      "\n",
+      " GRA :  0.99032038\n",
+      "\n",
+      " GST :  0.00000008\n",
+      "\n",
+      " GWG :  0.00241051\n",
+      "\n",
+      " GWC :  0.00726884\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[25. 26.]\n",
+      "[-0.04151917 -0.03933716 -0.03703308 ...  0.05451965  0.0519104\n",
+      "  0.05206299]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000147\n",
+      "\n",
+      " GRA :  0.94179332\n",
+      "\n",
+      " GST :  0.00000139\n",
+      "\n",
+      " GWG :  0.05180373\n",
+      "\n",
+      " GWC :  0.00640011\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[26. 27.]\n",
+      "[ 0.05670166  0.06253052  0.07643127 ... -0.00396729  0.00715637\n",
+      "  0.00585938]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000093\n",
+      "\n",
+      " GRA :  0.06941112\n",
+      "\n",
+      " GST :  0.00000640\n",
+      "\n",
+      " GWG :  0.14259055\n",
+      "\n",
+      " GWC :  0.78799099\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[27. 28.]\n",
+      "[-0.00222778 -0.01303101 -0.02310181 ...  0.01165771  0.01649475\n",
+      "  0.0194397 ]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000000\n",
+      "\n",
+      " GRA :  0.01543347\n",
+      "\n",
+      " GST :  0.00000000\n",
+      "\n",
+      " GWG :  0.04449097\n",
+      "\n",
+      " GWC :  0.94007552\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[28. 29.]\n",
+      "[0.01657104 0.01519775 0.00924683 ... 0.03746033 0.03282166 0.02775574]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000003\n",
+      "\n",
+      " GRA :  0.33569953\n",
+      "\n",
+      " GST :  0.00000165\n",
+      "\n",
+      " GWG :  0.14353959\n",
+      "\n",
+      " GWC :  0.52075917\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[29. 30.]\n",
+      "[ 0.01919556  0.0135498   0.01724243 ... -0.00575256 -0.01502991\n",
+      " -0.02742004]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000223\n",
+      "\n",
+      " GRA :  0.93829304\n",
+      "\n",
+      " GST :  0.00000170\n",
+      "\n",
+      " GWG :  0.00578377\n",
+      "\n",
+      " GWC :  0.05591923\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[30. 31.]\n",
+      "[-0.0322876  -0.0365448  -0.03544617 ... -0.0218811  -0.02978516\n",
+      " -0.04052734]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000810\n",
+      "\n",
+      " GRA :  0.60701579\n",
+      "\n",
+      " GST :  0.00000535\n",
+      "\n",
+      " GWG :  0.21953745\n",
+      "\n",
+      " GWC :  0.17343327\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[31. 32.]\n",
+      "[-0.04328918 -0.03413391 -0.03421021 ...  0.05908203  0.06370544\n",
+      "  0.05949402]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000032\n",
+      "\n",
+      " GRA :  0.07600122\n",
+      "\n",
+      " GST :  0.00000019\n",
+      "\n",
+      " GWG :  0.49096382\n",
+      "\n",
+      " GWC :  0.43303445\n",
+      "GUESS: Nothing\n",
+      "[32. 33.]\n",
+      "[ 0.06063843  0.06056213  0.06610107 ... -0.12741089 -0.13371277\n",
+      " -0.12313843]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000140\n",
+      "\n",
+      " GRA :  0.12951134\n",
+      "\n",
+      " GST :  0.00000031\n",
+      "\n",
+      " GWG :  0.58525521\n",
+      "\n",
+      " GWC :  0.28523183\n",
+      "\n",
+      "\n",
+      "GUESS:  GWG\n",
+      "[33. 34.]\n",
+      "[-0.09968567 -0.06376648 -0.03105164 ... -0.0138092  -0.01574707\n",
+      " -0.01896667]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000170\n",
+      "\n",
+      " GRA :  0.86591440\n",
+      "\n",
+      " GST :  0.00000117\n",
+      "\n",
+      " GWG :  0.13115266\n",
+      "\n",
+      " GWC :  0.00293008\n",
+      "\n",
+      "\n",
+      "GUESS:  GRA\n",
+      "[34. 35.]\n",
+      "[-0.00811768  0.00149536  0.00953674 ... -0.004776   -0.0010376\n",
+      "  0.00231934]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000166\n",
+      "\n",
+      " GRA :  0.07164631\n",
+      "\n",
+      " GST :  0.00000392\n",
+      "\n",
+      " GWG :  0.40353966\n",
+      "\n",
+      " GWC :  0.52480853\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[35. 36.]\n",
+      "[ 0.00238037  0.00236511  0.00231934 ... -0.00193787  0.0068512\n",
+      "  0.00695801]\n",
+      "(128, 32)\n",
+      "PREDICTED VALUES\n",
+      "\n",
+      " GOC :  0.00000096\n",
+      "\n",
+      " GRA :  0.02603642\n",
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      " GST :  0.00000121\n",
+      "\n",
+      " GWG :  0.05616241\n",
+      "\n",
+      " GWC :  0.91779894\n",
+      "\n",
+      "\n",
+      "GUESS:  GWC\n",
+      "[{'class': 'GWC', 'timestamp': 0}, {'class': 'GWC', 'timestamp': 1}, {'class': 'GWC', 'timestamp': 2}, {'class': 'GRA', 'timestamp': 3}, {'class': 'GWC', 'timestamp': 4}, {'class': 'GWC', 'timestamp': 5}, {'class': 'GWC', 'timestamp': 6}, {'class': 'GRA', 'timestamp': 7}, {'class': 'GRA', 'timestamp': 8}, {'class': 'GWC', 'timestamp': 9}, {'class': 'GRA', 'timestamp': 10}, {'class': 'GWC', 'timestamp': 11}, {'class': 'Nothing', 'timestamp': 12}, {'class': 'GWC', 'timestamp': 13}, {'class': 'GWC', 'timestamp': 14}, {'class': 'GRA', 'timestamp': 15}, {'class': 'GWC', 'timestamp': 16}, {'class': 'Nothing', 'timestamp': 17}, {'class': 'GRA', 'timestamp': 18}, {'class': 'GRA', 'timestamp': 19}, {'class': 'GRA', 'timestamp': 20}, {'class': 'GRA', 'timestamp': 21}, {'class': 'GRA', 'timestamp': 22}, {'class': 'GRA', 'timestamp': 23}, {'class': 'GRA', 'timestamp': 24}, {'class': 'GRA', 'timestamp': 25}, {'class': 'GWC', 'timestamp': 26}, {'class': 'GWC', 'timestamp': 27}, {'class': 'GWC', 'timestamp': 28}, {'class': 'GRA', 'timestamp': 29}, {'class': 'GRA', 'timestamp': 30}, {'class': 'Nothing', 'timestamp': 31}, {'class': 'GWG', 'timestamp': 32}, {'class': 'GRA', 'timestamp': 33}, {'class': 'GWC', 'timestamp': 34}, {'class': 'GWC', 'timestamp': 35}]\n"
      ]
     }
    ],
    "source": [
     "## Running the model\n",
     "\n",
-    "# Convert wav to MFCC\n",
-    "prediction_data = wav2mfcc('./prediction/wind.wav')\n",
+    "n_mfcc = config.buckets\n",
+    "max_len = config.max_len\n",
+    "# convert file to wav2mfcc\n",
+    "# Mel-frequency cepstral coefficients\n",
+    "file_path = \"./prediction/nature_sc.wav\"\n",
+    "big_wave, sr = librosa.load(file_path, mono=True, sr=None)\n",
+    "#print(wave.shape, sr)\n",
     "\n",
-    "# Reshape to 4 dimensions\n",
-    "prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
+    "classification = []\n",
     "\n",
-    "# Run the model on the inputted file\n",
-    "predicted = loaded_model.predict(prediction_data)\n",
+    "for sec_index in range( int(big_wave.shape[0] / sr) ) :\n",
+    "    start_sec = sec_index\n",
+    "    end_sec = sec_index + 1\n",
+    "    \n",
+    "    sec_to_trim = np.array( [ float(start_sec), float(end_sec) ] )\n",
+    "    print(sec_to_trim)\n",
+    "    sec_to_trim = np.ceil( sec_to_trim * sr )\n",
     "\n",
-    "# Output the prediction values for each class\n",
-    "print ('PREDICTED VALUES')\n",
-    "labels_indices = range(len(labels))\n",
-    "max_value = 0\n",
-    "max_value_index = 0\n",
-    "for index in labels_indices:\n",
-    "    print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
-    "    if predicted[0,index] > max_value:\n",
-    "        max_value_index = index\n",
-    "        max_value = predicted[0,index]\n",
+    "    wave = big_wave[int(sec_to_trim[0]) : int(sec_to_trim[1])]\n",
+    "    print(wave)\n",
     "\n",
-    "# Output the prediction\n",
-    "if max_value < 0.5:\n",
-    "    print(\"GUESS: Nothing\")\n",
-    "else:\n",
-    "    print('\\n\\nGUESS: ', labels[max_value_index])\n",
-    "    \n",
-    "print(predicted[0])"
+    "    wave = np.asfortranarray(wave[::3])\n",
+    "    mfcc = librosa.feature.mfcc(wave, sr=16000, n_mfcc=n_mfcc)\n",
+    "\n",
+    "    # If maximum length exceeds mfcc lengths then pad the remaining ones\n",
+    "    if (max_len > mfcc.shape[1]):\n",
+    "        pad_width = max_len - mfcc.shape[1]\n",
+    "        mfcc = np.pad(mfcc, pad_width=((0, 0), (0, pad_width)), mode='constant')\n",
+    "\n",
+    "    # Else cutoff the remaining parts\n",
+    "    else:\n",
+    "        mfcc = mfcc[:, :max_len]\n",
+    "\n",
+    "    # Convert wav to MFCC\n",
+    "    prediction_data = wav2mfcc('./prediction/nature_sc.wav')\n",
+    "    prediction_data = mfcc\n",
+    "    print(prediction_data.shape)\n",
+    "    #print(wav2mfcc())\n",
+    "    # Reshape to 4 dimensions\n",
+    "    prediction_data = prediction_data.reshape(1, config.buckets, config.max_len, channels)\n",
+    "    #prediction_data = prediction_data.reshape(1, 20, config.max_len, channels)\n",
+    "\n",
+    "    # Run the model on the inputted file\n",
+    "    predicted = loaded_model.predict(prediction_data)\n",
+    "\n",
+    "    # Output the prediction values for each class\n",
+    "    print ('PREDICTED VALUES')\n",
+    "    labels_indices = range(len(labels))\n",
+    "    max_value = 0\n",
+    "    max_value_index = 0\n",
+    "    for index in labels_indices:\n",
+    "        print('\\n', labels[index], \": \", '%.08f' % predicted[0,index])\n",
+    "        if predicted[0,index] > max_value:\n",
+    "            max_value_index = index\n",
+    "            max_value = predicted[0,index]\n",
+    "\n",
+    "    # Output the prediction\n",
+    "    if max_value < 0.5:\n",
+    "        print(\"GUESS: Nothing\")\n",
+    "        classification.append( { \"class\" : \"Nothing\", \"timestamp\" : start_sec } )\n",
+    "    else:\n",
+    "        print('\\n\\nGUESS: ', labels[max_value_index])\n",
+    "        classification.append( { \"class\" : labels[max_value_index], \"timestamp\" : start_sec } )\n",
+    "\n",
+    "print(classification)"
    ]
   },
   {
@@ -493,9 +1276,9 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "kaggleNotebook",
+   "display_name": "Python 3",
    "language": "python",
-   "name": "kagglenotebook"
+   "name": "python3"
   },
   "language_info": {
    "codemirror_mode": {
@@ -507,7 +1290,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.3"
+   "version": "3.7.4"
   }
  },
  "nbformat": 4,
diff --git a/geo-cnn/geo_cnn_model.h5 b/geo-cnn/geo_cnn_model.h5
new file mode 100644
index 0000000..be79ac9
Binary files /dev/null and b/geo-cnn/geo_cnn_model.h5 differ
diff --git a/geo-cnn/preprocess.py b/geo-cnn/preprocess.py
index e5fe230..1b26999 100644
--- a/geo-cnn/preprocess.py
+++ b/geo-cnn/preprocess.py
@@ -65,9 +65,10 @@ def get_train_test(split_ratio=0.6, random_state=42):
 
     assert X.shape[0] == len(y)
 
-    return train_test_split(X, y, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
-
+    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= (1 - 0.8), random_state=random_state, shuffle=True)
+    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size= (1 - split_ratio), random_state=random_state, shuffle=True)
 
+    return X_train, X_test, X_val, y_train, y_test, y_val
 
 def prepare_dataset(path=DATA_PATH):
     labels, _, _ = get_labels(path)
diff --git a/geo_cnn_model.h5 b/geo_cnn_model.h5
new file mode 100644
index 0000000..be79ac9
Binary files /dev/null and b/geo_cnn_model.h5 differ
